"use strict";

paAcl.$inject = ["$http", "$q", "paCache", "config"];
angular.module('paApp').factory('paAcl', paAcl);

function paAcl($http, $q, paCache, config) {
  var permissions = {};
  return {
    loadPermissions: function(){
      $http.get(config.apiUrl + '/ws/allowedPermissions').then(function (resp) {
        permissions = resp.data;
      });
    },
    isAllowed: function isAllowed(resource, permission) {
      var deferred = $q.defer();
      $http.get(config.apiUrl + '/ws/isAllowed/' + resource + '/' + permission).then(function (resp) {
        return deferred.resolve(resp.data);
      });
      return deferred.promise;
    },
    hasPermission: function(resource, permission){
      return permissions[resource] && permissions[resource].includes(permission);
    },
    loadSystemResources: function(){
      var conf = paCache.getConf();
      $http.get(config.apiUrl + '/ws/systemResources').then(function (resp) {
        conf.systemResources = _.sortBy(resp.data, 'order');
      });
    }
  };
}
'use strict';

authService.$inject = ["$q", "$http", "$window", "config"];
angular.module('paApp').factory('authService', authService);

function authService($q, $http, $window, config) {
  return {
    login: function(username, password, callback) {
      //var deferred = $q.defer();
      $http.post(config.apiUrl + '/login', {
        username: username,
        password: password
      }).then(
      function (response) {
        if (response && response.data && response.data.token) {
          $window.localStorage.setItem('pa.token', response.data.token);
          callback({
            success: true,
            data: response.data
          });
        } else {
          callback({
            success: false,
            error: 'Invalid credentials'
          });
        }
      },
      function (error) {
        callback({
          success: false,
          error: error
        });
      });
    },
    mirgovoritLogin: function(data, callback) {
      //var deferred = $q.defer();
      $http.post(config.apiUrl + '/ws/mirgovorit/login', {
        data: data
      }).then(
      function (response) {
        if (response && response.data && response.data.token) {
          $window.localStorage.setItem('pa.token', response.data.token);
          callback({
            success: true,
            data: response.data.profile
          });
        } else {
          callback({
            success: false,
            error: 'Invalid credentials'
          });
        }
      },
      function (error) {
        callback({
          success: false,
          error: error
        });
      });
    },
    logout: function logout() {
      var deferred = $q.defer();
      $http.get(config.apiUrl + '/ws/logout').then(function (response) {
        deferred.resolve();
      });
      return deferred;
    },
    getStrategies: function(){
      var deferred = $q.defer();
      $http.get(config.apiUrl + '/ws/auth/strategies').then(function (response) {
        deferred.resolve(response.data);
      });
      return deferred.promise;
    }
  };
}
"use strict";

paCache.$inject = ["$log", 'config'];
angular.module('paApp').factory('paCache', paCache);

function paCache($log, config) {
  var data = {
    initialized: false
  };
  var conf = {};
  var feed = {};
  var pageScope = {};
  var alerts = [];
  var events = {};
  var counters= null;
  var localization={
    locales: [
      {code:'it',desc:'italiano'},
      {code:'en',desc:'english'},
      {code:'ru',desc:'русский'},
      {code:'fr',desc:'francais'},
      {code:'de',desc:'deutsche'}
    ]
  }
  return {
    setOnlineUsers: function(users) {
      conf.onlineUsers = _.indexBy(users, 'student');
    },
    setCurrentPage: function(page) {
      conf.currentPage = page;
    },
    setCurrentFolder: function(folder) {
      conf.currentFolder = folder;
    },
    setCurrentContent: function(content) {
      conf.currentContent = content;
    },
    setCurrentHomework: function(homework) {
      conf.currentHomework = homework;
    },
    setCurrentMode: function(mode) {
      conf.currentMode = mode;
    },
    setSelected: function(i, sel) {
      if(!data.selected){
        data.selected={};
      }
      data.selected[i] = sel;
    },
    getSelected: function(i) {
      return data.selected[i];
    },
    setSelectedImage: function(msg) {
      data.selectedImage = msg._id;
    },
    setTab: function(i) {
      data.tab = i;
    },
    setSize: function(s) {
      data.size = s;
    },
    setSize2: function(s) {
      data.size2 = s;
    },
    set: function(name, value) {
      data[name] = value;
    },
    stopRec: function() {
      data.rec = false;
    },
    setChannel: function(channel) {
      conf.channel = channel;
    },
    setSidebarTab: function(tab) {
      if (!conf.sidebar) {
        conf.sidebar={};
      }
      conf.sidebar.tab=tab;
    },
    init: function() {
      var jq = (angular.element === window.jQuery);
      if (!jq) {
        $log.error('using jqLite');
      }
      data = {
        initialized: true,
        selected: {},
        ratio: 1,
        size: 3,
        size2: 7,
        opacity: .4,
        selectedImage: -1,
        selectedDiv: -1,
        tab: 1,
        counter: 0,
        counters: {},
        temp: {},
        notifications: [],
        unit: angular.element('#panel').width() / 12,
        unitW: angular.element('#panel').width() / 100,
        unitH: angular.element('#panel').height() / 100,
        selCollections: {},
        audio: {},
        tooltips: {},
        player: {}
      };
      return data;
    },
    initCounters: function(obj){
      counters = obj;
    },
    getCounters: function(){
      return counters;
    },
    initPageScope: function(){
      pageScope={};
      return pageScope;
    },
    getPageScope: function(){
      return pageScope;
    },
    getData: function() {
      return data;
    },
    getConf: function() {
      return conf;
    },
    getFeed: function() {
      return feed;
    },
    getAlerts: function(){
      return alerts;
    },
    getEvents: function(){
      return events;
    },
    getDrops: function(){
      if (!data.drops){
        data.drops={};
      }
      return data.drops;
    },
    getLocalization: function(){
      return localization;
    },
    initLocale: function() {
      var storedLocale = window.localStorage.getItem('pa.locale');
      if (!storedLocale) {
        this.setUserLocale(config.defaultLocale);
      } else {
        this.setUserLocale(storedLocale);
      }
    },
    setUserLocale: function(locale){
      var userLocale = localization.locales.find((l)=>l.code==locale);
      if (userLocale) {
        localization.userLocale = userLocale;
        window.localStorage.setItem('pa.locale', userLocale.code);
      }
    },
    getUserLocale: function() {
      return localization.userLocale;
    }
  };
}
"use strict";

paChannel.$inject = ["$q", "$rootScope", "$http", "paCache", "config"];
angular.module('paApp').factory('paChannel', paChannel);

function paChannel($q, $rootScope, $http, paCache, config) {
  return {
    loadValidStudents: function(){
      $http.get(config.apiUrl + '/ws/findUserSubscriptions/' + $rootScope.user.channel).then(function (resp) {
        var pageScope = paCache.getPageScope();
        pageScope.validStudents = _.indexBy(resp.data,'student');
      })
    },
    saveLesson: function(subscription){
      var conf = paCache.getConf();
      $http.post(config.apiUrl + '/ws/newLesson/' + subscription.student._id + '/' + $rootScope.user.teacher + '/' + conf.channel._id);
    },
    loadRoom: function() {
        var self = this;
        var conf = paCache.getConf();
  
        $http.get(config.apiUrl + '/ws/findChannelSubscriptions/' + conf.channel._id).then(function (resp) {
          conf.room.subscriptions=resp.data;

          var promises=[];
          _.each(resp.data,function(subscr){
            var promise = $http.get(config.apiUrl + '/ws/studentData/'+subscr.student._id).then(function(resp){
              return resp.data;
            })
            promises.push(promise);
          });
          var promise = $http.get(config.apiUrl + '/ws/teacherData/'+$rootScope.user.channel).then(function(resp){
            return resp.data;
          })
          promises.push(promise);
  
          $q.all(promises).then(function(result){
              // sort
              conf.room.users=result;
              conf.user=_.find(result, function(user){
                return user.id==$rootScope.user.id;
              })
              console.log('conf.room.users:'+result.length);
          })
        })
      },
      joinChannel: function(id){
        var deferred = $q.defer();
        $http.get('/ws/channels/'+id+'/join').then(function(resp){
          return deferred.resolve(resp.data);
        })
        return deferred.promise;
      },
      findOrCreateChannel: function(id){
        var deferred = $q.defer();
        $http.get('/ws/findOrCreateChannel/teachers/'+id).then(function(resp){
          return deferred.resolve(resp.data);
        })
        return deferred.promise;
      },
      subscribeChannel: function(subscr) {
        var deferred = $q.defer();
        $http.post('/ws/students/'+subscr.student+'/subscribeChannel',subscr).then(function(resp){
          return deferred.resolve(resp.data);
        })
        return deferred.promise;
      },
      unsubscribeChannel: function(subscr) {
        var deferred = $q.defer();
        $http.post('/ws/students/'+subscr.student+'/unsubscribeChannel').then(function(resp){
          return deferred.resolve(resp.data);
        })
        return deferred.promise;
      },
      saveSubscriptions: function(subscriptions) {
        var conf = paCache.getConf();

        var deferred = $q.defer();
        $http.post('/ws/channels/'+conf.channel._id+'/subscriptions', subscriptions).then(function(resp){
          return deferred.resolve(resp.data);
        })
        return deferred.promise;
      },
      openChannel: function(id){
        var deferred = $q.defer();
        $http.post(config.apiUrl + '/ws/openChannel/' + id).then(function (resp) {
          return deferred.resolve(resp.data);
        });
        return deferred.promise;
      }
    }
}
"use strict";

exceptionHandler.$inject = ['$log', 'LogglyLogger', '$injector'];
angular.module('paApp').factory('$exceptionHandler', exceptionHandler);

function exceptionHandler($log, LogglyLogger, $injector) {
    return function(exception, cause) {
		var rootScope = $injector.get('$rootScope');
		if (rootScope){
			LogglyLogger.fields( { username: rootScope.user.username } );
		}
		$log.error(exception, cause);
    };
}
"use strict";

paFeed.$inject = ["$rootScope", "$http", "$q", "paCache", "config"];
angular.module('paApp').factory('paFeed', paFeed);

function paFeed($rootScope, $http, $q, paCache, config) {
    return {
        loadFeeds: function(){
            $http.get('/ws/feeds').then(function(resp){
                var pageScope = paCache.getPageScope();
                pageScope.feeds=resp.data;
            })
        },
        addFeed: function(feed) {
            var deferred = $q.defer();
            $http.post('/ws/feeds', feed).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        updateFeed: function(feed) {
            var deferred = $q.defer();
            $http.put('/ws/feeds/'+feed._id, feed).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        removeFeed: function(feed) {
            var deferred = $q.defer();
            $http.delete('/ws/feeds/'+feed._id).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        }
   }
}
"use strict";

paHomework.$inject = ["$rootScope", "$http", "$q", "paCache", "config"];
angular.module('paApp').factory('paHomework', paHomework);

function paHomework($rootScope, $http, $q, paCache, config) {
    return {
        loadHomeworks: function(student){
            $http.get('/ws/homeworks/students/'+student).then(function(resp){
                var pageScope = paCache.getPageScope();
                pageScope.homeworks=resp.data;
                pageScope.homeworksOpen=_.filter(pageScope.homeworks, h=>!h.done).length;
            })
        },
        addHomework: function(homework) {
            var deferred = $q.defer();
            $http.post('/ws/homeworks', homework).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        editHomework: function(homework) {
            var deferred = $q.defer();
            $http.put('/ws/homeworks/'+homework._id, homework).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        removeHomework: function(homework) {
            var deferred = $q.defer();
            $http.delete('/ws/homeworks/'+homework._id).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        patchHomework: function(student, content, patch){
            var deferred = $q.defer();
            $http.put('/ws/homeworks/students/'+student+'/contents/'+content, patch).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        saveComment: function(homework, comment) {
            var deferred = $q.defer();
            $http.post('/ws/homeworks/'+homework._id+'/comments', {comment: comment}).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        updateComment: function(homework, i, comment) {
            var deferred = $q.defer();
            $http.put('/ws/homeworks/'+homework._id+'/comments/'+i, {comment: comment}).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        removeComment: function(homework, i) {
            var deferred = $q.defer();
            $http.delete('/ws/homeworks/'+homework._id+'/comments/'+i).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        }
    }
}
"use strict";

authInterceptor.$inject = ["$window", "$q", "toaster"];
angular.module('paApp').factory('authInterceptor', authInterceptor);

function authInterceptor($window, $q, toaster) {
  return {
    request: function request(config) {
      if(!config.url.startsWith('https://a34alefeliza.github.io') 
      && !config.url.startsWith('https://customsearch.googleapis.com') 
      && !config.url.startsWith('https://www.googleapis.com/youtube')){
        config.headers['Authorization'] = 'Bearer ' + $window.localStorage.getItem('pa.token');
      }
      return config;
    },
    responseError: function responseError(response) {
      if (response.status === 401) {
        //toaster.pop('error', "Access denied", "not authenticated"); //$window.location.href = '/login';
      } else if (response.status === 403) {
        toaster.pop('error', "Access denied", "not authorized");
      } else if (response.status === 500) {
        toaster.pop('error', "Error", response.data);
      } else if (response.status === 404 || response.status === 409) {
        return $q.reject(response);
      }
    }
  };
}
"use strict";

paIntro.$inject = ["$rootScope", "$state", "$http", "$q", "$timeout", "paCache", "config", "ngIntroService", "toaster"];
angular.module('paApp').factory('paIntro', paIntro);

function paIntro($rootScope, $state, $http, $q, $timeout, paCache, config, ngIntroService, toaster) {
    return {
        resetIntro: function() {
            var deferred = $q.defer();
            $http.post('/ws/intro/reset/'+$rootScope.user.id).then(function(resp){
                return deferred.resolve(resp.data);
            });
            return deferred.promise;
        },
        pageTour: function(page) {
            var self=this;
            if (config.intro && $rootScope.user.role=='T'){
                $http.get(config.apiUrl+'/ws/intro/'+page).then(function(resp){
                    var pageSteps = resp.data;
                    if (pageSteps && pageSteps.length){

                        var showUserProfile = _.find(pageSteps, function(step){
                            return step.showUserProfile;
                        });
                        if (showUserProfile){
                            var conf = paCache.getConf();
                            conf.sidebar={
                                show:true,
                                tab:1
                            }
                            //$rootScope.$apply();
                        }
                        $timeout(function(){

                            var introOptions = {
                                showStepNumbers:false,
                                showBullets:false,
                                showProgress:false,
                                tooltipClass:'pa-tooltip',
                                //exitOnEsc: false,
                                exitOnOverlayClick: false,
                                hidePrev: true,
                                hideNext: true,
                                nextToDone: true,
                                steps: pageSteps
                            };
                            ngIntroService.clear();
                            ngIntroService.setOptions(introOptions);
                            ngIntroService.onComplete(function(){
                                var map = {};
                                map[page] = new Date();
                                $http.post('/ws/intro/lastSeen/'+$rootScope.user.id, map);
                            })
                            ngIntroService.onExit(function(){
                                var map = {};
                                map[page] = new Date();
                                $http.post('/ws/intro/lastSeen/'+$rootScope.user.id, map);
                            })
                            ngIntroService.start();
    
                        }, 0, false);
                    }
                })
            }    
        },
        getSteps: function() {
            var deferred = $q.defer();
            $http.get('/ws/steps').then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        saveSteps: function(steps){
            $http.put('/ws/steps', steps).then(function(resp){
                toaster.pop('success', 'Steps', 'Steps saved succesfully');
            })
        },
        saveStep: function(step){
            $http.post('/ws/steps', step).then(function(resp){
                toaster.pop('success', 'Step', 'Step saved succesfully');
                $state.transitionTo('intro-steps');
            })
        },
        removeStep: function(step){
            $http.delete('/ws/steps/'+step._id).then(function(resp){
                toaster.pop('success', 'Step', 'Step removed succesfully');
                $state.transitionTo('intro-steps');
            })
        }

    }
}
"use strict";

paMenu.$inject = ["$http", "$q", "paCache", "config"];
angular.module('paApp').factory('paMenu', paMenu);

function paMenu($http, $q, paCache, config) {
  return {
    pages:{},
    contents:{},
    loadFolders: function(){
      var conf=paCache.getConf();
      if(!conf.allFolders){
        $http.get(config.apiUrl + '/ws/menu/findAllFolders').then(function (resp) {
          conf.allFolders = _.sortBy(resp.data, 'order');
        });
      }
    },
    loadMyFolders: function(teacher){
      var conf = paCache.getConf();
      $http.get(config.apiUrl + '/ws/menu/findFolders/' + teacher).then(function (resp) {
        conf.myFolders = resp.data;
      });
      $http.get(config.apiUrl + '/ws/menu/folderSubscriptions/' + teacher).then(function (resp) {
        conf.myFolderSubscriptions = resp.data;
      });
    },
    loadPages: function(folder, forceReload){
      var self=this;
      var conf=paCache.getConf();
      if (!self.pages[folder._id] || forceReload){
        $http.get(config.apiUrl + '/ws/menu/findPages/' + folder._id).then(function (result) {
          _.each(result.data, function(page){
            page.template=conf.templates[page.template];
          })
          self.pages[folder._id] = _.sortBy(result.data, 'pos');
          folder.pages = self.pages[folder._id];
        });
      } else {
        folder.pages = self.pages[folder._id];
      }
    },
    loadContents: function(folder, forceReload){
      var self=this;
      var conf=paCache.getConf();
      if (!self.contents[folder._id] || !self.pages[folder._id] || forceReload){
        $http.get(config.apiUrl + '/ws/findContentsByFolder/' + folder._id).then(function (result) {

          _.each(result.data.pages, function(page){
            page.template=conf.templates[page.template];
          })
          self.pages[folder._id] = _.sortBy(result.data.pages, 'pos');
          folder.pages = self.pages[folder._id];

          var pMap = _.indexBy(result.data.pages,'_id');
          _.each(result.data.contents, function(content){
            content.page=pMap[content.page];
          })
          self.contents[folder._id] = _.sortBy(result.data.contents, 'name');
          folder.contents = self.contents[folder._id];
        });
      } else {
        folder.contents = self.contents[folder._id];
        folder.pages = self.pages[folder._id];
      }
    },
    seachCollectionsByName: function(name){
      var deferred = $q.defer();
      $http.post('/ws/collections/search', {name:name}).then(function(result){
        return deferred.resolve(result.data);
      });
      return deferred.promise;
    }
  };
}
"use strict";

paService.$inject = ["$q", "$rootScope", "$state", "$stateParams", "$http", "runtimeStates", "paCache", "paSocket", "paMenu", "ngAudio", "config", "toaster"];
angular.module('paApp').factory('paService', paService);

function paService($q, $rootScope, $state, $stateParams, $http, runtimeStates, paCache, paSocket, paMenu, ngAudio, config, toaster) {
  return {
    init: function init() {
      var conf = paCache.getConf();
      var data = paCache.init();
      var self = this;

      /*if (conf.channel && conf.channel.open) {
        paCache.setSidebarTab(2);
      } else {
        paCache.setSidebarTab(1);
      }*/
  
      if ($state.current.name) {
        if ($stateParams.content.type == 'C') {
          // by content
          data.selCollections.readonly = true;
          this.loadPageContent(conf.currentContent);
        } else if ($stateParams.content.type == 'W') {
          // by workplan
          data.selCollections.readonly = true;
          this.loadPageContent(conf.currentContent);
        } else if ($stateParams.content.type == 'P') {
          // by page
          data.selCollections.readonly = false;
          $http.get(config.apiUrl + '/ws/pageConf/' + $rootScope.user.channel + '/' + conf.currentPage._id).then(function (resp) {
            if (resp.data){
              self.loadPageContent(resp.data);
            }
          });
        }

        // initial size
        data.size = 15;
        data.size2 = 10;
        data.textsize = 2;
        data.textsize2 = 2;

        var params = _.extend(conf.currentPage.template.params, conf.currentPage.params);
        if (params) {
          data.pageParams = params;

          if (params.onClickAudio) {
            data.onClickAudio = ngAudio.load(params.onClickAudio);
            if (data.onClickAudio.error){
              throw new Error('error loading audio');
            }
          }

          if (params.size) {
            data.size = parseInt(params.size);
          }

          if (params.size2) {
            data.size2 = parseInt(params.size2);
          }

          if (params.opacity) {
            data.opacity = parseFloat(params.opacity);
          }

          if (params.textsize) {
            data.textsize = parseFloat(params.textsize);
          }

          if (params.textsize2) {
            data.textsize2 = parseFloat(params.textsize2);
          }

          if (params.ratio) {
            data.ratio = parseFloat(params.ratio);
          }
        }

        self.findParams().then(function (params) {
          if (params) {
            if (params.size) {
              data.size = parseInt(params.size);
            }

            if (params.size2) {
              data.size2 = parseInt(params.size2);
            }

            if (params.opacity) {
              data.opacity = parseFloat(params.opacity);
            }

            if (params.textsize) {
              data.textsize = parseFloat(params.textsize);
            }

            if (params.textsize2) {
              data.textsize2 = parseFloat(params.textsize2);
            }

            if (params.ratio) {
              data.ratio = parseFloat(params.ratio);
            }
          }
        });

      }

      return data;
    },
    findText: function findText() {
      var deferred = $q.defer();

      var data = paCache.getData();
      var conf = paCache.getConf();
      if ($stateParams.content.type == 'C') {
        // by content
        data.selCollections.readonly = true;
        $http.get(config.apiUrl + '/ws/findTextByCode/' + $rootScope.user.channel + '/' + conf.currentContent.text).then(function (resp) {
          if (resp.data) {
            data.selCollections.text = resp.data._id;
          }

          return deferred.resolve(resp.data);
        });
      } else if ($stateParams.content.type == 'W') {
        // by workplan
        data.selCollections.readonly = true;
        $http.get(config.apiUrl + '/ws/findTextByCode/' + $rootScope.user.channel + '/' + conf.currentContent.text).then(function (resp) {
          if (resp.data) {
            data.selCollections.text = resp.data._id;
          }

          return deferred.resolve(resp.data);
        });
      } else if ($stateParams.content.type == 'P') {
        // by page
        data.selCollections.readonly = false;
        $http.get(config.apiUrl + '/ws/findActiveText/' + conf.currentPage._id + '/' + $rootScope.user.channel).then(function (resp) {
          if (resp.data) {
            data.selCollections.text = resp.data._id;
          }

          return deferred.resolve(resp.data);
        });
      }

      return deferred.promise;
    },
    split: function split(chars, sep) {
      var chunks = [];
      var i=0;
      var chunk = {
        i: i,
        chars: [],
        textValue: '',
        type: 'chunk'
      };
      chunks.push(chunk);

      _.each(chars, function (c) {
        if (c.val == sep) {
          chunk = {
            i: ++i,
            chars: [],
            textValue: '',
            type: 'chunk'
          };
          chunks.push(chunk);
        } else {
          chunk.chars.push(c);
          chunk.textValue+=c.val;
        }
      });

      return chunks;
    },
    destroy: function destroy() {
      var data = paCache.getData();

      _.each(data.audioCollection, function (item) {
        item.audio.pause();
      });
    },
    loadPageContent: function loadPageContent(content) {
      paCache.setCurrentContent(content);
      var data = paCache.getData();
      var conf = paCache.getConf();
      var self=this;

      if (content.page && content.page.collections && content.page.collections.img && content.img) {
        data.selCollections.img = content.img;
        this.findCollectionByCode(content.img).then(function (collection) {
          if (collection) {
            if (conf.currentPage.params && conf.currentPage.params.shuffleImages) {
              if ($rootScope.admin) {
                paSocket.emit('images', _.shuffle(collection.resources));
              }
            } else {
              data.images = collection.resources;
            }
          }
        });
      }

      if (content.page && content.page.collections && content.page.collections.img2 && content.img2) {
        data.selCollections.img2 = content.img2;
        this.findCollectionByCode(content.img2).then(function (collection) {
          if (collection) {
            if (conf.currentPage.params && conf.currentPage.params.shuffleImages2) {
              if ($rootScope.admin) {
                paSocket.emit('images2', _.shuffle(collection.resources));
              }
            } else {
              data.images2 = collection.resources;
            }
          }
        });
      }

      if (content.page && content.page.collections && content.page.collections.text && content.text) {
        data.selCollections.text = content.text;
        this.findTextByCode(content.text).then(function (collection) {
          if (collection) {
            data.text = collection.chars;
            data.textResources = collection.resources;

            _.each(collection.chars, function (c, i) {
              c.index = i;
            });
          }
        });
      }

      if (content.page && content.page.collections && content.page.collections.text2 && content.text2) {
        data.selCollections.text2 = content.text2;
        this.findTextByCode(content.text2).then(function (collection) {
          if (collection) {
            data.text2 = collection.chars;

            _.each(collection.chars, function (c, i) {
              c.index = i;
            });
          }
        });
      }

      if (content.page && content.page.collections && content.page.collections.audio && content.audio) {
        data.selCollections.audio = content.audio;
        this.findCollectionByCode(content.audio).then(function (collection) {
          if (collection) {
            var audioCollection = [];

            _.each(collection.resources, function (res, i) {
              var audio=ngAudio.load(res.src);
              if(audio.error){
                throw new Error('error loading audio');
              }
              audioCollection.push({
                audio: audio,
                title: res.title,
                i: i
              });
            });

            data.audioCollection = audioCollection;
          }
        });
      }

      if (content.page && content.page.collections && content.page.collections.card && content.card) {
        data.selCollections.card = content.card;
        this.findCollectionByCode(content.card).then(function (collection) {
          if (collection) {
            data.cards = collection.resources;
          }
        });
      }

      if (content.page && content.page.collections && content.page.collections.url && content.url) {
        data.selCollections.url = content.url;
        this.findCollectionByCode(content.url).then(function (collection) {
          if (collection) {
            data.url = collection.resources;
          }
        });
      }

      if (content.page && content.page.collections && content.page.collections.mixed && content.mixed) {
        data.selCollections.mixed = content.mixed;
        this.findCollectionByCode(content.mixed).then(function (collection) {
          if (collection) {
            data.mixed = collection.resources;
          }
        });
      }

      if (content.page && content.page.collections && content.page.collections.mixed2 && content.mixed2) {
        data.selCollections.mixed2 = content.mixed2;
        this.findCollectionByCode(content.mixed2).then(function (collection) {
          if (collection) {
            data.mixed2 = collection.resources;
          }
        });
      }

      if (content.page && content.page.collections && content.page.collections.grid && content.grid) {
        data.selCollections.grid = content.grid;
        this.findCollectionByCode(content.grid).then(function (collection) {
          if (collection) {
            data.grid = collection.resources;
          }
        });
      }

      if ($rootScope.admin && content.page && content.page.collections){
        var sel=0;
        _.each(_.keys(content.page.collections), function(coll){
          if (content[coll]){
            sel++;
          }
        })
        if (sel==0 && _.keys(content.page.collections).length>1){
          toaster.pop('warning','Warning', "No collection selected. Please select at least one collection.")
        }
      }
    },
    processResources: function(resources){
      var count = paCache.getCounters();
      var self=this;
      _.each(resources,function(res){
        res.id=count.i++;
        if (res.type=='card'){
          self.processResource(res.front);
          self.processResource(res.back);
        } else {
          self.processResource(res);
        }
      })
    },
    processResource: function(res) {
      if (res) {        
        var count = paCache.getCounters();
        var self=this;
        if (res.type=='text'){
          res.words=self.split(res.chars,' ');
          _.each(res.words,function(word){
            word.id=count.w++;
          })
        }
        _.each(res.chars,function(char){
          char.id=count.c++;
        })
      }
    },
    findCollectionByCode: function findCollectionByCode(code) {
      var deferred = $q.defer(); // conf.currentFolder is not defined on student side
      //var conf = paCache.getConf();

      var self=this;
      $http.get(config.apiUrl + '/ws/findCollectionByCode/' + $rootScope.user.channel + '/' + code).then(
        function (resp) {
          var collection = resp.data;
          paCache.initCounters({i:0,w:0,c:0});
          if(collection.type=='grid'){
            _.each(collection.resources,function(line){
              self.processResources(line.resources);
            })
          } else {
            self.processResources(collection.resources);
          }
          return deferred.resolve(collection);
        }
      );
      return deferred.promise;
    },
    findTextByCode: function findTextByCode(code) {
      var deferred = $q.defer(); // conf.currentFolder is not defined on student side
      //var conf = paCache.getConf();

      $http.get(config.apiUrl + '/ws/findTextByCode/' + $rootScope.user.channel + '/' + code).then(function (resp) {
        return deferred.resolve(resp.data);
      });
      return deferred.promise;
    },
    findParams: function findParams() {
      var deferred = $q.defer();
      var conf = paCache.getConf();
      $http.get(config.apiUrl + '/ws/pageParams/' + conf.currentPage._id + '/' + $rootScope.user.channel).then(function (resp) {
        // defaults
        var params = {odd:1,even:3};
        for (let param of resp.data) {
          params[param.name] = param.value;
        }
        if (conf.currentMode!='P' && conf.currentContent) {
          $http.get(config.apiUrl + '/ws/contentParams/' + conf.currentContent._id + '/' + $rootScope.user.channel).then(function (resp) {
              for (let param of resp.data) {
                params[param.name] = param.value;
              }
              return deferred.resolve(params);
          })
        } else {
          return deferred.resolve(params);
        }

      });
      return deferred.promise;
    },
    saveParam: function saveParam(name, value, system) {
      var conf = paCache.getConf();
      if (conf.currentMode!='P' && conf.currentContent) {
        $http.put(config.apiUrl + '/ws/contentParam', {content:conf.currentContent._id, teacher:$rootScope.user.channel, name:name, value:value, systemParam: system});
      } else {
        $http.put(config.apiUrl + '/ws/pageParam', {page:conf.currentPage._id, teacher:$rootScope.user.channel, name:name, value:value, systemParam: system});
      }
    },
    listBlobs: function listBlobs(prefix) {
      var deferred = $q.defer();
      var conf = paCache.getConf();
      $http.post(config.apiUrl + '/ws/browse', {
        folder: conf.currentFolder.code,
        prefix: prefix
      }).then(function (resp) {
        return deferred.resolve(resp.data);
      });
      return deferred.promise;
    },
    getBlob: function getBlob(name) {
      var deferred = $q.defer();
      var conf = paCache.getConf();
      $http.post(config.apiUrl + '/ws/getBlob/' + conf.currentFolder.code, {
        name: name
      }).then(function (resp) {
        return deferred.resolve(resp.data);
      });
      return deferred.promise;
    },
    saveBlob: function saveBlob(name, data) {
      var deferred = $q.defer();
      var conf = paCache.getConf();
      $http.post(config.apiUrl + '/ws/saveBlob/' + conf.currentFolder.code, {
        name: name,
        data: data
      }).then(function (resp) {
        return deferred.resolve(resp.data);
      });
      return deferred.promise;
    },
    loadContents: function loadContents(folder) {
      paMenu.loadContents(folder);
    },
    loadWorkplans: function loadWorkplans() {
      $http.get(config.apiUrl + '/ws/workplans/teachers/' + $rootScope.user.channel).then(function (resp) {
        var conf = paCache.getConf();
        conf.workplans = resp.data;
      });
    },
    loadWorkplan: function loadWorkplan(workplan) {
      var conf=paCache.getConf();
      $http.get(config.apiUrl + '/ws/workplans/' + workplan._id + '/contents').then(function (result) {
        workplan.contents = _.filter(result.data,'page');
        _.each(workplan.contents,function(content){
          content.page.template=conf.templates[content.page.template];
          content.subsrc = _.find(conf.myFolderSubscriptions, function(subscr){
            return subscr.folder._id==content.page.folder;
          });
        })
      });
    },
    loadPages: function loadPages(folder) {
      paMenu.loadPages(folder);
    },
    loadAlerts: function() {
      $http.get(config.apiUrl + '/ws/alerts').then(function (result) {
        var conf = paCache.getConf();
        conf.alerts=result.data;
      })
    },
    loadStates: function loadStates() {
      $http.get(config.apiUrl + '/ws/templates').then(function (result) {
        _.each(result.data, function (template) {
          runtimeStates.addState({
            name: template.name,
            controller: template.controller,
            templateUrl: template.templateUrl,
            params: template.params
          });
        });
        
        var conf = paCache.getConf();
        conf.templates=_.indexBy(result.data,'_id');
      });
    },
    loadFreeStickers: function loadFreeStickers() {
      var data = paCache.init();
      var self = this;
      $http.get(config.apiUrl + '/ws/freeContent/stickers').then(function (result) {
        self.loadPageContent(result.data);
      });
      return data;
    },
    loadStudentComments: function loadStudentComments(id) {
      $http.get(config.apiUrl + '/ws/comments/students/' + id).then(function (res) {
        var data = paCache.getData();
        data.comments = res.data;
      });
    },
    logContent: function logContent(content) {
      var conf = paCache.getConf();

      if (conf.channel.open) {
        $http.post(config.apiUrl + '/ws/channel/log', {
          channel: conf.channel,
          folder: conf.currentFolder,
          teacher: $rootScope.user.channel,
          content: content
        });
      }
    },
    loadAudioCollections: function(folder) {
      if (folder && folder._id){
        var conf = paCache.getConf();
        $http.post(config.apiUrl + '/ws/menu/findPages',{type:'A',folder:folder._id}).then(function(resp){
          if (resp.data && resp.data.length){
            var page =resp.data[0];
            $http.post(config.apiUrl + '/ws/findCollections', {type:'audio',folder:folder._id,page:page._id}).then(
              function (resp) {
                conf.currentFolder.audioCollections=resp.data;
              }
            );
          }
        })
      }
    }
  };
}
"use strict";

angular.module('paApp').config(['$urlRouterProvider', '$stateProvider', function ($urlRouterProvider, $stateProvider) {
  //$urlRouterProvider.otherwise('/home');
  $stateProvider.state('login', {
    //url: '/login',
    controller: 'loginCtrl',
    templateUrl: '/pa/pa.login.html?795b87625b9d3199'
  });
  $stateProvider.state('auth', {
    url: '/auth/:token',
    controller: 'authCtrl'
  });
  $stateProvider.state('join', {
    url: '/join/:channel',
    controller: 'channelCtrl',
    templateUrl: '/pa/pa.subscription.html?af79fbf92532d6cb'
  });
  $stateProvider.state('mirgovorit-link', {
    url: '/mirgovorit/link',
    controller: 'mirgovoritCtrl',
    templateUrl: '/pa/mirgovorit-link.html?094aa374a6ae29d6',
    params:{
      mirgovoritProfile:null
    }
  });
  $stateProvider.state('mirgovorit-login', {
    url: '/mirgovorit/login',
    controller: 'mirgovoritCtrl'
  });
  $stateProvider.state('pa', {
    url: '/pa/:to',
    controller: 'homeCtrl'
  });
  $stateProvider.state('dashboard',{
    //url: '/',
    controller: 'dashboardController',
    templateUrl: '/pa/pa.dashboard.html?8530b07352a2118a',
    params:{
      tab:null
    }
  });
  $stateProvider.state('dashboard-o',{
    //url: '/',
    controller: 'dashboardController',
    templateUrl: '/pa/pa.dashboard-o.html?39df4a2df4a99c5d'
  });
  $stateProvider.state('dashboard-e',{
    //url: '/',
    controller: 'dashboardController',
    templateUrl: '/pa/pa.dashboard-e.html?55a08b362e7ed219'
  });
  $stateProvider.state('edit-folder',{
    //url: '/',
    controller: 'paFolderCtrl',
    templateUrl: '/pa/pa.edit-folder.html?e6f64967e6432506',
    params: {
      folder:null,
      forceReload:null
    }
  });
  $stateProvider.state('copy-page',{
    //url: '/',
    controller: 'paCopyPageCtrl',
    templateUrl: '/pa/pa.copy-page.html?ddff14c695e1de0f'
  });
  $stateProvider.state('add-page',{
    //url: '/',
    controller: 'paEditPageCtrl',
    templateUrl: '/pa/pa.edit-page.html?3b4599d9a9476992'
  });
  $stateProvider.state('edit-page',{
    //url: '/',
    controller: 'paEditPageCtrl',
    templateUrl: '/pa/pa.edit-page.html?3b4599d9a9476992',
    params: {
      page:null
    }
  });
  $stateProvider.state('edit-content',{
    //url: '/',
    controller: 'paEditContentCtrl',
    templateUrl: '/pa/pa.edit-content.html?919cdf1a6002560a',
    params: {
      content:null
    }
  });
  $stateProvider.state('profile',{
    //url: '/profile',
    controller: 'paProfileCtrl',
    templateUrl: '/pa/pa.profile.html?674cec8e4a417cdd'
  });
  $stateProvider.state('edit-profile',{
    //url: '/edit-profile',
    controller: 'paProfileCtrl',
    templateUrl: '/pa/pa.edit-profile.html?2d02ad744576bf69'
  });
  $stateProvider.state('opentok',{
    //url: '/opentok',
    controller: 'paProfileCtrl',
    templateUrl: '/pa/pa.edit-opentok.html?53d47b97e806282e'
  });
$stateProvider.state('students',{
    //url: '/students',
    controller: 'paStudentsCtrl',
    templateUrl: '/pa/pa.students.html?450a17a268b69fbb'
  });
  $stateProvider.state('add-student',{
    //url: '/add-student',
    controller: 'paStudentCtrl',
    templateUrl: '/pa/popup.add-student.html?03dc217959f9d295'
  });
  $stateProvider.state('edit-student',{
    //url: '/edit-student/:id',
    controller: 'paStudentCtrl',
    templateUrl: '/pa/popup.edit-student.html?518c6a80d8da9094',
    params: {
      id: null
    }
  });
  $stateProvider.state('select-student',{
    //url: '/select-student/:id',
    controller: 'dashboardController',
    templateUrl: '/pa/pa.dashboard.html?8530b07352a2118a',
    params: {
      id: null,
      tab: null
    }
  });
  $stateProvider.state('add-group',{
    //url: '/add-student',
    controller: 'paGroupCtrl',
    templateUrl: '/pa/popup.group.html?513ee77a6f459d9c'
  });
  $stateProvider.state('edit-group',{
    //url: '/add-student',
    controller: 'paGroupCtrl',
    templateUrl: '/pa/popup.group.html?513ee77a6f459d9c',
    params:{
      group: null
    }
  });
  $stateProvider.state('lessons',{
    //url: '/lessons',
    controller: 'lessonsCtrl',
    templateUrl: '/pa/pa.lessons.html?3c7d70811177f69a'
  });
  $stateProvider.state('levels',{
    //url: '/levels',
    controller: 'levelsCtrl',
    templateUrl: '/pa/pa.levels.html?659ef536913e0a0a'
  });
  $stateProvider.state('payments',{
    //url: '/payments',
    controller: 'paPaymentsCtrl',
    templateUrl: '/pa/pa.payments.html?ee59a8e28abe7206'
  });
  $stateProvider.state('webinar',{
    //url: '/unlock',
    controller: 'paWebinarCtrl',
    templateUrl: '/pa/pa.webinar.html?7af455cf2a297b24'
  });
  $stateProvider.state('unlock',{
    //url: '/unlock',
    controller: 'paUnlockCtrl',
    templateUrl: '/pa/popup.unlock.html?bb5363a881306e2b'
  });
  $stateProvider.state('change-password',{
    //url: '/change-password',
    controller: 'paChangePasswordCtrl',
    templateUrl: '/pa/pa.change-password.html?d82f1c7771688f6b'
  });
$stateProvider.state('subscriptions',{
    //url: '/subscriptions',
    controller: 'subscriptionsController',
    templateUrl: '/pa/pa/pa.subscriptions.html'
  });
  $stateProvider.state('wall',{
    //url: '/wall',
    controller: 'likesController',
    templateUrl: '/pa/pa.likes.html?7d1629d1e330ae99'
  });
  $stateProvider.state('posts',{
    //url: '/posts',
    params: {
      tab: 5
    },
    controller: 'dashboardController',
    templateUrl: '/pa/pa.dashboard.html?8530b07352a2118a'
  });
  $stateProvider.state('admin',{
    //url: '/admin',
    controller: 'adminController',
    templateUrl: '/pa/pa.admin.html?769028d1fb1b39ae',
    params: {
      options: null
    }
  });
  $stateProvider.state('canvas',{
    //url: '/canvas',
    controller: 'canvasController',
    templateUrl: '/pa/pa.canvas.html?b44612280c542847',
    params: {
      content: null
    }
  });
  $stateProvider.state('add-collection',{
    controller: 'CollectionCtrl',
    templateUrl: '/pa/pa.popup.html?72e4460249056cb8',
    params: {
      collection: {},
      options: null
    }
  });
  $stateProvider.state('collection-mixed',{
    controller: 'CollectionCtrl',
    templateUrl: '/pa/pa.collection-mixed.html?ca980bd891ff5c9d',
    params: {
      collection: {},
      options: null,
      tab: 0
    }
  });
  $stateProvider.state('collection-mixed2',{
    controller: 'CollectionCtrl',
    templateUrl: '/pa/pa.collection-mixed.html?ca980bd891ff5c9d',
    params: {
      collection: {},
      options: null,
      tab: 0
    }
  });
  $stateProvider.state('collection-grid',{
    controller: 'CollectionCtrl',
    templateUrl: '/pa/pa.collection-grid.html?1067d128f89b5629',
    params: {
      collection: {},
      options: null,
      tab: 0
    }
  });
  $stateProvider.state('edit-card',{
    controller: 'cardEditorController',
    templateUrl: '/pa/pa.card.editor.html?6de285e7d71fb699',
    params: {
      collection: {},
      card: {},
      options: null
    }
  });
  $stateProvider.state('edit-collection',{
    controller: 'CollectionCtrl',
    templateUrl: '/pa/pa.popup.html?72e4460249056cb8',
    params: {
      collection: {},
      options: null,
      tab: null,
      back: null
    }
  });
  $stateProvider.state('copy-collection',{
    controller: 'CollectionCtrl',
    templateUrl: '/pa/pa.popup.html?72e4460249056cb8',
    params: {
      collection: {},
      copyFrom: null,
      options: null
    }
  });
  $stateProvider.state('copy-collection-mixed',{
    controller: 'CollectionCtrl',
    templateUrl: '/pa/pa.collection-mixed.html?ca980bd891ff5c9d',
    params: {
      collection: {},
      copyFrom: null,
      options: null
    }
  });
  $stateProvider.state('copy-collection-grid',{
    controller: 'CollectionCtrl',
    templateUrl: '/pa/pa.collection-grid.html?1067d128f89b5629',
    params: {
      collection: {},
      copyFrom: null,
      options: null
    }
  });
  $stateProvider.state('edit-pictogram',{
    //url: '/edit-pictogram',
    controller: 'pictogramCtrl',
    templateUrl: '/pa/pa.pictogram.editor.html?1cb44c0b4bf7b9fd',
    params: {
      collection: {},
      type: null
    }
  });
  $stateProvider.state('size-factor',{
    //url: '/size-factor',
    controller: 'sizeFactorCtrl',
    templateUrl: '/pa/pa.size-factor.editor.html?ed8409765e1c79e7',
    params: {
      collection: {}
    }
  });
  $stateProvider.state('lesson',{
    //url: '/lesson/:lessonId',
    controller: 'dashboardController',
    templateUrl: '/pa/pa.dashboard.html?8530b07352a2118a'
  });
  $stateProvider.state('org-teachers',{
    //url: '/lesson/:lessonId',
    controller: 'paOrganizationCtrl',
    templateUrl: '/pa/pa.org-teachers.html?94b8d2b7c4cf8a37'
  });
  $stateProvider.state('org-teacher',{
    //url: '/lesson/:lessonId',
    controller: 'paOrganizationCtrl',
    templateUrl: '/pa/pa.org-teacher.html?3ca0350407d1fa44',
    params:{
      teacher:null
    }
  });
  $stateProvider.state('org-students',{
    //url: '/lesson/:lessonId',
    controller: 'paOrganizationCtrl',
    templateUrl: '/pa/pa.org-students.html?487df4ad8fc8b36d'
  });
  $stateProvider.state('org-groups',{
    //url: '/lesson/:lessonId',
    controller: 'paOrganizationCtrl',
    templateUrl: '/pa/pa.org-groups.html?b32cda71831d09b0'
  });
  $stateProvider.state('org-student',{
    //url: '/lesson/:lessonId',
    controller: 'paOrganizationCtrl',
    templateUrl: '/pa/pa.org-student.html',
    params:{
      student:null
    }
  });
  $stateProvider.state('org-unlock',{
    //url: '/unlock',
    controller: 'paUnlockCtrl',
    templateUrl: '/pa/popup.org-unlock.html?29c515b9d2e752c6'
  });
  $stateProvider.state('org-workplans',{
    //url: '/lesson/:lessonId',
    controller: 'paOrganizationCtrl',
    templateUrl: '/pa/pa.org-workplans.html'
  });
  $stateProvider.state('org-payments',{
    //url: '/lesson/:lessonId',
    controller: 'paOrganizationCtrl',
    templateUrl: '/pa/pa.org-payments.html?31c942b10e5bce66'
  });
  $stateProvider.state('marketplace',{
    //url: '/lesson/:lessonId',
    controller: 'paMarketplaceCtrl',
    templateUrl: '/pa/pa.marketplace.html?4332b59100c46859',
    params:{
      teacher:null
    }
  });
  $stateProvider.state('org-subscriptions',{
    //url: '/lesson/:lessonId',
    controller: 'paOrganizationCtrl',
    templateUrl: '/pa/pa.org-subscriptions.html?eccb58de3f974edf'
  });
  $stateProvider.state('styles',{
    //url: '/lesson/:lessonId',
    controller: 'paStyleController',
    templateUrl: '/pa/pa.globalStyle.html?81c38eae33abd68a',
    params: {
      global:true
    }
  });
  $stateProvider.state('intro-steps',{
    //url: '/lesson/:lessonId',
    controller: 'paIntroController',
    templateUrl: '/pa/pa.introSteps.html?3d83c58066977a77',
    params: {
      global:true
    }
  });
  $stateProvider.state('intro-step',{
    //url: '/lesson/:lessonId',
    controller: 'paIntroController',
    templateUrl: '/pa/pa.introStep.html?a6ccb028eebd3fc3',
    params: {
      step: null
    }
  });
  $stateProvider.state('feeds',{
    //url: '/lesson/:lessonId',
    controller: 'paFeedsController',
    templateUrl: '/pa/pa.feeds.html?89469a8dab215e30'
  });
  $stateProvider.state('feed',{
    //url: '/lesson/:lessonId',
    controller: 'paFeedController',
    templateUrl: '/pa/pa.feed.html?0e2976628368b036',
    params: {
      feed:null
    }
  });
  $stateProvider.state('search-collections',{
    //url: '/lesson/:lessonId',
    controller: 'paCollectionsController',
    templateUrl: '/pa/pa.search-collections.html?c237cbb6185933c4',
    params: {
      feed:null
    }
  });
  $stateProvider.state('axerve', {
    //url: '/pa/axerve',
    controller: 'axerveCtrl',
    templateUrl: '/pa/axerve.html?14e69ecd7d627148',
  });
}]);
"use strict";

paPayment .$inject = ["$q", "$rootScope", "$state", "$http", "paCache", "config"];
angular.module('paApp').factory('paPayment', paPayment );

function paPayment ($q, $rootScope, $state, $http, paCache, config) {
    return {
        getOrganizationPayments: function(org){
            $http.get('/ws/organizations/'+org+'/payments')
                .then(function(resp){
                    var pageScope=paCache.getPageScope();
                    pageScope.payments = resp.data;
                })
        }
   }
}
"use strict";

paSocket.$inject = ["$rootScope", "$state", "$log", "$location", "$document", "$window", "$timeout", "$uibModal", "$http", "paCache", "paChannel", "ngAudio", "config"];
angular.module('paApp').factory('paSocket', paSocket);

function paSocket($rootScope, $state, $log, $location, $document, $window, $timeout, $uibModal, $http, paCache, paChannel, ngAudio, config) {
  var socket;
  return {
    on: function on(eventName, callback) {
      /*LogglyLogger.sendMessage({
      username: $rootScope.user.username,
      message: 'on ' + eventName
      });*/
      function wrapper() {
        var args = arguments;

        var data = paCache.getData();
        if(!data.initialized){
          data = paCache.init();
        }

        var msg = args[0];
        if (msg && msg._id && msg._user && msg._user.role=='S'){
          var name = msg._user.data.name+' '+msg._user.data.surname;
          data.tooltips[msg._id] = {
            text: name,
            open: true
          };
          $timeout(function () {
            data.tooltips[msg._id] = undefined;
          }, 3000);
            
        }
  
        $rootScope.$apply(function () {
          callback.apply(socket, args);
        });
      }

      socket.on(eventName, wrapper);
      return function () {
        socket.removeListener(eventName, wrapper);
      };
    },
    emit: function emit(eventName, data, callback) {

      var conf = paCache.getConf();
      var isLocked = conf.user && conf.user.params && conf.user.params.locked=='true';
      if (!isLocked || $rootScope.admin) {
        /*LogglyLogger.sendMessage({ 
        	username: $rootScope.user.username,
        	message: 'emit ' + eventName
        });*/
        if (paCache.getData().rec) {
          var event = {
            name: eventName,
            data: data,
            rec: paCache.getData().rec._id
          };
          $http.post(config.apiUrl + '/ws/event/save', event, function (error, event) {});
        }

        if (_.isObject(data)){
          data._user = conf.user;
        }

        socket.emit(eventName, data, function () {
          var args = arguments;
          $rootScope.$apply(function () {
            if (callback) {
              callback.apply(socket, args);
            }
          });
        });
      }
    },
    removeAllListeners: function removeAllListeners(eventName, callback) {
      //socket.removeAllListeners();
    },
    init: function init() {
      var ns = $location.protocol() + '://' + $location.host() + ':' + $location.port() + '/whiteboard';
      var paToken = $window.localStorage.getItem('pa.token');
      socket = io.connect(ns, {
        query: {token: paToken}
      });
      $log.info("socket created: " + ns);
      socket.on('connect', function () {
        socket.emit('register', $rootScope.user);
      });
      socket.on('disconnect message', function (student) {
        $log.info("disconnect student " + student);

        if (student == $rootScope.user.student) {
          socket.disconnect();
        }
      });
      socket.on('reload', function (teacher) {
        $window.location.reload();
      });
      socket.on("page message", function (msg) {
        paCache.stopRec();
        var params=null;
        if (msg.page){
          paCache.setCurrentContent(null);
          paCache.setCurrentPage(msg.page);
          params = _.extend(msg.page.params?msg.page.params:{},{content: {type: 'P'}});
        }
        $state.transitionTo(msg.code, params, {"reload": true});
      });
      socket.on("content message", function (msg) {
        paCache.stopRec();
        var params=msg.content.page.params||{};
        if (msg.content){
          paCache.setCurrentContent(msg.content);
          paCache.setCurrentPage(msg.content.page);
          params = _.extend(params,{content: msg.content});
        }
        $state.transitionTo(msg.code, params, {"reload": true});
      });
      socket.on("pos message", function (elem) {
        var element = angular.element("#" + elem.id);
        var w = $("#panel").width();
        var h = $("#panel").height();
        element.css({
          top: elem.y * h + 'px',
          left: elem.x * w + 'px'
        });
      });
      socket.on("drag", function (evt) {
        var element = angular.element("#" + evt.source);
        var w = element.width();
        var h = element.height();
        var target = angular.element("#" + evt.target);
        element.detach().appendTo(target);
        element.css({
          top: evt.y + '%',
          left: evt.x + '%',
          position: 'absolute',
          width: w,
          height: h
        });
        var drops = paCache.getDrops();
        drops[evt.source] = true;
      });
      socket.on("undo-drag", function (evt) {
        var element = angular.element("#" + evt.source);
        var target = angular.element("#" + evt.target); //target.empty();

        element.detach().appendTo(target);
        element.css({
          top: 0,
          left: 0,
          position: 'relative'
        });
        var drops = paCache.getDrops();
        drops[evt.source] = false;
      });
      socket.on("fit", function (evt) {
        var element = angular.element("#" + evt.source);
        var w = element.width();
        var h = element.height();
        var target = angular.element("#" + evt.target);
        element.detach().appendTo(target);
        element.css({
          position: 'absolute',
          left: '0',
          top: '0'
        });
        target.css({
          width: w,
          height: h
        })
        var drops = paCache.getDrops();
        drops[evt.source] = true;
      });
      socket.on("append", function (evt) {
        var element = angular.element("#" + evt.source);
        var w = element.width();
        var h = element.height();
        var target = angular.element("#" + evt.target);
        element.detach().appendTo(target);
        element.css({
          position: evt.position ? evt.position : '',
          left: '',
          top: '',
          width: w,
          height: h
        });
        var drops = paCache.getDrops();
        drops[evt.source] = true;
      });
      socket.on('click-msg', function (msg) {
        var target = angular.element("#" + msg.id);
        var x = msg.x * target.width();
        var y = msg.y * target.height();
        var element;

        if (msg.single) {
          element = angular.element(".click-msg");

          if (!element.length) {
            element = angular.element('<i class="fa ' + msg.icon + ' fa-2x click-msg"></i>');
            element.appendTo(target);
          }
        } else {
          element = angular.element('<i class="fa ' + msg.icon + ' fa-2x click-msg"></i>');
          element.appendTo(target);
        }

        element.css({
          top: y - element.height() / 2,
          left: x - element.width() / 2,
          position: 'absolute'
        });
      });
      socket.on('clear-click-msg', function (msg) {
        var l = angular.element(".click-msg");

        _.each(l, function (e) {
          e.remove();
        });
      });
      socket.on("play-track", function (a) {
        var data = paCache.getData();
        if (!data.audioCollection){
          data.audioCollection={};
        }

        if (a.play !== undefined) {
          data.track = a.play;
          if (!data.audioCollection[a.play]) {
            var audio=ngAudio.load(a.play);
            if (audio.error){
              throw new Error('error loading audio');
            }
            data.audioCollection[a.play]={audio:audio};
          }
          data.audioCollection[a.play].audio.play();

        } else if (a.pause !== undefined && data.audioCollection[a.pause]) {
          data.track = -1;
          data.audioCollection[a.pause].audio.pause();

        } else if (a.stop !== undefined && data.audioCollection[a.stop]) {
          data.track = -1;
          data.audioCollection[a.stop].audio.pause();

        } else if (a.track !== undefined && a.progress !== undefined && data.audioCollection[a.track]) {
          data.audioCollection[a.track].audio.progress = a.progress;
        }
      });
      socket.on("audio message", function (msg) {
        var data = paCache.getData();

        var res = _.find(data.audioCollection, function (audio) {
          return audio.title == msg.title;
        });

        if (msg.action == 'play') {
          res.audio.play();
        } else if (msg.action == 'pause') {
          res.audio.pause();
        } else if (msg.action == 'stop') {
          res.audio.pause();
        }
      });
      socket.on("smile message", function (i) {
        var data = paCache.getData();
        data.selectedSmiles[i] = true;
        data.counter = data.counter + 1;
      });
      this.on('count', function (msg) {
        var data = paCache.getData();
        data.counters[msg.user] = msg.counter;
      });
      this.on('text', function (obj) {
        if (window.getSelection) {
          if (window.getSelection().empty) {  // Chrome
            window.getSelection().empty();
          } else if (window.getSelection().removeAllRanges) {  // Firefox
            window.getSelection().removeAllRanges();
          }
        }         
        var data = paCache.getData();
        data.start = Number(obj.start);
        data.end = Number(obj.end);
      });
      this.on('user-selection', function (msg) {
        var data = paCache.getData();
        var word = data.grid[msg.i].resources[msg.j];

        if (word.selected !== undefined) {
          word.selected = undefined;
        } else {
          if (!data.players) {
            data.players = [];
          }

          if (!_.contains(data.players, msg.user)) {
            data.players.push(msg.user);
          }

          var sel = _.indexOf(data.players, msg.user);

          word.selected = sel;
        }
      });
      this.on('binocular', function (e) {
        var relX = e.offsetX - 140;
        var relY = e.offsetY - 80;
        $('mask g').attr('transform', 'translate(' + relX + ',' + relY + ')');
      });
      this.on("img message", function (msg) {
        paCache.setSelectedImage(msg);
      });
      this.on("img2 message", function (obj) {
        var i = obj[0];
        var sel = obj[1];
        paCache.setSelected(i, sel);
      });
      this.on("flip", function (obj) {
        var i = obj[0];
        var sel = obj[1];
        paCache.setSelected(i, sel);
      });
      this.on("book message", function (msg) {
        $('#bb-bookblock').bookblock(msg);
        return false;
      });
      this.on("tab", function (i) {
        paCache.setTab(i);
      });
      this.on("show message", function (obj) {
        var i = obj[0];
        var val = obj[1];
        var data = paCache.getData();
        data.images[i].show = val;
      });
      this.on("hide message", function (obj) {
        var i = obj[0];
        var val = obj[1];
        var data = paCache.getData();
        data.images[i].hide = val;
      });
      this.on("var", function (obj) {
        var data = paCache.getData();
        data[obj["var"]] = obj.val;

        if (obj["var"] == 'enableJcrop' && !obj.val && data.jcrop_api) {
          data.jcrop_api.destroy();
        }
      });
      this.on("json", function(json){
        var data = paCache.getData();
        _.mapObject(json,function(val,key){
          data[key]=val;
        })
      });
      this.on("conf", function (obj) {
        var conf = paCache.getConf();
        _.extend(conf[obj["var"]], obj.val);
      });
      this.on("images", function (images) {
        var data = paCache.getData();
        data.images = images;
      });
      this.on("images2", function (images2) {
        var data = paCache.getData();
        data.images2 = images2;
      });
      this.on("words", function (words) {
        var data = paCache.getData();
        data.words = words;
      });
      this.on("line", function (msg) {
        var data = paCache.getData();
        data.lines[msg.i].words.sort(function(a,b){
          var posA=msg.order.indexOf(a.i);
          var posB=msg.order.indexOf(b.i);
          return (posA>posB)?1:-1;
        })
      });
      this.on("pop message", function (msg) {
        var data = paCache.getData();

        if (data.images.length > 0) {
          data.images.pop();
        }
      });
      this.on("img params", function (obj) {
        var data = paCache.getData();
        var i = obj[0];
        var val = obj[1];
        angular.extend(data.images[i], val);
      });
      this.on("clear", function (b) {
        var data = paCache.getData();

        if (data.jcrop_api) {
          data.jcrop_api.destroy();
        }

        data.selectedImage = -1;
        window.getSelection().removeAllRanges();
        data.start = -1;
        data.end = -1;
      });
      this.on("textsize", function (size) {
        var data = paCache.getData();
        data.textsize = size;
      });
      this.on("ratio", function (ratio) {
        var data = paCache.getData();
        data.ratio = ratio;
      });
      this.on("size", function (size) {
        var data = paCache.getData();
        data.size = size;
      });
      this.on("size2", function (size) {
        var data = paCache.getData();
        data.size2 = size;
      });
      this.on("hide", function (bool) {
        var data = paCache.getData();
        data.hide = bool;
      });
      this.on("feed", function (data) {
        var feed = paCache.getFeed();
        feed.show = true;
        feed.data = data;

        if (data.audio) {
          var sound = ngAudio.load(data.audio);
          if (sound.error){
            throw new Error('error loading audio');
          }
          sound.volume = 0.2;
          sound.play();
        }

        $timeout(function () {
          feed.data = null;
          feed.show = false;
        }, data.timeout || 3000);
      });
      this.on("toggle", function (msg) {
        var feed = paCache.getFeed();
        feed.toggle = !feed.toggle;
        feed.toggleData = msg;
      });
      this.on("replace-text", function (msg) {
        var data = paCache.getData();
        data.temp[msg.i] = msg.val;
      });
      this.on("filterBy", function (msg) {
        var data = paCache.getData();
        data.filterBy = msg;
      });
      this.on("scroll", function (id) {
        var data = paCache.getData();
        data.selectedImage = id;
        var el = angular.element(document.getElementById(id));
        $document.scrollToElementAnimated(el);
      });
      this.on("css", function (msg) {
        var element = angular.element("#" + msg.id);
        element.css(msg.css);
      });
      this.on("list", function (msg) {
        var data = paCache.getData();
        data.list = msg;
      });
      this.on("exec", function (msg) {
        var data = paCache.getData();

        if (msg == 'countdown') {
          var audio = ngAudio.load(config.storageBaseUrl+'/img/controlpanel/Countdown%20(mp3cut.ru).mp3');
          if (audio.error){
            throw new Error('error loading audio');
          }
          data.countdownSel = 5;

          var exec = function exec() {
            if (data.countdownSel > 0) {
              data.countdownSel -= 1;

              $timeout(exec, 1000);
            }
          };

          audio.play(); //data.audio.bip.play();

          $timeout(exec, 1000);
        } else if (msg.method && msg.method == "pickUpNumber") {
          data.pickUpSel = undefined;
          data.dice = msg.arg;
          var i = 0;

          var _next2 = function next() {
            if (i < msg.arg.length) {
              data.pickUpSel = i;
              i += 1;
              $timeout(_next2, 300);
            } else {
              data.running = false;
            }
          };

          data.running = true;
          $timeout(_next2, 300);
        } else if (msg.method && msg.method == "oneOrTwo") {
          data.oneOrTwo = undefined;
          data.oneOrTwoLen = _.range(msg.arg);
          var i = 0;

          var _next2 = function next() {
            if (i < msg.arg) {
              data.oneOrTwo = i;
              i += 1;
              $timeout(_next2, 500);
            } else {
              data.running = false;
            }
          };

          data.running = true;
          $timeout(_next2, 500);
        } else if (msg.method && msg.method == "diceForSentence") {
          data.pickUpSel = undefined;
          data.diceForSentence = msg.arg;
          var i = 0;

          var _next2 = function _next() {
            if (i < msg.arg.length) {
              data.pickUpSel = i;
              i += 1;
              $timeout(_next2, 300);
            } else {
              data.running = false;
            }
          };

          data.running = true;
          $timeout(_next2, 300);
        } else if (msg.method && msg.method == "paperStoneScissors") {
          data.pickUpSel = undefined;
          data.paperStoneScissors = msg.arg;
          var i = 0;

          var _next2 = function _next() {
            if (i < msg.arg.length) {
              data.pickUpSel = i;
              i += 1;
              $timeout(_next2, 300);
            } else {
              data.running = false;
            }
          };

          data.running = true;
          $timeout(_next2, 300);
        } else if (msg == 'distributeFromDeck') {
          var data = paCache.getData();

          for (var i = 0; i < data.mixed.length; i++) {
            var source = $('#s' + i);
            var target = $('#t' + i);
            var left = target.offset().left - source.offset().left;
            var top = target.offset().top - source.offset().top;
            data.mixed2[i].transition = {
              transform: 'translate(' + left + 'px,' + top + 'px)'
            };
          }
        }
      });
      this.on("capture-screen", function (msg) {
        var self = this;

        if ($rootScope.user.student == msg) {
          var options = {
            useCORS: true
          };
          html2canvas(document.body, options).then(function (canvas) {
            self.emit("png", canvas.toDataURL('image/png'));
          });
        }
      });
      this.on("png", function (base64) {
        var data = paCache.getData();
        data.base64 = base64;
      });
      this.on('lessonStarted', function (channel) {
        var conf = paCache.getConf();
        conf.channel = channel;
      });
      this.on('lessonEnded', function (msg) {
        var conf = paCache.getConf();
        conf.channel.open = false;
        var modalInstance = $uibModal.open({
          animation: true,
          templateUrl: '/pa/popup.feedback.html?f2cdd1a489342de8',
          controller: 'paFeedbackCtrl',
          channel: function(){
            return msg;
          }
        });
        modalInstance.result.then(function () {});
      });
      this.on('userParam', function (msg) {
        var conf = paCache.getConf();
        var user = _.find(conf.room.users, function (user) {
          return user.id == msg.user;
        });
        if (user){
          user.params[msg.name] = msg.value;
        }
      });
      this.on("battery", function (msg) {
        var conf = paCache.getConf();

        var user = _.find(conf.room.users, function (user) {
          return user.id == msg.user;
        });

        user.params['battery'] = msg.value;

        if (msg.value == 0) {
          var audio = ngAudio.load(config.storageBaseUrl+'/img/battery/Sound_04675.mp3');
          if (audio.error){
            throw new Error('error loading audio');
          }
          audio.play();
        }
      });
      this.on("users", function (users) {
        paCache.setOnlineUsers(users);
      });
      this.on("toggle message", function (v) {
        var data = paCache.getData();
        data[v] = !data[v];
      });
      this.on('student-id', function (student) {
        if ($rootScope.user.teacher || $rootScope.user.student == student._id) {
          $http.post('/ws/menu/findPages',{type:'S',code:'stickers'}).then(function(resp){
            var page=resp.data[0];
            paCache.setCurrentMode('S');
            paCache.setCurrentFolder(page.folder);
            paCache.setCurrentPage(page);
            $state.go('stickers', {
              student: student,
              content: {
                type: 'P'
              }
            });
          })
        }
      });
      this.on('video', function (msg) {
        var conf = paCache.getConf();
        conf.video = msg;
      });
      this.on('youtube', function (msg) {
        var data = paCache.getData();

        if (msg.play) {
          data.player[msg.videoId].playVideo();
        } else {
          data.player[msg.videoId].pauseVideo();
        }
      });
      this.on('reloadChannel', function(msg){
        // reload channel due to room changed, before or after lesson start
        paChannel.loadRoom();
      });
      this.on("chat.open", function (msg) {
        var conf = paCache.getConf();
        conf.chat.open=msg.value;
      });
      this.on("chat.message", function (msg) {
        var conf = paCache.getConf();
        if (msg.action=='add') {
          conf.chat.messages.push(msg);

        } else if (msg.action=='update') {
          var m = _.find(conf.chat.messages, function(m){
            return msg.id==m.id;
          })
          if (m) {
            m.text=msg.text;
          }

        } else if (msg.action=='remove'){
          var i = _.findIndex(conf.chat.messages, function(m){
            return msg.id==m.id;
          });
          if (i!=-1){
            conf.chat.messages.splice(i,1);
          }
        }
      });

      var sendCoords = function(c){
        var data = paCache.getData();
        socket.emit("coords message", {
          x: c.x / data.imgWidth,
          y: c.y / data.imgHeight,
          x2: c.x2 / data.imgWidth,
          y2: c.y2 / data.imgHeight
        })
      };
  
      var initJcrop = function(i){
        var data = paCache.getData();
        var options = {
          onSelect: sendCoords,
          bgColor: 'lightgrey',
          bgOpacity: parseInt(data.opacity) / 10
        };
        var img = angular.element('#' + i);
        data.imgWidth = img.width();
        data.imgHeight = img.height();
        img.Jcrop(options, function () {
          data.jcrop_api = this;
        });
      };
  
      this.on("jcrop message", function (i) {
        var data = paCache.getData();
        if (data.jcrop_api) {
          data.jcrop_api.destroy();
        }
        data.selectedImage = i;
        if (data.enableJcrop){
          initJcrop(i);
        }
      });
    
      this.on("coords message", function (c) {
        var data = paCache.getData();
        if (data.jcrop_api) {
          data.jcrop_api.setOptions({
            onSelect: null
          });
          data.jcrop_api.setSelect([c.x * data.imgWidth, c.y * data.imgHeight, c.x2 * data.imgWidth, c.y2 * data.imgHeight]);
          data.jcrop_api.setOptions({
            onSelect: sendCoords
          });
        }
      });

      this.on("opacity", function (opacity) {
        var data = paCache.getData();
        if (data.jcrop_api) {
          data.jcrop_api.setOptions({
            bgOpacity: parseInt(opacity) / 10
          });
          var options = data.jcrop_api.getOptions();
          console.log(options);
        }
        data.opacity = opacity;
      });
      
    }

  };
}
"use strict";

paStorage.$inject = ["$q", "$rootScope", "$state", "$http", "paCache", "config"];
angular.module('paApp').factory('paStorage', paStorage);

function paStorage($q, $rootScope, $state, $http, paCache, config) {
    return {
        mapBlob: function (blob, collection) {
          var active = false;
          if (collection && collection.resources){
            active = _.some(collection.resources, function (res) {
              return res.name == blob.Name;
            });
          }
        
            var conf = paCache.getConf();
            return {
              name: blob.Name,
              folder: blob.Name.indexOf('/') != blob.Name.lastIndexOf('/') ? blob.Name.substring(blob.Name.indexOf('/') + 1, blob.Name.lastIndexOf('/')) : '',
              title: blob.Name.substring(blob.Name.lastIndexOf('/') + 1, blob.Name.lastIndexOf('.')),
              src: config.storageBaseUrl+"/" + conf.currentFolder.code + "/" + blob.Name,
              active: active,
              contentType: blob.Properties['Content-Type']
            };
        },
        getLevels: function getLevels(prefix) {
            var levels = [];
        
            if (prefix) {
              var prev = '';
        
              _.each(prefix.split('/'), function (l) {
                if (l) {
                  prev = prev + l + '/';
                  levels.push({
                    name: l,
                    prefix: prev
                  });
                }
              });
            }
        
            return levels;
        },
        loadBlobs: function (prefix, contentType, collection) {
            var conf = paCache.getConf();
            var self = this;
            if (conf.currentFolder.code){
              conf.storage={
                blobs: [],
                directories: [],
                levels: self.getLevels(prefix)
              }
              $http.post(config.apiUrl + '/ws/browse', {
                folder: conf.currentFolder.code,
                prefix: prefix
              }).then(function (resp) {
                if (resp.data.Blob) {
                  var filt = _.filter([].concat(resp.data.Blob), function(blob){
                    return contentType.indexOf(blob.Properties["Content-Type"]) != -1;
                  });
                  conf.storage.blobs = _.map(filt, function(blob){
                    return self.mapBlob(blob, collection);
                  });
                }
          
                if (resp.data.BlobPrefix) {
                  conf.storage.directories = _.map([].concat(resp.data.BlobPrefix), function (d) {
                    return {
                      prefix: d.Name,
                      name: d.Name.substring(prefix ? prefix.length : 0, d.Name.length - 1)
                    };
                  });
                }
              });
            }
        }        
    }   
}
"use strict";

paStudent.$inject = ["$q", "$rootScope", "$state", "$http", "paCache", "config"];
angular.module('paApp').factory('paStudent', paStudent);

function paStudent($q, $rootScope, $state, $http, paCache, config) {
    return {
        getSubscriptions: function() {
            var pageScope=paCache.getPageScope();
            $http.get(config.apiUrl + '/ws/menu/findAllFolders').then(function (resp) {
              var allFolders = _.indexBy(resp.data,'code');
              $http.get(config.apiUrl + '/ws/findSubscriptions/' + $rootScope.user.teacher).then(function (resp) {
                pageScope.subscriptions = resp.data;
                _.each(pageScope.subscriptions, function(subscr){
                  subscr.student.folder = allFolders[subscr.student.course];
                })
              });
              $http.get(config.apiUrl + '/ws/findUserSubscriptions/' + $rootScope.user.teacher).then(function (resp) {
                pageScope.validStudents = _.indexBy(resp.data,'student');
              })
            });
        },
        removeSubscription: function (subscription) {
            var self = this;
            $http.get(config.apiUrl + '/ws/removeSubscription/' + subscription._id).then(function (resp) {
                self.getSubscriptions();
            });
        },        
        getGroups: function(){
            var pageScope=paCache.getPageScope();
            $http.get(config.apiUrl + '/ws/teachers/' + $rootScope.user.teacher + '/groups').then(function (resp) {
                pageScope.groups = resp.data;
            });
        },
        saveGroup : function(group){
            var pageScope=paCache.getPageScope();
            var conf=paCache.getConf();
            var to=(conf.organization)?'org-groups':'students';
            group.subscriptions = _.filter(pageScope.subscriptions, 'active');
            if(group._id){
                $http.put('/ws/groups/'+group._id, group).then(function(resp){
                    $state.go(to);
                })
            }else{
                $http.post('/ws/groups', group).then(function(resp){
                    $state.go(to);
                })
            }
        },
        removeGroup: function(group){
            $http.delete('/ws/groups/'+group._id).then(function(resp){
              var conf=paCache.getConf();
              if(conf.organization){
                $state.go('org-groups');
              } else {
                $state.go('students');
              }
            })
        },
        loadFolders: function loadFolders() {
            var pageScope=paCache.getPageScope();
            $http.get(config.apiUrl + '/ws/menu/findAllFolders').then(function (result) {
              pageScope.allFolders = result.data;
            });
        },
        editStudent: function() {
            var pageScope=paCache.getPageScope();
            $http.get(config.apiUrl + '/ws/findUser/student/' + $state.params.id).then(function (resp) {
              if (resp.data){
                pageScope.user = resp.data;
              } else {
                pageScope.user = {local:{}};
              }
            });
            $http.get(config.apiUrl + '/ws/findStudent/' + $state.params.id).then(function (resp) {
              pageScope.student = resp.data;
            });
            $http.get(config.apiUrl + '/ws/students/'+ $state.params.id + '/groups').then(function(resp){
                var groupIndex = _.indexBy(resp.data, 'group');
                _.each(pageScope.groups, function(group){
                    group.active=_.has(groupIndex, group._id);
                })
            })
        },
        
        addStudent: function() {
            var pageScope=paCache.getPageScope();
            var conf=paCache.getConf();
            pageScope.student = {organization:conf.organization};
            pageScope.user = {};
        },
        
        saveStudent: function() {
            var pageScope=paCache.getPageScope();
            var conf=paCache.getConf();
            if(conf.organization){

              $http.post(config.apiUrl + '/ws/addStudent', pageScope.student).then(function (resp) {
                pageScope.user.role = 'S';
                pageScope.user.student = resp.data._id;
                $http.post(config.apiUrl + '/ws/addUser', pageScope.user).then(function (resp3) {
                  $state.transitionTo('org-students');
                });
              });
  
            } else {

              $http.post(config.apiUrl + '/ws/addStudent', pageScope.student).then(function (resp) {
                $http.post(config.apiUrl + '/ws/addSubscription/' + $rootScope.user.teacher + "/" + resp.data._id).then(function (resp2) {
                  pageScope.user.role = 'S';
                  pageScope.user.student = resp.data._id;
                  $http.post(config.apiUrl + '/ws/addUser', pageScope.user).then(function (resp3) {
                    $state.transitionTo('students');
                  });
                });
              });
  
            }
        },
        
        updateStudent: function() {
            var pageScope=paCache.getPageScope();
            var conf=paCache.getConf();
            var to = (conf.organization)?'org-students':'students';

            $http.post(config.apiUrl + '/ws/saveStudent/' + pageScope.student._id, pageScope.student).then(function (resp) {
              pageScope.user.role = 'S';
              pageScope.user.student = resp.data._id;
              if (pageScope.user._id) {
                $http.post(config.apiUrl + '/ws/saveUser/' + pageScope.user._id, pageScope.user).then(function (resp) {
                  $state.transitionTo(to);
                });
              } else {
                $http.post(config.apiUrl + '/ws/addUser', pageScope.user).then(function (resp3) {
                  $state.transitionTo(to);
                });
              }
            });
        },
        
        saveOrUpdate: function () {
            var self = this;
            var pageScope=paCache.getPageScope();
            pageScope.errors = {};
            pageScope.student.groups = _.filter(pageScope.groups,'active');

            $http.get(config.apiUrl + '/ws/findUser/' + pageScope.user.local.username).then(function (resp) {
              if (!resp.data || resp.data._id == pageScope.user._id) {
                if (pageScope.student._id) {
                    self.updateStudent();
                } else {
                    self.saveStudent();
                }
              } else {
                pageScope.errors.username = pageScope.user.local.username + ' already exists. Please choose a different username.';
              }
            });
        },

        findStudent(id) {
          var deferred = $q.defer();
          $http.get('/ws/findStudent/'+id).then(function(resp){
            return deferred.resolve(resp.data);
          })
          return deferred.promise;
        },

        updateSubscription: function(subscr) {
          var deferred = $q.defer();
          $http.post('/ws/addSubscription/'+subscr.teacher+'/'+subscr.student).then(function(resp){
            return deferred.resolve(resp.data);
          })
          return deferred.promise;
        },

        getOrganizationStudents: function(org){
          $http.get('/ws/organizations/'+org+'/students').then(function(resp){
            var pageScope = paCache.getPageScope();
            pageScope.students = resp.data;
          })
        },

        getOrganizationStudentSubscriptions: function(org){
          $http.get('/ws/organizations/'+org+'/students').then(function(resp){
            var pageScope = paCache.getPageScope();
            pageScope.subscriptions = _.map(resp.data,function(student){
              return {student:student};
            });
          })
        },

        unlinkStudentFromOrganization: function(student) {
          var deferred = $q.defer();
          $http.delete('/ws/students/'+student._id+'/unlink').then(function(resp){
            return deferred.resolve(resp.data);
          })
          return deferred.promise;
        },

        getOrganizationGroups: function(org){
          $http.get('/ws/organizations/'+org+'/groups').then(function(resp){
            var pageScope = paCache.getPageScope();
            pageScope.groups = resp.data;
          })
        },

        subscribeStudent: function(teacher,student){
          var deferred = $q.defer();
          $http.post('/ws/addSubscription/'+teacher+'/'+student).then(function(resp){
            return deferred.resolve(resp.data);
          });
          return deferred.promise;
        },

        subscribeGroup: function(teacher,group){
          var deferred = $q.defer();
          $http.post('/ws/addGroupSubscription/'+teacher+'/'+group).then(function(resp){
            return deferred.resolve(resp.data);
          });
          return deferred.promise;
        }

    }
}

"use strict";

paStyle.$inject = ["$q", "$rootScope", "$state", "$http", "paCache", "config", "toaster"];
angular.module('paApp').factory('paStyle', paStyle);

function paStyle($q, $rootScope, $state, $http, paCache, config, toaster) {
  return {
    loadGlobalStyle: function () {
      var conf = paCache.getConf();
      $http.get(config.apiUrl + '/ws/styles/global/' + $rootScope.user.channel).then(function (resp) {
        if (resp.data){
          conf.css = _.indexBy(resp.data, 'name');
        }
        if (!conf.css.general) {
          conf.css.general = {
            name: 'general',
            global:true,
            teacher: $rootScope.user.channel,
            style: {
              'background': '#fff'
            }
          }
        }
      })
    },
    loadPageStyles: function () {
      var conf = paCache.getConf();
      var data = paCache.getData();
      $http.get(config.apiUrl + '/ws/styles/pages/' + conf.currentPage._id + '/' + $rootScope.user.channel).then(function (resp) {
        if (resp.data) {
          data.css = _.indexBy(resp.data, 'name');
          if (!data.css.card){
            data.css.card = {
              name: 'card',
              global:false,
              teacher: $rootScope.user.channel,
              page: conf.currentPage._id,
              //style: conf.css.card.style
              style: {
                'border-width': '1px',
                'border-color': '#ddd',
                'border-style': 'solid',
                'background-color': '#fff'
              }
            }
          }
        }
      })
    },
    saveStyle: function (style) {
      var self=this;
      if (style._id) {
        $http.put(config.apiUrl + '/ws/styles/' + style._id, style).then(function (resp) {
          if (resp.data.global) {
            self.loadGlobalStyle();
          } else {
            self.loadPageStyles();
          }
          toaster.pop('success', 'Style', 'Style save succesfully');
        })
      } else {
        $http.post(config.apiUrl + '/ws/styles', style).then(function (resp) {
          if (resp.data.global) {
            self.loadGlobalStyle();
          } else {
            self.loadPageStyles();
          }
          toaster.pop('success', 'Style', 'Style save succesfully');
        })
      }
    },
    removeStyle: function(style){
      $http.delete(config.apiUrl + '/ws/styles/' + style._id).then(function (resp) {
        toaster.pop('success', 'Style', 'Style removed succesfully');
      })
    }
  }
}

"use strict";

paSubscription .$inject = ["$q", "$rootScope", "$state", "$http", "paCache", "config"];
angular.module('paApp').factory('paSubscription', paSubscription );

function paSubscription ($q, $rootScope, $state, $http, paCache, config) {
    return {
        getOrganizationSubscriptions: function(org){
            $http.get('/ws/organizations/'+org+'/subscriptions')
                .then(function(resp){
                    var pageScope=paCache.getPageScope();
                    pageScope.subscriptions = resp.data;
                })
        },
        getTeachersForSubscription: function(subscr){
            $http.get('/ws/subscriptions/'+subscr+'/teachers')
                .then(function(resp){
                    var pageScope=paCache.getPageScope();
                    pageScope.teachers = resp.data;
                })
        },
        linkSubscriptionToTeacher: function(subscr, teacher){
            var deferred = $q.defer();
            $http.put('/ws/subscriptions/'+subscr._id+'/teachers/'+teacher._id)
                .then(function(resp){
                    return deferred.resolve();
                })
            return deferred.promise;
        },
        unlinkSubscriptionFromTeacher: function(subscr){
            var deferred = $q.defer();
            $http.delete('/ws/subscriptions/'+subscr._id+'/teachers/'+subscr.teacher._id)
                .then(function(resp){
                    return deferred.resolve();
                })
            return deferred.promise;
        },
        findStudentSubscription: function(){
            var deferred = $q.defer();
            $http.post('/ws/findSubscription',{student:$rootScope.user.student}).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        loadPendingSubscriptions: function(){
            var events = paCache.getEvents();
            $http.get('/ws/findPendingSubscriptions/'+$rootScope.user.teacher).then(function(resp){
                  events.pendingSubscriptions = resp.data.length;
            })
        },
        sendSubscriptionRequest: function(teacher){
            var deferred = $q.defer();
            $http.post('/ws/requestSubscription/'+teacher+'/'+$rootScope.user.student).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        revokeSubscriptionRequest: function(subscr){
            var deferred = $q.defer();
            $http.delete('/ws/requestSubscription/'+subscr._id).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        acceptSubscriptionRequest: function(subscr){
            var deferred = $q.defer();
            $http.put('/ws/requestSubscription/'+subscr._id).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        }

    }
}
"use strict";

paTeacher.$inject = ["$q", "$rootScope", "$state", "$http", "paCache", "config"];
angular.module('paApp').factory('paTeacher', paTeacher);

function paTeacher($q, $rootScope, $state, $http, paCache, config) {
    return {
        getOrganizationTeachers: function(org) {
            var pageScope=paCache.getPageScope();
            $http.post(config.apiUrl + '/ws/findTeachers', {organization: org}).then(function (resp) {
                pageScope.teachers = resp.data;
            });
        },
        getFolderSubscriptions: function(teacher){
          var pageScope=paCache.getPageScope();
          $http.get(config.apiUrl + '/ws/menu/folderSubscriptions/'+teacher._id).then(function(resp){
            pageScope.folderSubscriptions = resp.data;
          })

        },
        linkTeacherToOrganization: function(teacher, organization) {
          var deferred = $q.defer();
          $http.post('/ws/organizations/'+organization+'/teachers/'+teacher)
            .then(function(resp){
              return deferred.resolve();
            })
          return deferred.promise;
        },

        unlinkTeacherFromOrganization: function(teacher, organization) {
          var deferred = $q.defer();
          $http.delete('/ws/organizations/'+organization+'/teachers/'+teacher)
            .then(function(resp){
              return deferred.resolve();
            })
          return deferred.promise;
        },

        getOrganizationTeachersByFolder: function(org, folder){
          var deferred = $q.defer();
          $http.get('/ws/organizations/'+org+'/teachers/folders/'+folder)
            .then(function(resp){
              return deferred.resolve(resp.data);
            })
          return deferred.promise;
        },

        loadCertificates:function(teacher){
          var pageScope = paCache.getPageScope();
          $http.get('/ws/teachers/'+teacher+'/certificates')
            .then(function(resp){
              pageScope.certificates = resp.data;
            })
        },

        getVkProfile:function(id){
          var pageScope = paCache.getPageScope();
          $http.get('/ws/users/'+id+'/vk')
            .then(function(resp){
              pageScope.vk = resp.data;
            })
        },

        getZoomProfile:function(id){
          var pageScope = paCache.getPageScope();
          $http.get('/ws/users/'+id+'/zoom')
            .then(function(resp){
              pageScope.zoom = resp.data;
            })
        },

        getMirgovoritProfile:function(id){
          var pageScope = paCache.getPageScope();
          $http.get('/ws/users/'+id+'/mirgovorit')
            .then(function(resp){
              pageScope.mirgovorit = resp.data;
            })
        },

        getTeacherMirgovoritProfile:function(id){
          var deferred = $q.defer();
          $http.get('/ws/teachers/'+id+'/mirgovorit')
            .then(function(resp){
              return deferred.resolve(resp.data);
            })
            return deferred.promise;
          }

   }
}
/*.factory('timestampMarker', ['$rootScope', '$log', 'LogglyLogger', function($rootScope, $log, LogglyLogger) {  
    var timestampMarker = {
        request: function(config) {
        	if (config.url.indexOf('/ws/') != -1){
		        config.requestTimestamp = new Date().getTime();
        		LogglyLogger.sendMessage({
					username: $rootScope.user.username,
					url: config.url, 
					data: config.data, 
					message: 'start'
				});
            }
            return config;
        },
        response: function(response) {
        	if (response.config.url.indexOf('/ws/') != -1){
	        	var t = new Date().getTime() - response.config.requestTimestamp;
        		LogglyLogger.sendMessage({
					username: $rootScope.user.username,
					url: response.config.url, 
					data: response.data, 
					duration: t, 
					message: 'end'
				});
            }
            return response;
        }
    };
    return timestampMarker;
}])*/
"use strict";

webinarService.$inject = ["$q", "$rootScope", "$state", "$http", "paCache", "config"];
angular.module('paApp').factory('webinarService', webinarService);

function webinarService($q, $rootScope, $state, $http, paCache, config) {
    return {
        loadUpcomingWebinar: function(teacherId){
            var pageScope = paCache.getPageScope();
            $http.get('/ws/teachers/'+teacherId+'/webinarSubscription').then(function(resp){
                var webinarSubscription = (resp.data) ? resp.data : {};
                pageScope.webinarSubscription = webinarSubscription;
                if (!webinarSubscription.webinar || Date.parse(webinarSubscription.webinar.date) > Date.now()){
                    pageScope.upcomingWebinar = true;
                }
            })
        },
        loadWebinars: function(){
            $http.get(config.apiUrl + '/ws/webinars/upcoming').then(function (resp) {
                var webinars = resp.data;
          
                _.each(webinars, function (webinar) {
                  if (!webinar.attendeeNo){
                    webinar.attendeeNo=6;
                  }
                  /*$http.get(config.apiUrl + '/ws/webinars/' + webinar._id + '/subscriptions').then(function (resp) {
                    webinar.subscriptions = resp.data.length;
                  });*/
                });

                var pageScope = paCache.getPageScope();
                pageScope.webinars = webinars;
              });
        },
        updateSubscription: function(subscr){
            var deferred = $q.defer();
            $http.post('/ws/webinars/'+subscr.webinar._id+'/subscriptions/'+$rootScope.user.teacher).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        },
        removeSubscription: function(subscr){
            var deferred = $q.defer();
            $http.delete('/ws/webinarSubscriptions/'+subscr._id).then(function(resp){
                return deferred.resolve(resp.data);
            })
            return deferred.promise;
        }
    }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,