"use strict";

adrag.$inject = ["$document"];
angular.module('paApp').directive('adrag', adrag);

function adrag($document) {
  return {
    link: function link(scope, el, attrs) {
      angular.element(el).attr("draggable", "true");
      el.bind('dragstart', function (e) {
        var oe = e.originalEvent;
        oe.dataTransfer.effectAllowed = 'move';
        var data = {
          id: attrs.adrag,
          offsetX: oe.offsetX,
          offsetY: oe.offsetY
        };
        oe.dataTransfer.setData("text", JSON.stringify(data));
        console.log(e.originalEvent.clientY);
      });
    }
  };
}
"use strict";

adrop.$inject = ["$document"];
angular.module('paApp').directive('adrop', adrop);

function adrop($document) {
  return {
    link: function link(scope, el, attrs) {
      el.on('dragover', function (e) {
        if (e.preventDefault) {
          e.preventDefault();
        }
      });
      el.on('drop', function (e) {
        if (e.preventDefault) {
          e.preventDefault();
        }

        if (e.stopPropogation) {
          e.stopPropogation();
        }

        var text = e.originalEvent.dataTransfer.getData("text");
        var data = JSON.parse(text);
        var rect = document.getElementById(attrs.id).getBoundingClientRect();
        var w = rect.right - rect.left;
        var h = rect.bottom - rect.top; //tX,tY are coords of top/left corner of draggable item, relative to drop area

        var tX = e.originalEvent.clientX - rect.left - data.offsetX;
        var tY = e.originalEvent.clientY - rect.top - data.offsetY;
        var item = scope.collection.resources[data.id];
        item.top = Math.round(tY / parseInt(h) * 100);
        item.left = Math.round(tX / parseInt(w) * 100);
        scope.$apply();
      });
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.alerts', alerts);

function alerts() {
  return {
    restrict: 'E',
    controller: 'alertsCtrl',
    templateUrl: '/directives/pa.alerts.html'
  };
}
"use strict";

append.$inject = ["$document", "$window", "paSocket", "paCache"];
angular.module('paApp').directive('append', append);

function append($document, $window, paSocket, paCache) {
  return {
    link: function link(scope, el, attrs) {
      var oldBorder = el[0].style.border;
      var newBorder = '1px solid green';
      angular.element(el).droppable({
        accept: function accept(draggable) {
          var conf = paCache.getConf();
          var isLocked = conf.user && conf.user.params && conf.user.params.locked=='true';
          return !isLocked && (!attrs.ngAccept || attrs.ngAccept == draggable.attr('id'));
        },
        over: function over(event, ui) {
          el[0].style.border = newBorder;
        },
        out: function out(event, ui) {
          el[0].style.border = oldBorder;
        },
        drop: function drop(event, ui) {
          var msg = {
            source: ui.draggable.attr('id'),
            target: attrs.id,
            position: attrs.appendPosition
          };
          paSocket.emit("append", msg);
          el[0].style.border = oldBorder;
        }
      });
    }
  };
}
"use strict";

angular.module('paApp').directive('awheel', awheel);

function awheel() {
  return {
    link: function link(scope, el, attrs) {
      el.bind('mousewheel', function (e) {
        scope.$apply(function () {
          scope.$eval(attrs.awheel);
        }); // for IE

        event.returnValue = false; // for Chrome and Firefox

        if (event.preventDefault) {
          event.preventDefault();
        }
      });
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.browse', browse);

function browse() {
  return {
    restrict: 'E',
    controller: 'browseController',
    templateUrl: '/pa/pa.browse.html'
  };
}
"use strict";

angular.module('paApp').directive('pa.canvas', canvas);

function canvas() {
  return {
    restrict: 'E',
    controller: 'canvasCtrl',
    templateUrl: '/pa/pa.canvas.html?b44612280c542847',
    scope: {
      resource: '=',
      name: '@'
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.cardResource', cardResource);

function cardResource() {
  return {
    restrict: 'E',
    transclude: true,
    replace: true,
    controller: 'mixedResourceCtrl',
    templateUrl: '/pa/pa.card-resource.html?9564bfbb9d4da448',
    scope: {
      paResource:'='
    }
  };
}
"use strict";

paChannel.$inject = ["paCache"];
angular.module('paApp').directive('paChannel', paChannel);

function paChannel(paCache) {
  return {
    restrict: 'A',
    scope: {
      channel: '='
    },
    link: function link(scope, element, attrs) {
      paCache.setChannel(scope.channel);
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.collection.audio', collectionAudio);

function collectionAudio() {
  return {
    restrict: 'E',
    scope: {
      collection: '=',
      contentType: '@'
    },
    controller: 'collectionEditorController',
    templateUrl: '/pa/pa.collection.audio.html?69e892096559c417'
  };
}
"use strict";

angular.module('paApp').directive('pa.collection.card', collectionCard);

function collectionCard() {
  return {
    restrict: 'E',
    scope: {
      collection: '=',
      contentType: '@'
    },
    controller: 'collectionEditorController',
    templateUrl: '/pa/pa.collection.card.html?cf64a0b722613c16'
  };
}
"use strict";

angular.module('paApp').directive('pa.collection.editor', collectionEditor);

function collectionEditor() {
  return {
    restrict: 'E',
    scope: {
      collection: '=',
      contentType: '@'
    },
    controller: 'collectionEditorController',
    templateUrl: '/pa/pa.collection.editor.html?c20a383b8585c345'
  };
}
"use strict";

angular.module('paApp').directive('contenteditable', contenteditable);

function contenteditable() {
  return {
    require: 'ngModel',
    restrict: 'A',
    link: function link(scope, elm, attr, ngModel) {
      function updateViewValue() {
        var i = parseInt(attr.id);

        if (i > -1) {
          var c = scope.text.chars[i];
          var c1 = {
            val: this.innerText.charAt(0)
          };
          var c2 = {
            val: this.innerText.charAt(1)
          };
          scope.text.chars.splice(i, 1, c1, c2);
        }

        scope.$apply();
      }
      
      elm.on('keyup', updateViewValue);
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.controlPanel', controlPanle);

function controlPanle() {
  return {
    restrict: 'E',
    controller: 'controlPanelCtrl',
    templateUrl: '/pa/pa.controlPanel.html?a470c4fc34d671b3',
    scope: {
      options: '='
    }
  };
}
"use strict";

angular.module('paApp').directive('paDetectSize', paDetectSize);

function paDetectSize() {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      elem.on('load', function (event) {
        scope.paImage.width = this.width;
        scope.paImage.height = this.height;
        scope.paImage.ratio = this.height / this.width;
        scope.$apply();
      });
    },
    scope: {
      paImage: '='
    }
  };
}
"use strict";

drag.$inject = ["$rootScope", "paCache"];
angular.module('paApp').directive('drag', drag);

function drag($rootScope, paCache) {
  return {
    link: function link(scope, el, attrs) {
      angular.element(el).draggable({
        revert: "invalid"
      });
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.draggableResource', draggableResource);

function draggableResource() {
  return {
    restrict: 'E',
    transclude: true,
    replace: true,
    controller: 'mixedResourceCtrl',
    templateUrl: '/pa/pa.draggable-resource.html?4f9296a41fba2da5',
    scope: {
      paResource:'=',
      paIndex:'@',
      paStyle:'='
    }
  };
}
"use strict";

drop.$inject = ["$document", "$window", "paSocket", "paCache"];
angular.module('paApp').directive('drop', drop);

function drop($document, $window, paSocket, paCache) {
  return {
    link: function link(scope, el, attrs) {
      angular.element(el).droppable({
        tolerance: 'pointer',
        accept: function accept(draggable) {
          var conf = paCache.getConf();
          var isLocked = conf.user && conf.user.params && conf.user.params.locked=='true';
          return !isLocked && (!attrs.ngAccept || attrs.ngAccept == draggable.attr('id'));
        },
        drop: function drop(event, ui) {
          var rect = document.getElementById(attrs.id).getBoundingClientRect();
          var scrollLeft = $window.scrollX;
          var scrollTop = $window.scrollY;
          var x0 = attrs.left ? attrs.left : ui.offset.left - rect.left - scrollLeft;
          var y0 = attrs.top ? attrs.top : ui.offset.top - rect.top - scrollTop;
          var msg = {
            source: ui.draggable.attr('id'),
            target: attrs.id,
            x: x0 / (rect.right - rect.left) * 100,
            y: y0 / (rect.bottom - rect.top) * 100,
            _id: ui.draggable.attr('id')
          };
          paSocket.emit("drag", msg);
        }
      });
    }
  };
}
"use strict";

paEmit.$inject = ["paSocket"];
angular.module('paApp').directive('paEmit', paEmit);

function paEmit(paSocket) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      elem.on('click', function (event) {
        var v = attrs.paEmit.split("=");
        paSocket.emit('var', {
          "var": v[0],
          val: v[1]
        });
      });
    }
  };
}
"use strict";

paEmitBool.$inject = ["paSocket","paCache"];
angular.module('paApp').directive('paEmitBool', paEmitBool);

function paEmitBool(paSocket,paCache) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      elem.on('change', function (event) {
        var data=paCache.getData();
        paSocket.emit('var', {
          "var": attrs.paEmitBool,
          val: data[attrs.paEmitBool]
        });
      });
    }
  };
}
"use strict";

paEmitNum.$inject = ["paSocket"];
angular.module('paApp').directive('paEmitNum', paEmitNum);

function paEmitNum(paSocket) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      elem.on('click', function (event) {
        var v = attrs.paEmitNum.split("=");
        paSocket.emit('var', {
          "var": v[0],
          val: Number(v[1])
        });
      });
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.feed', feed);

function feed() {
  return {
    restrict: 'E',
    controller: 'feedCtrl',
    templateUrl: '/directives/pa.feed.html'
  };
}
"use strict";

fit.$inject = ["$document", "$window", "paSocket", "paCache"];
angular.module('paApp').directive('fit', fit);

function fit($document, $window, paSocket, paCache) {
  return {
    link: function link(scope, el, attrs) {
      var oldBorder = el[0].style.border;
      var newBorder = '1px solid green';
      angular.element(el).droppable({
        accept: function accept(draggable) {
          var conf = paCache.getConf();
          var isLocked = conf.user && conf.user.params && conf.user.params.locked=='true';
          return !isLocked && (!attrs.ngAccept || attrs.ngAccept == draggable.attr('id'));
        },
        over: function over(event, ui) {
          el[0].style.border = newBorder;
        },
        out: function out(event, ui) {
          el[0].style.border = oldBorder;
        },
        drop: function drop(event, ui) {
          var msg = {
            source: ui.draggable.attr('id'),
            target: attrs.id,
            position: attrs.fitPosition
          };
          paSocket.emit("fit", msg);
          el[0].style.border = oldBorder;
        }
      });
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.flipCard', flipImg);

function flipImg() {
  return {
    restrict: 'E',
    templateUrl: '/pa/pa.flipCard.html?e7c5e12428781097'
  };
}
"use strict";

angular.module('paApp').directive('pa.flipCard.card', flipCard);

function flipCard() {
  return {
    restrict: 'E',
    templateUrl: '/pa/pa.flipCard.card.html?44d9631b0d863cc6'
  };
}
"use strict";

angular.module('paApp').directive('pa.flipCardSquare', flipImgSquare);

function flipImgSquare() {
  return {
    restrict: 'E',
    templateUrl: '/pa/pa.flipCardSquare.html?b49683822313cdef'
  };
}
"use strict";

angular.module('paApp').directive('pa.footer', footer);

function footer() {
  return {
    restrict: 'E',
    templateUrl: '/pa/pa.footer.html?aadee5a2a6052da0',
    controller: 'navCtrl'
  };
}
"use strict";

angular.module('paApp').directive('pa.homeworkComments', homeworkComments);

function homeworkComments() {
  return {
    restrict: 'E',
    controller: 'paHomeworkCommentsCtrl',
    templateUrl: '/pa/pa.homework.comments.html?29c3e4bd1ff2a2d9'
  };
}
"use strict";

angular.module('paApp').directive('pa.homeworks', homeworks);

function homeworks() {
  return {
    restrict: 'E',
    controller: 'paHomeworkCtrl',
    templateUrl: '/pa/pa.homeworks.html?1e9a4050a535e942'
  };
}
"use strict";

angular.module('paApp').directive('pa.homeworks.toolbar', homeworksToolbar);

function homeworksToolbar() {
  return {
    restrict: 'E',
    controller: 'paHomeworkCtrl',
    templateUrl: '/pa/pa.homeworks.toolbar.html?3ee5c4bf11c9130d'
  };
}
"use strict";

angular.module('paApp').directive('pa.inlineResource', inlineResource);

function inlineResource() {
  return {
    restrict: 'E',
    controller: 'mixedResourceCtrl',
    templateUrl: '/pa/pa.inline-resource.html?8b0c2937aa82a7bd',
    scope: {
      paResource:'=',
      paSize:'='
    }
  };
}
"use strict";

angular.module('paApp').directive('jsonText', jsonText);

function jsonText() {
    return {
        restrict: 'A',
        require: 'ngModel',
        link: function(scope, element, attr, ngModel) {            
          function into(input) {
            return JSON.parse(input);
          }
          function out(data) {
            return JSON.stringify(data, undefined, 2);
          }
          ngModel.$parsers.push(into);
          ngModel.$formatters.push(out);
        }
    };
}
"use strict";

angular.module('paApp').directive('pa.label', label);

function label() {
  return {
    restrict: 'E',
    scope: {
        key: '@',
        default: '@',
        locale: '@'
    },
    template: '{{::label}}',
    controller: 'labelCtrl'
  };
}
"use strict";

angular.module('paApp').directive('pa.likes', likes);

function likes() {
  return {
    restrict: 'E',
    controller: 'likesController',
    templateUrl: '/pa/pa.likes.html?7d1629d1e330ae99'
  };
}
"use strict";

angular.module('paApp').directive('paLoad', paLoad);

function paLoad() {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      element.bind('load', function () {
        var img = angular.element(this);
        var rate = img.width() / img.height();

        if (rate > scope.w / 2 * scope.h) {
          img.width(scope.w / 2);
          img.height('auto');
        } else {
          img.width('auto');
          img.height(scope.h);
        }
      });
    }
  };
}
"use strict";

angular.module('paApp').directive('ngLoadImg', ngLoadImg);

function ngLoadImg() {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      var img = new Image();

      img.onload = function (event) {
        elem.css('width', this.width + 'px');
        elem.css('height', this.height + 'px');
        elem.css("background", "url(" + img.src + ") no-repeat");
        scope.image.width = this.width;
        scope.image.height = this.height;
        scope.image.loaded = true;
        scope.$apply();
      };

      img.src = attrs.ngLoadImg;
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.logo', logo);

function logo() {
  return {
    restrict: 'E',
    templateUrl: '/pa/pa.logo.html?d8754f2defb5c552'
  };
}
"use strict";

angular.module('paApp').directive('pa.markers', markers);

function markers() {
  return {
    restrict: 'E',
    controller: 'controlPanelCtrl',
    templateUrl: '/directives/pa.markers.html'
  };
}
"use strict";

angular.module('paApp').directive('pa.nav', nav);

function nav() {
  return {
    restrict: 'E',
    controller: 'navCtrl',
    templateUrl: '/pa/pa.nav.html?6f7e724889808317'
  };
}
"use strict";

ngHeight.$inject = ["$timeout"];
angular.module('paApp').directive('ngHeight', ngHeight);

function ngHeight($timeout) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      attrs.$observe('ngHeight', function (newValue, oldValue) {
        if (newValue != oldValue) {
          elem.css('height', newValue + 'vh');
        }
      });
      $timeout(function () {
        elem.css('height', attrs.ngHeight + 'vh');
      });
    }
  };
}
"use strict";

ngHeightRatio.$inject = ["$timeout"];
angular.module('paApp').directive('ngHeightRatio', ngHeightRatio);

function ngHeightRatio($timeout) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      if (attrs.ngHeightRatio){
        attrs.$observe('ngWidth', function (newValue, oldValue) {
          if (newValue != oldValue) {
            elem.css('height', attrs.ngWidth * attrs.ngHeightRatio + 'vw');
          }
        });
        attrs.$observe('ngHeightRatio', function (newValue, oldValue) {
          if (newValue != oldValue) {
            elem.css('height', attrs.ngWidth * attrs.ngHeightRatio + 'vw');
          }
        });
        $timeout(function () {
          elem.css('height', attrs.ngWidth * attrs.ngHeightRatio + 'vw');
        });
      }
    }
  };
}
"use strict";

ngSquare.$inject = ["$timeout"];
angular.module('paApp').directive('ngSquare', ngSquare);

function ngSquare($timeout) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      attrs.$observe('ngSquare', function (newValue, oldValue) {
        if (newValue != oldValue) {
          elem.css('width', newValue + 'vw');
          elem.css('height', newValue + 'vw');
        }
      });
      $timeout(function () {
        elem.css('width', attrs.ngSquare + 'vw');
        elem.css('height', attrs.ngSquare + 'vw');
      });
    }
  };
}
"use strict";

ngWidth.$inject = ["$timeout"];
angular.module('paApp').directive('ngWidth', ngWidth);

function ngWidth($timeout) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      attrs.$observe('ngWidth', function (newValue, oldValue) {
        if (newValue != oldValue) {
          elem.css('width', newValue + 'vw');
        }
      });
      $timeout(function () {
        elem.css('width', attrs.ngWidth + 'vw');
      });
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.onlineUsers', onlineUsers);

function onlineUsers() {
  return {
    restrict: 'E',
    controller: 'navCtrl',
    templateUrl: '/pa/pa.onlineUsers.html?0167cf2a6da9a85d'
  };
}
"use strict";

angular.module('paApp').directive('pa.chat', paChat);

function paChat() {
  return {
    restrict: 'E',
    controller: 'chatController',
    templateUrl: '/pa/pa.chat.html?13266abc2f31845e'
  };
}
"use strict";

angular.module('paApp').directive('pa.content', paContent);

function paContent() {
  return {
    restrict: 'E',
    controller: 'mdCtrl',
    template: '<div markdown-it="md"></div>',
    scope: {
      page:'@'
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.pageFooter', pageFooter);

function pageFooter() {
  return {
    restrict: 'E',
    templateUrl: '/pa/pa.pageFooter.html?0f56063793e20d31'
  };
}
"use strict";

angular.module('paApp').directive('pa.img', img);

function img() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: '/pa/pa.img.html?146e0a806ad3e3d8',
    scope: {
      paResource:'=',
      paSize:'=',
      paStyle:'='
    }
  };
}
"use strict";

panel.$inject = ["$document", "paSocket"];
angular.module('paApp').directive('panel', panel);

function panel($document, paSocket) {
  return {
    restrict: 'A',
    link: function link(scope, element) {
      var panel = angular.element(element);
      paSocket.emit("size message", [panel.width(), panel.height()]);
    }
  };
}
"use strict";

paRand.$inject = ["paSocket", "paCache"];
angular.module('paApp').directive('paRand', paRand);

function paRand(paSocket, paCache) {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      if (scope.admin) {
        var x = Math.random()*100;
        var y = Math.random()*100;
        var css={
          position:'absolute'
        };
  
        if (x>50){
          css['right']=(100-x)+'%';
        } else {
          css['left']=x+'%';
        }
        if (y>50){
          css['bottom']=(100-y)+'%';
        } else {
          css['top']=y+'%';
        }
        paSocket.emit('css', {
          id: attrs.id,
          css: css
        });
      }
    }
  };
}
"use strict";

paParseText.$inject = ["paService"];
angular.module('paApp').directive('paParseText', paParseText);

function paParseText(paService) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      scope.$watch(attrs.paParseText, function (newValue, oldValue) {
        if (!scope.data['chunks'] || newValue != oldValue) {
          var chunks = paService.split(newValue, '#');
          _.each(chunks, function(chunk){
            var words = paService.split(chunk.chars, ' ');
            chunk.words = words;
          })
          scope.data['chunks'] = chunks;
        }
      });
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.text', text);

function text() {
  return {
    restrict: 'E',
    replace: true,
    templateUrl: '/pa/pa.text.html?2d204a62bd2173c5',
    scope: {
      paResource:'=',
      paSize:'=',
      paClass:'@',
      paStyle:'='
    }
  };
}
"use strict";

angular.module('paApp').directive('paTextWidth', paTextWidth);

function paTextWidth() {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      scope.$watch(attrs.ngModel, function (newValue, oldValue) {
        if (oldValue != newValue) {
          var input = angular.element(element);
          var canvas = document.createElement("canvas");
          var context = canvas.getContext("2d");
          context.font = "normal " + scope.data.textsize + "vw arial";
          var metrics = context.measureText(input.val());
          input.width(metrics.width+4); // add padding and border
        }
      });
    }
  };
}
"use strict";

pop.$inject = ["$document", "paSocket"];
angular.module('paApp').directive('pop', pop);

function pop($document, paSocket) {
  return {
    link: function link(scope, el, attrs) {
      angular.element(el).droppable({
        activate: function activate(event, ui) {
          el[0].style.borderColor = 'green';
        },
        deactivate: function deactivate(event, ui) {
          el[0].style.borderColor = '#ddd';
        },
        drop: function drop(event, ui) {
          var card = _.find(scope.myCards, function (image) {
            return image.id == ui.draggable.attr('id');
          });

          card.push = false;
          scope.playCard(card);
        }
      });
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.post', post);

function post() {
  return {
    restrict: 'E',
    templateUrl: '/pa/pa.post.html?64dbf9c1a3d1a9bd',
    scope: {
      post: '='
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.posts', posts);

function posts() {
  return {
    restrict: 'E',
    controller: 'postsController',
    templateUrl: '/pa/pa.posts.html?e2a2b2ae5e9f42ff',
    scope: {
      post: '='
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.previewResource', previewResource);

function previewResource() {
  return {
    restrict: 'E',
    //controller: 'previewResourceCtrl',
    templateUrl: '/pa/pa.previewResource.html?1932698bf36289e7',
    scope: {
      'resource':'='
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.publish', publish);

function publish() {
  return {
    restrict: 'E',
    controller: 'popupCtrl',
    template: '<i class="fa fa-share-alt" ng-click="popup()"></i>',
    scope: {
      paText: '=',
      paDiv: '@',
      paTime: '@'
    }
  };
}
"use strict";

push.$inject = ["$document", "paSocket"];
angular.module('paApp').directive('push', push);

function push($document, paSocket) {
  return {
    link: function link(scope, el, attrs) {
      angular.element(el).droppable({
        activate: function activate(event, ui) {
          el[0].style.borderColor = 'green';
        },
        deactivate: function deactivate(event, ui) {
          el[0].style.borderColor = '#ddd';
        },
        drop: function drop(event, ui) {
          var card = _.find(scope.myCards, function (image) {
            return image.id == ui.draggable.attr('id');
          });

          card.push = true;
          scope.playCard(card);
        }
      });
    }
  };
}
"use strict";

resizable.$inject = ["$document", "paSocket"];
angular.module('paApp').directive('resizable', resizable);

function resizable($document, paSocket) {
  return {
    link: function link(scope, el, attrs) {
      angular.element(el).resizable({
        stop: function stop(event, ui) {
          scope.resource.sizeFactor = ui.size.width / ui.originalSize.width;
        }
      });
    }
  };
}
"use strict";

resize.$inject = ["$window"];
angular.module('paApp').directive('resize', resize);

function resize($window) {
  return function (scope, element) {
    var w = angular.element($window);

    scope.getWindowDimensions = function () {
      return {
        'h': w.height(),
        'w': w.width()
      };
    };

    scope.$watch(scope.getWindowDimensions, function (newValue, oldValue) {
      scope.windowHeight = newValue.h;
      scope.windowWidth = newValue.w;

      scope.style = function () {
        return {
          'height': newValue.h - 100 + 'px',
          'width': newValue.w - 100 + 'px'
        };
      };
    }, true);
    w.bind('resize', function () {
      scope.$apply();
    });
  };
}
"use strict";

angular.module('paApp').directive('pa.resource', resource);

function resource() {
  return {
    restrict: 'E',
    replace:true,
    controller: 'mixedResourceCtrl',
    templateUrl: '/pa/pa.resource.html?4fad13590c7b2224',
    scope: {
      paResource:'='
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.resourceSize', resourceSize);

function resourceSize() {
  return {
    restrict: 'E',
    replace:true,
    controller: 'mixedResourceCtrl',
    templateUrl: '/pa/pa.resource-size.html?61ce8801bfb98a34',
    scope: {
      paResource:'=',
      paSize:'='
    }
  };
}
"use strict";

paSelect.$inject = ["paSocket", "paCache"];
angular.module('paApp').directive('paSelect', paSelect);

function paSelect(paSocket, paCache) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      elem.on('click', function (event) {
        var i = attrs.paSelect;
        var val = !paCache.getSelected(i);
        paSocket.emit('img2 message', [i, val]);
      });
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.selectableResource', selectableResource);

function selectableResource() {
  return {
    restrict: 'E',
    transclude: true,
    replace: true,
    controller: 'mixedResourceCtrl',
    templateUrl: '/pa/pa.selectable-resource.html?c71c60cd02bb6548',
    scope: {
      paResource:'='
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.selectableWords', selectableWords);

function selectableWords() {
  return {
    restrict: 'E',
    controller: 'mixedResourceCtrl',
    templateUrl: '/pa/pa.selectable-words.html?3f1ad1ceb0f5f923',
    scope: {
      paResource:'=',
      paSize:'='
    }
  };
}
"use strict";

paSelectOne.$inject = ["paSocket"];
angular.module('paApp').directive('paSelectOne', paSelectOne);

function paSelectOne(paSocket) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      elem.on('click', function (event) {
        paSocket.emit('img message', {_id: attrs.paSelectOne});
      });
    }
  };
}
"use strict";

paSplitLines.$inject = ["paService"];
angular.module('paApp').directive('paSplitLines', paSplitLines);

function paSplitLines(paService) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      scope.$watch(attrs.paSplitLines, function (newValue, oldValue) {
        if (!scope.data.lines || newValue != oldValue) {
          scope.data.lines = paService.split(newValue, '\n');
        }
      });
    }
  };
}
"use strict";

paSplitLineWords.$inject = ["paService"];
angular.module('paApp').directive('paSplitLineWords', paSplitLineWords);

function paSplitLineWords(paService) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      scope.$watch(attrs.paSplitLineWords, function (newValue, oldValue) {
        if (!scope.line.words || newValue != oldValue) {
          var splitBy = _.isUndefined(attrs.paSplitBySpace) ? ',' : ' ';
          scope.line.words = paService.split(newValue.chars, splitBy);
        }
      });
    }
  };
}
"use strict";

paSplitUserText.$inject = ["paService"];
angular.module('paApp').directive('paSplitUserText', paSplitUserText);

function paSplitUserText(paService) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      scope.$watch("user.params.text", function (newValue, oldValue) {
        if (newValue != oldValue) {
          scope.user.params.chars = _.map(newValue.split(''), function(c){
            return {val:c};
          });
        }
      });
    }
  };
}
"use strict";

paSplitWordChunks.$inject = ["paService"];
angular.module('paApp').directive('paSplitWordChunks', paSplitWordChunks);

function paSplitWordChunks(paService) {
  var parse = function parse(word) {
    var chunks = [];
    var chunk, currentType;

    _.each(word.chars, function (c) {
      var type;

      if (c.val == '*') {
        type = 'input';
      } else {
        type = 'text';
      }

      if (type == currentType) {
        chunk.text += c.val;
        chunk.chars.push(c);
      } else {
        currentType = type;
        chunk = {
          type: currentType,
          text: c.val,
          chars: [c]
        };
        chunks.push(chunk);
      }
    });

    return chunks;
  };

  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      scope.$watch(attrs.paSplitWordChunks, function (newValue, oldValue) {
        if (!scope.word.chunks || newValue != oldValue) {
          scope.word.chunks = parse(newValue);
        }
      });
    }
  };
}
"use strict";

paSplitWords.$inject = ["paService"];
angular.module('paApp').directive('paSplitWords', paSplitWords);

function paSplitWords(paService) {
  return {
    restrict: 'A',
    link: function link(scope, elem, attrs) {
      scope.$watch(attrs.paSplitWords, function (newValue, oldValue) {
        var attr = attrs.paWordsAttr || 'words';
        if (!scope.data[attr] || newValue != oldValue) {
          var splitBy = _.isUndefined(attrs.paSplitBySpace) ? '#' : ' ';
          scope.data[attr] = paService.split(newValue, splitBy);
        }
      });
    }
  };
}
"use strict";

square.$inject = ["$timeout"];
angular.module('paApp').directive('square', square);

function square($timeout) {
  return {
    restrict: 'A',
    link: function link(scope, element, attrs) {
      $timeout(function () {
        var e = angular.element(element);
        e.height(e.width());
      });
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.storage.browser', storageBrowser);

function storageBrowser() {
  return {
    restrict: 'E',
    scope: {
      resource: '=',
      contentType: '@',
    },
    controller: 'collectionEditorController',
    templateUrl: '/pa/pa.storage-browser.html?65bb2d29b492e15a'
  };
}
"use strict";

angular.module('paApp').directive('pa.style', paStyle);

function paStyle() {
  return {
    restrict: 'E',
    controller: 'paStyleController',
    templateUrl: '/pa/pa.pageStyle.html?0b78ec9795bafb91'
  };
}
"use strict";

angular.module('paApp').directive('pa.text.editor', textEditor);

function textEditor() {
  return {
    restrict: 'E',
    scope: {
      paText: '='
    },
    controller: 'textEditorController',
    templateUrl: '/pa/pa.text.editor.html?32302c525a9ecc8a'
  };
}
"use strict";

angular.module('paApp').directive('pa.userProfile', userProfile);

function userProfile() {
  return {
    restrict: 'E',
    controller: 'navCtrl',
    templateUrl: '/pa/pa.userProfile.html?2f61588933454bcd'
  };
}
"use strict";

youtube.$inject = ["$timeout","paCache"];
angular.module('paApp').directive('pa.youtube', youtube);

function youtube($timeout, paCache) {
  return {
    restrict: 'E',
    template: '<div id="{{videoId}}"></div>',
    scope: {
      videoId: '@'
    },
    link: function link(scope, element, attrs) {
      $timeout(function () {
        // 3. This function creates an <iframe> (and YouTube player)
        //    after the API code downloads.
        var player;
        player = new YT.Player(attrs.videoId, {
          height: '100%',
          width: '100%',
          videoId: attrs.videoId,
          playerVars: {
            'controls':0,
            'autoplay':0,
            'disablekb':1,
            'showinfo':0,
            'autohide':1
          },
          events: {
            'onReady': onPlayerReady,
            'onStateChange': onPlayerStateChange
          }
        });
        var data = paCache.getData();
        data.player[attrs.videoId] = player; // 4. The API will call this function when the video player is ready.

        function onPlayerReady(event) {
          //event.target.playVideo();
          data.playerReady = true;
        } // 5. The API calls this function when the player's state changes.
        //    The function indicates that when playing a video (state=1),
        //    the player should play for six seconds and then stop.


        var done = false;

        function onPlayerStateChange(event) {
          /*if (event.data == YT.PlayerState.PLAYING && !done) {
            setTimeout(stopVideo, 6000);
            done = true;
          }*/
        }

        function stopVideo() {
          player.stopVideo();
        }
      })
    }
  };
}
"use strict";

angular.module('paApp').directive('pa.zoom', zoom);

function zoom() {
  return {
    restrict: 'E',
    controller: 'navCtrl',
    templateUrl: '/pa/pa.zoom.html?bc6f32c6df17158d'
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,