"use strict";

adminController.$inject = ["$scope", "$http", "$state", "$stateParams", "$uibModal", "$rootScope", "paCache", "paAcl", "config"];
angular.module('paApp').controller('adminController', adminController);

function adminController($scope, $http, $state, $stateParams, $uibModal, $rootScope, paCache, paAcl, config) {
  var conf = paCache.getConf();
  $scope.init = function () {
    $scope.tab = 1;
    $scope.loadResources();
    $scope.conf = paCache.getConf();
    $scope.options = _.extend($stateParams.options,$scope.conf.currentPage.collections);
    $scope.data = paCache.getData();
    $scope.isFolderAdmin = ($rootScope.user.role=='E' && conf.currentFolder.isAdmin);
  };

  $scope.loadResources = function () {
    $scope.page = {
      collections: [],
      texts: []
    };

    var sortFunct = function sortFunct(a, b) {
      var r = 0;
      var aa = a.name.split(/[ -.]/);
      var bb = b.name.split(/[ -.]/);

      if (aa.length > 0 && bb.length > 0) {
        var l = aa.length > bb.length ? bb.length : aa.length;
        var i = 0;

        while (i < l && r == 0) {
          var aaa = aa[i];
          var bbb = bb[i];

          if (aaa == bbb) {
            i = i + 1;
          } else if (parseInt(aaa) && parseInt(bbb)) {
            return parseInt(aaa) > parseInt(bbb) ? 1 : -1;
          } else {
            return aaa > bbb ? 1 : -1;
          }
        }
      }

      return r;
    };

    $http.get(config.apiUrl + '/ws/findCollections/' + conf.currentPage._id + '/' + $rootScope.user.channel).then(function (resp) {
      resp.data.sort(sortFunct);
      var data = paCache.getData();

      _.each(resp.data, function (coll) {
        if (data.selCollections){
          var s = data.selCollections[coll.type];
          if (s) {
            coll.selected = s == coll._id || s == coll.parent;
          }
        }

        coll.isPrivate = coll.teacher && !coll.parent;
      });

      $scope.page.collections = resp.data;
    });
  };

  $scope.copyCollection = function (coll) {
    var c = {
      name: coll.name+' - Copy',
      page: coll.page,
      folder: coll.folder,
      type: coll.type,
      teacher: $rootScope.user.channel
    };
    if (coll.type=='mixed'||coll.type=='mixed2'){
      $state.transitionTo('copy-collection-mixed', {
        collection: c,
        copyFrom: coll._id,
        options: $scope.options
      });
    } else if (coll.type=='grid'){
      $state.transitionTo('copy-collection-grid', {
        collection: c,
        copyFrom: coll._id,
        options: $scope.options
      });
    } else {
      $state.transitionTo('copy-collection', {
        collection: c,
        copyFrom: coll._id,
        options: $scope.options
      });
    }
  };

  $scope.editCollection = function (coll) {
    $http.get(config.apiUrl + '/ws/collections/' + coll._id).then(function(res){

      $state.transitionTo('edit-collection', {
        collection: res.data,
        options: $scope.options,
        tab: 2
      });

    })
  };

  $scope.editCollectionNew = function (coll) {
    $http.get(config.apiUrl + '/ws/collections/' + coll._id).then(function(res){

      $state.transitionTo('collection-'+coll.type, {
        collection: res.data,
        options: $scope.options,
        tab: 2
      });

    })
  };

  $scope.renameCollection = function (coll) {
    $http.get(config.apiUrl + '/ws/collections/' + coll._id).then(function(res){

      $state.transitionTo('edit-collection', {
        collection: res.data,
        options: $scope.options,
        tab: 0
      });

    })
  };

  $scope.labelPanel = function (coll) {
    $http.get(config.apiUrl + '/ws/collections/' + coll._id).then(function(res){

      $state.transitionTo('edit-collection', {
        collection: res.data,
        options: $scope.options,
        tab: 3
      });

    })
  };

  $scope.sizeFactorPanel = function (coll) {
    $http.get(config.apiUrl + '/ws/collections/' + coll._id).then(function(res){

      $state.transitionTo('edit-collection', {
        collection: res.data,
        options: $scope.options,
        tab: 4
      });

    })
  };

  $scope.addCollection = function (type) {
    var conf = paCache.getConf();
    var c = {
      page: conf.currentPage._id,
      folder: conf.currentFolder._id,
      type: type,
      teacher: $rootScope.user.channel
    };
    $state.transitionTo('add-collection', {
      collection: c,
      options: $scope.options
    });
  };

  $scope.addCollectionNew = function (type) {
    var conf = paCache.getConf();
    var c = {
      page: conf.currentPage._id,
      folder: conf.currentFolder._id,
      type: type,
      teacher: $rootScope.channel,
      resources: []
    };
    $state.transitionTo('collection-'+type, {
      collection: c,
      options: $scope.options
    });
  };

  $scope.remove = function (collection) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.removeCollection.html?6d6ae7f2834c9218',
      controller: 'collectionRemoveCtrl',
      size: 'lg',
      resolve: {
        collection: function(){
          return collection
        }
      }

    });
    modalInstance.result.then(function () {
      $http.get(config.apiUrl + '/ws/removeCollection/' + collection._id).then(function (resp) {
        $scope.loadResources();
      });
    });
  };

  $scope.toPictogramEditor = function (res, type) {
    $state.transitionTo('edit-pictogram', {
      collection: res,
      type: type
    });
  };

  $scope.toSizeFactor = function (res) {
    $state.transitionTo('size-factor', {
      collection: res
    });
  };

  $scope.setActive = function (coll) {
    var v = {
      teacher: $rootScope.user.channel,
      page: coll.page,
      type: coll.type,
      coll: coll.selected ? coll._id : null
    };
    $http.post(config.apiUrl + '/ws/pageConf', v).then(function (resp) {
      $scope.data.selCollections = resp.data;
      $scope.loadResources();
    });
  };

  $scope.keys = function(coll) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.keys.html?ce66fbc6f1e6bcad',
      controller: 'paKeyCtrl',
      size: 'lg',
      resolve: {
        collection: function(){
          return coll
        }
      }
    });
  }
  
  $scope.init();
}
"use strict";

alertsCtrl.$inject = ["$scope", "paCache", "paService"];
angular.module('paApp').controller('alertsCtrl', alertsCtrl);

function alertsCtrl($scope, paCache, paService) {
    $scope.conf = paCache.getConf();
    paService.loadAlerts();
}
"use strict";

authCtrl.$inject = ["$window", "$state", "$stateParams"];
angular.module('paApp').controller('authCtrl', authCtrl);

function authCtrl($window, $state, $stateParams) {
    $window.localStorage.setItem('pa.token', $stateParams.token);
    $state.go('pa',{to:'dashboard'});
}
"use strict";

axerveCtrl.$inject = ["$scope", "$state", "$stateParams", "$http", "$window", "$location", "authService", "config"];
angular.module('paApp').controller('axerveCtrl', axerveCtrl);

function axerveCtrl($scope, $state, $stateParams, $http, $window, $location, authService, config){	
    
    $scope.init = function(){
        var params = $location.search();
        $http.get(config.apiUrl + '/ws/axerve/status', {params: params}).then(function (resp) {
            $scope.payment=resp.data;
        })
    }

    $scope.init();
}

"use strict";

paBookCtrl.$inject = ["$scope", "$uibModalInstance", "$http", "paCache", "config"];
angular.module('paApp').controller('paBookCtrl', paBookCtrl);

function paBookCtrl($scope, $uibModalInstance, $http, paCache, config) {
  $scope.data = paCache.getData();
  $scope.conf = paCache.getConf();

  $scope.bookmark = function () {
    var data = paCache.getData();
    var conf = paCache.getConf();
    var content = {
      img: data.selCollections.img,
      img2: data.selCollections.img2,
      audio: data.selCollections.audio,
      text: data.selCollections.text,
      text2: data.selCollections.text2,
      card: data.selCollections.card,
      mixed: data.selCollections.mixed,
      mixed2: data.selCollections.mixed2,
      grid: data.selCollections.grid,
      type: 'C',
      page: conf.currentPage,
      name: $scope.name,
      lesson: $scope.lesson
    };
    $http.post(config.apiUrl + '/ws/addContent', content).then(function (resp) {
      $uibModalInstance.close();
    });
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
}
"use strict";

paBookmarkCtrl.$inject = ["$scope", "$uibModalInstance", "$http", "paCache", "name", "config"];
angular.module('paApp').controller('paBookmarkCtrl', paBookmarkCtrl);

function paBookmarkCtrl($scope, $uibModalInstance, $http, paCache, name, config) {
  $scope.data = paCache.getData();
  $scope.conf = paCache.getConf();
  $scope.name = name;

  $scope.bookmark = function () {
    var data = paCache.getData();
    var conf = paCache.getConf();
    var content = {
      workplan: $scope.selectedWorkplan._id,
      img: data.selCollections.img,
      img2: data.selCollections.img2,
      audio: data.selCollections.audio,
      text: data.selCollections.text,
      text2: data.selCollections.text2,
      card: data.selCollections.card,
      mixed: data.selCollections.mixed,
      mixed2: data.selCollections.mixed2,
      grid: data.selCollections.grid,
      type: 'W',
      page: conf.currentPage._id,
      name: $scope.name,
      order: 100
    };
    $http.post(config.apiUrl + '/ws/addContent', content).then(function (resp) {
      console.log('content:'+resp.data);
      $uibModalInstance.close();
    });
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
}
"use strict";

paCaptureCtrl.$inject = ["$scope", "$rootScope", "$http", "$uibModalInstance", "paSocket", "paCache", "config"];
angular.module('paApp').controller("paCaptureCtrl", paCaptureCtrl);

function paCaptureCtrl($scope, $rootScope, $http, $uibModalInstance, paSocket, paCache, config) {
  $scope.capture = function (id) {
    paSocket.emit("capture-screen", id);
  };

  $scope.getSubscriptions = function () {
    $http.get(config.apiUrl + '/ws/findSubscriptions/' + $rootScope.user.channel).then(function (resp) {
      $scope.data.subscriptions = _.filter(resp.data, function (subscr) {
        return subscr.active;
      });
    });
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };

  $scope.init = function () {
    $scope.selected = {};
    $scope.data = paCache.getData();
    $scope.conf = paCache.getConf();
    $scope.getSubscriptions();
  };

  $scope.init();
}
"use strict";

paChangePasswordCtrl.$inject = ["$scope", "$rootScope", "$http", "$state", "toaster", "config"];
angular.module('paApp').controller('paChangePasswordCtrl', paChangePasswordCtrl);

function paChangePasswordCtrl($scope, $rootScope, $http, $state, toaster, config) {
  $scope.user = $rootScope.user;

  $scope.checkPassword = function () {
    if ($scope.user.password == $scope.user.password2) {
      savePassword();
    } else {
      $scope.error = "Passwords are not the same: re-type again";
    }
  };

  var savePassword = function savePassword() {
    $http.post(config.apiUrl + '/ws/changePassword/' + $scope.user.id, {
      password: $scope.user.password
    }).then(function (resp) {
      toaster.pop('success', 'Password', 'Password changed');
      $state.transitionTo('dashboard');
    });
  };
}
"use strict";

channelCtrl.$inject = ["$scope", "$state", "$stateParams", "$location", "paChannel", "authService"];
angular.module('paApp').controller('channelCtrl', channelCtrl);

function channelCtrl($scope, $state, $stateParams, $location, paChannel, authService) {

    var init = function() {

          var params = $location.search();
          if (params.data){

            authService.mirgovoritLogin(params.data, function (result) {
              if (result.success === true) {
                $scope.mirgovoritProfile = result.data;
                paChannel.joinChannel($stateParams.channel).then(function(channel){
                  $scope.channel=channel;
                });
  
              } else {
                $scope.error = result.error;
              }
      
            });
  
          } else {
            $scope.anonymous=true;
          }
    }

    $scope.enter = function(){
      $state.go('pa',{to:'dashboard'});
    }

    $scope.open = function(){
      paChannel.openChannel($scope.channel._id).then(function (resp) {
        $state.go('pa',{to:'dashboard'});
      });
    }

    init();
}
"use strict";

CollectionCtrl.$inject = ["$scope", "$rootScope", "$http", "$state", "$stateParams", "$uibModal", "paCache", "paAcl", "config"];
angular.module('paApp').controller('CollectionCtrl', CollectionCtrl);

function CollectionCtrl($scope, $rootScope, $http, $state, $stateParams, $uibModal, paCache, paAcl, config) {

  var conf = paCache.getConf();

  var init = function(){
    $scope.conf = conf;
    $scope.isFolderAdmin = ($rootScope.user.role=='E' && conf.currentFolder.isAdmin);

    if ($stateParams.copyFrom){
      // copy
      $http.get(config.apiUrl + '/ws/collections/' + $stateParams.copyFrom).then(function(res){
        var coll = $stateParams.collection;
        coll.resources = res.data.resources;
        coll.chars = res.data.chars;
        coll.isSystem = $scope.isFolderAdmin;
        $scope.collection = coll;
      })
    } else {
      // add or edit
      var coll = $stateParams.collection;
      coll.isSystem = $scope.isFolderAdmin;
      $scope.collection = coll;
    }
    $scope.tab = $stateParams.tab;
  
  }
 
  $scope.next = function () {
    $scope.tab = ['text', 'text2'].includes($scope.collection.type) && !$scope.collection.chars ? 1 : 2;
  };

  $scope.saveText = function () {
    // remove empty chars
    $scope.collection.chars = _.filter($scope.collection.chars, function (c) {
      return c.val != '';
    });

    if ($scope.isFolderAdmin) {
      $scope.collection.teacher = null;
      $http.post(config.apiUrl + '/ws/saveSystemCollection', $scope.collection).then(function (resp) {
        $scope.back();
      });
    } else {
      $scope.collection.teacher = $rootScope.user.channel;
      $http.post(config.apiUrl + '/ws/saveCollection', $scope.collection).then(function (resp) {
        $scope.back();
      });
    }
  };

  $scope.addText = function () {
    //$scope.collection.page = $stateParams.page;
    $scope.collection.chars = [];

    for (var i = 0, l = $scope.collection.text.length; i < l; i++) {
      $scope.collection.chars.push({
        val: $scope.collection.text.charAt(i)
      });
    }

    if ($scope.isFolderAdmin) {
      $scope.collection.teacher = null;
      $http.post(config.apiUrl + '/ws/saveSystemCollection', $scope.collection).then(function (resp) {
        $scope.collection = resp.data;
        $scope.tab = 2;
      });
    } else {
      $scope.collection.teacher = $rootScope.user.channel;
      $http.post(config.apiUrl + '/ws/saveCollection', $scope.collection).then(function (resp) {
        $scope.collection = resp.data;
        $scope.tab = 2;
      });
    }
  };

  $scope.quickInsert = function(){
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.quick-insert.html?aaf52b6d1035fcd1',
      controller: 'popupResourcesCtrl',
      size: 'lg',
      resolve: {
        resource: function () {
          return null;
        },
        type: function(){
          return null;
        }
      }
  });
    modalInstance.result.then(function(text) {
      if (!$scope.collection.resources){
        $scope.collection.resources=[];
      }
  
      var lines  = text.split('\n');
      _.each(lines,function(line){
        var row={type:'mixed',resources:[]};
        $scope.collection.resources.push(row);

        var chunks = line.split('#');
        _.each(chunks, function(chunk){
          chunk = chunk.trim();
          var resource = {
            chars: [],
            type: 'text'
          };
          for (var i = 0, l = chunk.length; i < l; i++) {
            resource.chars.push({
              val: chunk.charAt(i)
            });
          }
          row.resources.push(resource);
        })      
      
      })
    });
  }

  $scope.addLine = function() {
    if (!$scope.collection.resources){
      $scope.collection.resources=[];
    }
    $scope.line={type:'mixed',resources:[]};
    $scope.collection.resources.push($scope.line);
    $scope.action=1;
  }

  $scope.editLine = function(line) {
    $scope.line=line;
    $scope.action=2;
  }

  $scope.ok = function(){
    $scope.action=0;
  }
  
  $scope.addUrlResource = function(resource){
    if (!$scope.collection.resources){
      $scope.collection.resources=[];
    }
    $scope.collection.resources.push(resource);
    $scope.resource={};
  }


  $scope.removeUrlResource = function(i){
    $scope.collection.resources.splice(i,1);
  }
  
  $scope.editResource = function (resource) {
    if (resource.type=='card'){

      $state.transitionTo('edit-card',{
        collection: $scope.collection,
        card:resource,
        options: $stateParams.options
      });

    } else {

      var modalInstance = $uibModal.open({
        animation: true,
        templateUrl: '/pa/popup.resource-edit.html?45f2ba40a23be962',
        controller: 'popupResourcesCtrl',
        size: 'lg',
        resolve: {
          resource: function () {
            return _.clone(resource);
          },
          type: function(){
            return null;
          }
        }
      });
      modalInstance.result.then(function(res) {
        _.extend(resource, res);
      });
    }

  }

  $scope.removeResource = function(resources, i){
    resources.splice(i,1);
  }

  $scope.saveCollection = function () {
    //$scope.collection.page = $stateParams.page;
    if ($scope.isFolderAdmin) {
      $scope.collection.teacher = null;
      $http.post(config.apiUrl + '/ws/saveSystemCollection', $scope.collection).then(function (resp) {
        $scope.back();
      });
    } else {
      $scope.collection.teacher = $rootScope.user.channel;
      $http.post(config.apiUrl + '/ws/saveCollection', $scope.collection).then(function (resp) {
        $scope.back();
      });
    }
  };

  $scope.back = function () {
    if ($stateParams.back=="edit-folder"){
      $state.transitionTo("edit-folder", {
        "folder": $scope.conf.currentFolder
      });
    } else {
      $state.transitionTo("admin", {
        "page": $scope.collection.page,
        "options": $stateParams.options
      });
    }
  };

  $scope.reduceSize = function (item) {
    var factor = item.sizeFactor || 1;
    item.sizeFactor = factor - 0.2;
  };

  $scope.increaseSize = function (item) {
    var factor = item.sizeFactor || 1;
    item.sizeFactor = factor + 0.2;
  };

  $scope.addResources = function(resources, type) {
    if (type=='card'){

      var r={
        type:'card',
        front:{},
        back:{}
      };
      resources.push(r);
      
      $state.transitionTo('edit-card',{
        collection: $scope.collection,
        card: r,
        options: $stateParams.options
      });

    } else {

      var modalInstance = $uibModal.open({
          animation: true,
          templateUrl: '/pa/popup.resources-add.html?a75ae1e17ab438f3',
          controller: 'popupResourcesCtrl',
          size: 'lg',
          resolve: {
            resource: function(){
              return null;
            },
            type: function(){
              return type;
            }
          }
      });
      modalInstance.result.then(function(c) {

        _.each(c.resources, function(res){
          resources.push(res);
        });

      });
    }

  }

  init();
}
"use strict";

collectionRemoveCtrl.$inject = ["$scope", "$rootScope", "$http", "$state", "$stateParams", "$uibModalInstance", "paCache", "paAcl", "config", "collection"];
angular.module('paApp').controller('collectionRemoveCtrl', collectionRemoveCtrl);

function collectionRemoveCtrl($scope, $rootScope, $http, $state, $stateParams, $uibModalInstance, paCache, paAcl, config, collection) {

  var conf = paCache.getConf();
  $scope.collection = collection;

  var init = function(){
    $scope.conf = conf;
    $scope.isFolderAdmin = ($rootScope.user.role=='E' && conf.currentFolder.isAdmin);

    var filter={};
    filter[collection.type] = collection._id;
    $http.post('/ws/findContents', filter).then(function(resp){
      $scope.contents = _.filter(resp.data, function(content){
        return content.type=='C';
      });
      $scope.workplans = _.filter(resp.data, function(content){
        return content.type=='W';
      });
      $scope.preventRemoval = !_.isEmpty($scope.contents);
    })
  }
 
  $scope.confirm = function () {
    $uibModalInstance.close();
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };

  init();
}
"use strict";

paCommentCtrl.$inject = ["$scope", "$rootScope", "$http", "$uibModalInstance", "paCache", "comment", "config"];
angular.module('paApp').controller('paCommentCtrl', paCommentCtrl);

function paCommentCtrl($scope, $rootScope, $http, $uibModalInstance, paCache, comment, config) {
  $scope.init = function () {
    var conf = paCache.getConf();
    $scope.conf = conf;

    if (comment) {
      // from dashboard
      $scope.comment = comment;
    } else if (conf.room.subscriptions.length == 1) {
      // from control panel
      var student = conf.room.subscriptions[0].student._id;
      $scope.loadComment(student);
    }
  };

  $scope.loadComment = function (student) {
    if (student) {
      var filter = {
        student: student,
        content: $scope.conf.currentContent._id
      };
      $http.post(config.apiUrl + '/ws/comments/search', filter).then(function (res) {
        if (res.data && res.data.length) {
          $scope.comment = res.data[0];
        } else {
          $scope.comment = {
            teacher: $rootScope.user.channel,
            folder: $scope.conf.currentContent.page.folder,
            content: $scope.conf.currentContent._id,
            student: student
          };
        }
      });
    }
  };

  $scope.saveComment = function () {
    $http.post(config.apiUrl + '/ws/comments', $scope.comment).then(function (res) {
      //toaster.pop('success', "Comment", "comment added");
      $uibModalInstance.dismiss('cancel');
    });
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };

  $scope.init();
}
"use strict";

paCommentsCtrl.$inject = ["$scope", "$uibModalInstance", "paService", "paCache", "user"];
angular.module('paApp').controller('paCommentsCtrl', paCommentsCtrl);

function paCommentsCtrl($scope, $uibModalInstance, paService, paCache, user) {
  $scope.init = function () {
    paService.loadStudentComments(user.student);
    $scope.data = paCache.getData();
    $scope.user = user;
  };

  $scope.close = function () {
    $uibModalInstance.dismiss('cancel');
  };

  $scope.setContent = function (comment) {
    paCache.setCurrentMode('C');
    paCache.setCurrentFolder(comment.folder);
    paCache.setCurrentContent(comment.content);
    $uibModalInstance.close(comment.content);
  };

  $scope.init();
}
"use strict";

conditionsCtrl.$inject = ["$scope", "$uibModalInstance"];
angular.module('paApp').controller('conditionsCtrl', conditionsCtrl);

function conditionsCtrl($scope, $uibModalInstance) {
  $scope.close = function () {
    $uibModalInstance.dismiss();
  };
}
"use strict";

feedCtrl.$inject = ["$scope", "paCache"];
angular.module('paApp').controller('feedCtrl', feedCtrl);

function feedCtrl($scope, paCache) {
  $scope.feed = paCache.getFeed();
}
"use strict";

paFeedbackCtrl.$inject = ["$scope", "$rootScope", "$http", "$sce", "$uibModalInstance", "config", "channel"];
angular.module('paApp').controller('paFeedbackCtrl', paFeedbackCtrl);

function paFeedbackCtrl($scope, $rootScope, $http, $sce, $uibModalInstance, config, channel) {
  $scope.feedback = {
    type: 'lesson',
    rate: 0
  };

  $scope.channel = channel;
  
  $scope.close = function () {
    $uibModalInstance.dismiss('cancel');
  };

  $scope.sendFeedback = function () {
    if ($scope.feedback.rate || $scope.feedback.comment) {
      $http.post(config.apiUrl + '/ws/feedbacks', $scope.feedback);
    }

    $uibModalInstance.dismiss('cancel');
  };
}
"use strict";

findWordController.$inject = ["$scope", "$http", "$state", "$rootScope", "paSocket", "paService", "paCache", "config"];
angular.module('paApp').controller('findWordController', findWordController);

function findWordController($scope, $http, $state, $rootScope, paSocket, paService, paCache, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    $scope.data = paService.init();
  };

  $scope.init();
}
"use strict";

paGroupCtrl.$inject = ["$scope", "$rootScope", "$http", "$uibModal", "$state", "paCache", "paStudent", "config"];
angular.module('paApp').controller('paGroupCtrl', paGroupCtrl);

function paGroupCtrl($scope, $rootScope, $http, $uibModal, $state, paCache, paStudent, config) {
    var pageScope = paCache.getPageScope();

    var init = function(){
        $scope.pageScope = pageScope;
        if ($state.params.group){
            // edit
            pageScope.group = $state.params.group;
            $http.get('/ws/groups/'+pageScope.group._id+'/subscriptions').then(function(resp){
                var groupIndex = _.indexBy(resp.data, 'student');
                _.each(pageScope.subscriptions, function(subscr){
                    subscr.active=_.has(groupIndex, subscr.student._id);
                })
              })
        } else {
            // add
            pageScope.group = {
                teacher: $rootScope.user.teacher,
                organization: $rootScope.user.organization,
            }
            _.each(pageScope.subscriptions, function(subscr){
                subscr.active=false;
            })
        }
    }

    $scope.saveGroup=function(group){
        paStudent.saveGroup(group);
    }

    $scope.removeGroup = function(group){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
            controller: 'paConfirmCtrl',
            resolve: {
              message: function(){
                return 'Are you sure?'
              }
            }
        });
        modalInstance.result.then(function () {
            paStudent.removeGroup(group);
        });
    }

    $scope.back = function(){
        var conf=paCache.getConf();
        var to=(conf.organization)?'org-groups':'students';
        $state.go(to);
    }
    
    init();
}
"use strict";

paHelpCtrl.$inject = ["$scope", "$http", "$uibModalInstance", "paCache", "config"];
angular.module('paApp').controller('paHelpCtrl', paHelpCtrl);

function paHelpCtrl($scope, $http, $uibModalInstance, paCache, config) {
    var conf = paCache.getConf();

    var init = function(){
        $http.get(config.apiUrl + '/ws/help/' + conf.currentFolder.code + '/' + conf.currentPage.code)
            .then(function(resp){
                if (resp && resp.data){
                    $scope.helpMd = resp.data;
                }else {
                    $scope.helpMd = 'Help for this page is not yet available.';
                }
            })
        $scope.keys=[];
        if (conf.currentContent){
            loadKeys(conf.currentContent.img);
            loadKeys(conf.currentContent.img2);
            loadKeys(conf.currentContent.audio);
            loadKeys(conf.currentContent.text);
            loadKeys(conf.currentContent.text2);
            loadKeys(conf.currentContent.card);
            loadKeys(conf.currentContent.url);
            loadKeys(conf.currentContent.mixed);
            loadKeys(conf.currentContent.mixed2);
            loadKeys(conf.currentContent.grid);
        }
    }

    var loadKeys = function(collection){
        if (collection){
            $http.get(config.apiUrl + '/ws/collections/' + collection + '/keys')
                .then(function(resp){
                    $scope.keys = $scope.keys.concat(resp.data);
                })
        }
    
    }

    $scope.cancel=function(){
        $uibModalInstance.dismiss();
    }

    init();
}
'use strict';

homeCtrl.$inject = ["$state", "$stateParams", "$http", "$rootScope", "paService", "paCache", "paSocket", "paStyle", "config", "features"];
angular.module('paApp').controller('homeCtrl', homeCtrl);

function homeCtrl($state, $stateParams, $http, $rootScope, paService, paCache, paSocket, paStyle, config, features) {

  paCache.initLocale();
  $http.get(config.apiUrl + '/ws/home').then(function (resp) {
    if (resp && resp.data) {
      $rootScope.admin = resp.data.admin;
      $rootScope.user = resp.data.user;
      paCache.setUserLocale($rootScope.user.locale);
      $rootScope.zoomEnabled = resp.data.zoomEnabled;
      $rootScope.paConfig = config;
      $rootScope.paFeatures = features || {};
      paService.loadStates();
      paSocket.init();
      paStyle.loadGlobalStyle();
      if (resp.data.user.role=='O'){
        $state.go($stateParams.to+'-o');
      } else if (resp.data.user.role=='E'){
        $state.go($stateParams.to+'-e');
      } else {
        $state.go($stateParams.to);
      }
    } else {
      // error
      $state.go('login');
    }
  });
}
'use strict';

paHomeworkCtrl.$inject=["$scope","$rootScope","$state","$http","$uibModal","paCache","paHomework","config"];
angular.module('paApp').controller('paHomeworkCtrl', paHomeworkCtrl);

function paHomeworkCtrl($scope, $rootScope, $state, $http, $uibModal, paCache, paHomework, config){

    var conf = paCache.getConf();

    $scope.open = function(homework){
        $http.get('/ws/menu/findPage/'+homework.content.page).then(function(resp){
            homework.content.page=resp.data;
            paCache.setCurrentHomework(homework);
            paCache.setCurrentContent(homework.content);
            paCache.setCurrentPage(homework.content.page);
            paCache.setCurrentMode('H');
            $state.transitionTo(homework.content.page.template.name, 
                {content: homework.content}, 
                {"reload": true});
        })
    }

    $scope.done = function(){
        paHomework.patchHomework($rootScope.user.student, conf.currentContent._id, {done: true}).then(function(homework){
            $state.transitionTo('dashboard',{tab: 6});
        })
    }

    $scope.close = function(){
        paHomework.patchHomework(conf.asStudent._id, conf.currentContent._id, {closed: true}).then(function(homework){
            $state.transitionTo('select-student',{tab: 6, id: conf.asStudent._id});
        })
    }

    $scope.reopen = function(){
        paHomework.patchHomework(conf.asStudent._id, conf.currentContent._id, {done: false}).then(function(homework){
            $state.transitionTo('select-student',{tab: 6, id: conf.asStudent._id});
        })
    }

    $scope.addHomework = function(){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '/pa/popup.homework.html?67843dda9d78d032',
            controller: 'popupHomeworkCtrl',
            resolve: {
                homework: function(){
                    return {
                        teacher: $rootScope.user.channel,
                        student: conf.asStudent._id,
                        done: false,
                        closed: false
                    }
                },
                options: function(){
                    return {
                        students: [conf.asStudent],
                        mode: 0
                    }
                }
            }
        });
	    modalInstance.result.then(function(coll) {
	    	paHomework.loadHomeworks(conf.asStudent._id);
        });
    }

    $scope.editHomework = function(homework){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '/pa/popup.homework.html?67843dda9d78d032',
            controller: 'popupHomeworkCtrl',
            resolve: {
                homework: function(){
                    return _.clone(homework)
                },
                options: function(){
                    return {
                        students: [conf.asStudent],
                        mode: 1
                    }
                }
            }
        });
	    modalInstance.result.then(function(coll) {
	    	paHomework.loadHomeworks(conf.asStudent._id);
        });
    }

    $scope.removeHomework = function(homework){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '/pa/popup.homework.html?67843dda9d78d032',
            controller: 'popupHomeworkCtrl',
            resolve: {
                homework: function(){
                    return _.clone(homework)
                },
                options: function(){
                    return {
                        students: [conf.asStudent],
                        mode: 2
                    }
                }
            }
        });
	    modalInstance.result.then(function(res) {
            paHomework.loadHomeworks(conf.asStudent._id);
        });
    }

}
'use strict';

paHomeworkCommentsCtrl.$inject=["$scope","$rootScope","$state","$http","$uibModal","paCache","paHomework","config"];
angular.module('paApp').controller('paHomeworkCommentsCtrl', paHomeworkCommentsCtrl);

function paHomeworkCommentsCtrl($scope, $rootScope, $state, $http, $uibModal, paCache, paHomework, config){

    var conf = paCache.getConf();
    $scope.homework = conf.currentHomework;
    
    $scope.addComment = function() {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '/pa/popup.homework-comment.html?482b705a189769f3',
            controller: 'popupHomeworkCommentCtrl',
            size: 'lg',
            resolve: {
                p: function(){
                    return null;
                }
            }
        });
	    modalInstance.result.then(function(homework) {
	    	$scope.homework = homework;
        });
    }

    $scope.editComment = function(i) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '/pa/popup.homework-comment.html?482b705a189769f3',
            controller: 'popupHomeworkCommentCtrl',
            size: 'lg',
            resolve: {
                p: function(){
                    return {action:1, i:i};
                }
            }
        });
	    modalInstance.result.then(function(homework) {
	    	$scope.homework = homework;
        });
    }

    $scope.removeComment = function(i) {
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '/pa/popup.homework-comment.html?482b705a189769f3',
            controller: 'popupHomeworkCommentCtrl',
            size: 'lg',
            resolve: {
                p: function(){
                    return {action:2, i:i};
                }
            }
        });
	    modalInstance.result.then(function(homework) {
	    	$scope.homework = homework;
        });
    }

}
"use strict";

paKeyCtrl.$inject = ["$scope", "$rootScope", "$uibModalInstance", "$http", "paCache", "collection"];
angular.module('paApp').controller('paKeyCtrl', paKeyCtrl);

function paKeyCtrl($scope, $rootScope, $uibModalInstance, $http, paCache, collection) {
    var conf = paCache.getConf();
    $scope.init = function () {
        $scope.isFolderAdmin = ($rootScope.user.role=='E' && conf.currentFolder.isAdmin);
        loadKeys(collection);
        $scope.data = paCache.getData();
    };

    $scope.close = function () {
        $uibModalInstance.dismiss('cancel');
    };

    $scope.editKey = function(key){
        $scope.mode='edit';
        $scope.key=key;
    }

    $scope.addKey = function(){
        $scope.mode='add';
        $scope.key={
            value:null
        };
    }

    $scope.saveKey = function (key) {
        if (key._id){
            $http.put('/ws/collections/' + collection._id + '/keys/' + key._id, {value: key.value}).then(function (resp) {
                loadKeys(collection);
            })
        } else {
            var key = {
                coll: collection._id,
                value: key.value
            };
            if (!$scope.isFolderAdmin){
                key.teacher = $rootScope.user.teacher
            }
            $http.post('/ws/collections/' + collection._id + '/keys', key).then(function (resp) {
                loadKeys(collection);
            })
        }
    };

    $scope.removeKey = function (key) {
        $http.delete('/ws/collections/' + collection._id + '/keys/' + key._id).then(function (resp) {
            loadKeys(collection);
        })
    };

    var loadKeys = function (collection) {
        $http.get('/ws/collections/' + collection._id + '/keys').then(function (resp) {
            $scope.keys = resp.data;
            $scope.mode = null;
        })
    }
    $scope.init();
}
'use strict';

labelCtrl.$inject=["$scope","paCache","labels","config"];
angular.module('paApp').controller('labelCtrl', labelCtrl);

function labelCtrl($scope, paCache, labels, config){
    var userLocale = paCache.getUserLocale();
    var locale = (userLocale && userLocale.code) ? userLocale.code : config.defaultLocale;
    $scope.label = (labels[locale] && labels[locale][$scope.key]) ? labels[locale][$scope.key] : $scope.default;
}
"use strict";

paLessonCtrl.$inject = ["$scope", "$uibModalInstance", "paCache", "data"];
angular.module('paApp').controller('paLessonCtrl', paLessonCtrl);

function paLessonCtrl($scope, $uibModalInstance, paCache, data) {
  $scope.lesson = data.lesson;
  $scope.conf = paCache.getConf();

  $scope.ok = function () {
    $uibModalInstance.close();
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
}
"use strict";

lessonsCtrl.$inject = ["$scope", "$rootScope", "$http", "paCache", "config"];
angular.module('paApp').controller('lessonsCtrl', lessonsCtrl);

function lessonsCtrl($scope, $rootScope, $http, paCache, config) {
  var conf = paCache.getConf();

  var init = function init() {
    var today = new Date();
    $scope.months = {
      labels: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
      options: _.range(0, 12),
      selected: today.getMonth()
    };
    $scope.years = {
      options: _.range(2015, today.getFullYear() + 1),
      selected: today.getFullYear()
    };
    $scope.loadLessons();
    $scope.loadNextLessons();
  };

  $scope.loadLessons = function () {
    $http.get(config.apiUrl + '/ws/findLessonsByTeacher/' + $rootScope.user.teacher + '/' + $scope.months.selected + '/' + $scope.years.selected).then(function (resp) {
      $scope.allLessons = resp.data;
    });
  };

  $scope.loadNextLessons = function() {
    $http.get(config.apiUrl + '/ws/findNextLessonsByTeacher/' + $rootScope.user.teacher).then(function (resp) {
      $scope.nextLessons = resp.data;
    });
  }

  init();
}
"use strict";

likesController.$inject = ["$scope", "$http", "$rootScope", "$uibModal", "paSocket", "paCache", "toaster", "config"];
angular.module('paApp').controller('likesController', likesController);

function likesController($scope, $http, $rootScope, $uibModal, paSocket, paCache, toaster, config) {
  $scope.animateElementIn = function ($el) {
    $el.removeClass('not-visible');
    $el.addClass('animated zoomIn');
  };

  $scope.animateElementOut = function ($el) {
    $el.addClass('not-visible');
    $el.removeClass('animated zoomIn');
  };

  $scope.scrollToElement = function (id) {
    paSocket.emit("scroll", id);
  };

  $scope.init = function () {
    $scope.filterBy = {};
    $scope.getPosts();
    $scope.data = paCache.getData();
    $http.get(config.apiUrl + '/ws/vk/getUser').then(function (resp) {
      if (resp.data.error) {
        $scope.auth = true;
      } else {
        $scope.vkUser = resp.data[0];
      }
    });
  };

  var distinctPages = function distinctPages(posts) {
    var pages = _.map(posts, function (post) {
      return post.page;
    });

    return _.uniq(pages, function (page) {
      return page._id;
    });
  };

  $scope.getPosts = function () {
    var from = new Date();
    from.setMonth(from.getMonth() - 1);
    var criteria = {
      date: {
        $gt: from
      },
      private: {
        $ne: true
      }
    };
    $http.post(config.apiUrl + '/ws/getPosts', criteria).then(function (resp) {
      var posts = _.filter(resp.data, function (post) {
        return post.student && post.student.length && post.teacher && post.page;
      });

      $scope.posts = posts;
      $scope.pages = distinctPages(posts);

      var conf = paCache.getConf();
      _.each(posts, function (post) {
        post.like = post.likes.indexOf($rootScope.user.student) != -1;
        post.isMine = _.contains(post.student, function(s){
          return s._id==$rootScope.user.student;
        })
      });
    });
  };

  $scope.filterByPage = function (page) {
    paSocket.emit('filterBy', {
      page: page
    });
  };

  $scope.addLike = function (post) {
    var like = {
      post: post._id,
      student: $rootScope.user.student
    };
    $http.post(config.apiUrl + '/ws/addLike', like).then(function (resp) {
      post.likes = resp.data.likes;
      post.like = post.likes && post.likes.indexOf($rootScope.user.student) != -1;
    });
  };

  $scope.confirmRemove = function (post) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
      controller: 'paConfirmCtrl',
      resolve: {
        message: function(){
          return 'Are you sure?'
        }
      }
    });
    modalInstance.result.then(function () {
      $http.get(config.apiUrl + '/ws/removePost/' + post._id).then(function (resp) {
        $scope.init();
      });
    });
  };

  $scope.removeLike = function (post) {
    var like = {
      post: post._id,
      student: $rootScope.user.student
    };
    $http.post(config.apiUrl + '/ws/removeLike', like).then(function (resp) {
      post.likes = resp.data.likes;
      post.like = post.likes.indexOf($rootScope.user.student) != -1;
    });
  };

  $scope.init();
}
'use strict';

paLinkSubscriptionCtrl.$inject=["$scope","$uibModalInstance","subscr","paCache","paSubscription","config"];
angular.module('paApp').controller('paLinkSubscriptionCtrl', paLinkSubscriptionCtrl);

function paLinkSubscriptionCtrl($scope, $uibModalInstance, subscr, paCache, paSubscription, config){

    $scope.pageScope = paCache.initPageScope();
    paSubscription.getTeachersForSubscription(subscr._id);

    $scope.cancel = function(){
        $uibModalInstance.dismiss();
    }

    $scope.select = function(teacher){
        $scope.sel=teacher;
    }
    
    $scope.link=function(){
        $uibModalInstance.close($scope.sel);
    }
}
'use strict';

loginCtrl.$inject = ["$q", "$http", "$scope", "$state", "$stateParams", "authService", "config"];
angular.module('paApp').controller('loginCtrl', loginCtrl);

function loginCtrl($q, $http, $scope, $state, $stateParams, authService, config) {
  
  var init = function(){
    authService.getStrategies().then(function(res){
      $scope.auth = res;
    })
  }

  $scope.login = function (strategy) {
    authService.login($scope.username, $scope.password, function (result) {
      if (result.success === true) {
        $state.go('pa',{to:'dashboard'});
      } else {
        $scope.error = result.error;
      }
    });
  };

  var pwd = function pwd(user) {
    var deferred = $q.defer();
    $http.post(config.apiUrl + '/ws/forgotPassword', user).then(function (resp) {
      return deferred.resolve(resp.data);
    });
    return deferred.promise;
  };

  $scope.forgotPassword = function (email) {
    pwd({
      email: email
    }).then(function (result) {
      $scope.ptab = result;
    }, function (error) {});
  };

  /*$scope.popupPrivacy = function(){
  	$uibModal.open({
  		animation: true,
  		templateUrl: '/privacy.html'),
  		controller: 'conditionsCtrl',
  		size: 'lg'            
  	});
  }
  
  $scope.popupConditions = function(){
  	$uibModal.open({
  		animation: true,
  		templateUrl: '/conditions.html'),
  		controller: 'conditionsCtrl',
  		size: 'lg'            
  	});
  }*/

  init();
}
"use strict";

paMarketplaceCtrl.$inject = ["$scope", "$state", "$rootScope", "$http", "$window", "paCache", "paMenu", "config", "countries"];
angular.module('paApp').controller('paMarketplaceCtrl', paMarketplaceCtrl);


function paMarketplaceCtrl($scope, $state, $rootScope, $http, $window, paCache, paMenu, config, countries) {

  var conf = paCache.getConf();
  $scope.countries=countries;

  $scope.init = function () {
    $scope.checkoutTab=-1;
    $scope.paymentConfig = config.payments;

    $scope.loadProducts();
    if ($state.params.teacher){
      // organization: pay on-behalf-of a teacher
      $scope.loadPendingPayments($state.params.teacher);
      $scope.loadFolderSubscriptions($state.params.teacher);
      $scope.newOrgPayment($state.params.teacher);
      $scope.subscriptionPlan=conf.organization.subscriptionPlan;
    } else {
      $scope.loadPendingPayments($rootScope.user.teacher);
      $scope.loadFolderSubscriptions($rootScope.user.teacher);
      $scope.newPayment();
      $scope.subscriptionPlan=conf.teacher.subscriptionPlan;
    }
  };

  $scope.setTab = function(t){
    $scope.checkoutTab=t;
  }

  $scope.loadFolderSubscriptions = function (teacher) {
    $http.get(config.apiUrl + '/ws/menu/folderSubscriptions/' + teacher).then(function (resp) {
      $scope.folderSubscriptions = resp.data;
    });
  };

  $scope.loadPendingPayments = function(teacher) {
    $http.post(config.apiUrl + '/ws/findPayments', {teacher:teacher, status:'pending', currency:'€'}).then(function(resp) {
      if (resp.data.length==0){
        $scope.checkoutTab=0;
      } else {
        $scope.pendingPayments=resp.data;
      }
    });
  }

  $scope.loadProducts = function() {
    $http.get(config.apiUrl + '/ws/products').then(function (resp) {
      $scope.products = _.filter(resp.data, function (p) {
        return p.folder;
      });
    });
  };

  $scope.setDeferring = function(){
    $scope.deferring=true;
    $scope.checkoutTab=2;
  }

  $scope.setPaymentType = function(type){
    $scope.payment.type=type;
    $http.post(config.apiUrl + '/ws/savePayment/' + $scope.payment._id, $scope.payment).then(function (resp) {
      $scope.payment = resp.data;
      $scope.checkoutTab=2;
    });
  }

  var initBillingInfo = function(){
    var fullname = conf.teacher.name + " " + conf.teacher.surname;
    if (conf.teacher.middle) {
      fullname += " "+conf.teacher.middle;
    }
    $scope.payment.billingInfo = {
      email: conf.teacher.email,
      firstname: conf.teacher.name,
      lastname: conf.teacher.surname,
      middlename: conf.teacher.middle,
      fullname: fullname,
      countryCode: conf.teacher.address.countryCode || 'RU'
    }    
  }

  $scope.newPayment = function () {
    $http.get(config.apiUrl + '/ws/newPayment/' + $rootScope.user.teacher).then(function (resp) {
      $scope.payment = resp.data;
      $scope.payment.items = {};
      initBillingInfo();
    });
  };

  $scope.newOrgPayment = function (teacher) {
    var conf = paCache.getConf();
    $http.post(config.apiUrl + '/ws/organizations/' + $rootScope.user.organization + '/teachers/' + teacher + "/payments").then(function (resp) {
      $scope.payment = resp.data;
      $scope.payment.items = {};
      $scope.payment.email = conf.organization.email;
      $scope.payment.fullname = conf.organization.director;
    });
  };

  $scope.toggle = function (product) {
    var sel = $scope.payment.items[product.folder.code];
    if (sel && sel._id==product._id) {
      $scope.payment.items[product.folder.code] = null;
    } else {
      $scope.payment.items[product.folder.code] = product;
    }

    savePayment();
  };

  var savePayment = function savePayment() {
    $http.post(config.apiUrl + '/ws/savePayment/' + $scope.payment._id, $scope.payment).then(function (resp) {
      $scope.payment = resp.data;
      expiryDates();
    });
  };

  var expiryDates = function expiryDates() {
    _.each(_.values($scope.payment.items), function (product) {
      var subscr = _.find($scope.folderSubscriptions, function(subscr) {
        return subscr.folder.code==product.folder.code;
      });

      if (!subscr || !subscr.expiryDate || Date.parse(subscr.expiryDate) < Date.now()) {
        product.prevExpiryDate = new Date();
      } else {
        product.prevExpiryDate = new Date(subscr.expiryDate);
      }

      var newExpiry = new Date(product.prevExpiryDate);
      newExpiry.setDate(newExpiry.getDate() + product.days);
      product.newExpiryDate = newExpiry;

    });

  };

  $scope.applyPromoCode = function() {
    $http.put(config.apiUrl + '/ws/payments/applyPromo', $scope.payment).then(
      function(resp){
        $scope.payment = resp.data;
      }, 
      function(resp){
        $scope.promoCodeError=resp.data;
    })
  }

  $scope.removePromoCode = function() {
    $http.put(config.apiUrl + '/ws/payments/removePromo', $scope.payment).then(
      function(resp){
        $scope.payment = resp.data;
      })
  }

  $scope.payOrder = function(payment){
    $scope.payment = payment;
    $scope.checkoutTab = 2;
    initBillingInfo();
  }

  $scope.cancelOrder = function(payment){
    $http.delete(config.apiUrl + '/ws/revolut/orders?paymentId='+payment._id).then(function (resp) {
      $scope.init();
    })
  }

  $scope.abandonPayment = function(payment){
    if (payment.type=='creditCard'){
      $http.delete(config.apiUrl + '/ws/revolut/orders?abandon=true&paymentId='+payment._id).then(function (resp) {
        $scope.init();
      })
    } else {
      $http.delete(config.apiUrl + '/ws/payments/'+payment._id).then(function (resp) {
        $scope.init();
      })
    }
  }

  $scope.paymentDetails = function(payment){
    $scope.payment=payment;
    $scope.checkoutTab=5;
  }

  $scope.checkoutPending = function(payment) {
    $http.put(config.apiUrl + '/ws/payments/'+payment._id+'/checkout/pending').then(function (resp) {
      $scope.payment = resp.data;
      $scope.checkoutTab = 1;
      initBillingInfo();
    });
  }

  $scope.axerveCheckout = function(payment, paymentType){
    $scope.checkoutTab = 3;
    $http.post(config.apiUrl + '/ws/payments/' + payment._id + '/checkout/axerve/'+paymentType, payment).then(function (resp) {
      $window.location.href = resp.data.formUrl;    
    })
  }

  $scope.confirmBankTransfer = function(payment){
    $http.post(config.apiUrl + '/ws/payments/' + payment._id + '/checkout/bankTransfer', payment).then(function (resp) {
      $scope.checkoutTab = 4;
    })
  }

  $scope.checkout = function (payment) {
    //$scope.checkoutTab = 3;
    $http.post(config.apiUrl + '/ws/payments/' + payment._id + '/checkout/revolut', payment).then(function (resp) {
      RevolutCheckout(resp.data.public_id, config.payments.env).then((instance) => {
        instance.payWithPopup({
          name: $scope.payment.billingInfo.fullname,
          email: $scope.payment.billingInfo.email,
          onSuccess() {
            $scope.checkOrderStatus(resp.data.id);
          },
          onError(message) {
            $scope.checkOrderStatus(resp.data.id);
          },
          onCancel() {
          }          
        });
      });      
    },function(resp){
      $scope.checkoutTab = 5;
    });
  };

  $scope.checkOrderStatus = function(orderId){
    $http.post(config.apiUrl + '/ws/revolut/callback',{order_id:orderId}).then(function (resp) {
      var payment=resp.data;
      if (payment.status=='valid'){
        paMenu.loadMyFolders($rootScope.user.teacher);
        $state.go('levels');
      } else {
        $scope.checkoutTab = 4;
        $scope.payment = payment;
      }
    })
  }

  $scope.defer = function () {
    $http.post(config.apiUrl + '/ws/payments/' + $scope.payment._id + '/defer', $scope.payment).then(function (resp) {
      paMenu.loadMyFolders($rootScope.user.teacher);
      $scope.rows=resp.data;
      $scope.checkoutTab=4;
    });
  };

  $scope.init();
}
"use strict";

mdCtrl.$inject = ["$scope", "$http"];
angular.module('paApp').controller('mdCtrl', mdCtrl);

function mdCtrl($scope, $http){	
    $http.get('/ws/help/home/' + $scope.page).then(function(resp){
        if (resp && resp.data){
            $scope.md = resp.data;
        }
    })   
}

"use strict";

mirgovoritCtrl.$inject = ["$scope", "$state", "$stateParams", "$http", "$window", "$location", "authService", "config"];
angular.module('paApp').controller('mirgovoritCtrl', mirgovoritCtrl);

function mirgovoritCtrl($scope, $state, $stateParams, $http, $window, $location, authService, config){	
    
    $scope.init = function(){
        switch ($state.current.name){
            case 'mirgovorit-link':
                $scope.link();
                break;
            case 'mirgovorit-login':
                $scope.login();
                break;
        }
    }

    $scope.setTab = function(tab){
        $scope.tab = tab;
    }

    $scope.link = function(mode) {

        var params = $location.search();
        $scope.tab = mode || params.mode;

        if (params.data) {
            $http.post(config.apiUrl + '/ws/mirgovorit/decrypt', {data:params.data}).then(
                function(resp) {
                    $scope.mirgovoritProfile = resp.data;
                }
            )
        }

        if (!$scope.tab || $scope.tab!='register') {
            $http.get(config.apiUrl + '/ws/profile').then(
                function (resp) {
                    if (resp && resp.data){
                        $scope.pikimoniProfile = resp.data;
                        $scope.tab = 'link';
                    } else {
                        $scope.tab = 'login';
                    }
                }
            )
        }
    }
    $scope.confirmLink = function(){
        var params = $location.search();
        $http.post(config.apiUrl + '/ws/mirgovorit/link', {data: params.data}).then(
            function(resp){
                if (params.redirectUrl) {
                    $window.location.href = decodeURIComponent(params.redirectUrl);
                } else {
                    $location.url('/pa/dashboard');
                }
            })
    }

    $scope.pikimoniLogin = function () {
        authService.login($scope.username, $scope.password, function (result) {
          if (result.success === true) {
            $scope.username = undefined;
            $scope.password = undefined;
            $scope.loggedIn = true;
            $scope.link('link');
          } else {
            $scope.error = result.error;
          }
        });
    };

    $scope.register = function(){
        var params = $location.search();
        $http.post(config.apiUrl + '/ws/mirgovorit/register', {data: params.data}).then(
          function(resp){
              if (resp.data && resp.data._id){
                  if (params.redirectUrl){
                    $window.location.href = decodeURIComponent(params.redirectUrl);
                  } else {
                      $scope.login();
                  }
              } else {
                $scope.error=resp.data.error;
              }
          }
        )
    };
    
    $scope.login = function () {
        var params = $location.search();
        authService.mirgovoritLogin(params.data, function (result) {
          if (result.success === true) {
            $state.go('pa',{to:'dashboard'});
          } else {
            $scope.error = result.error;
          }
        });
    };
    
    $scope.forgotPassword = function() {
        $http.post(config.apiUrl + '/ws/forgotPassword', {email: $scope.email}).then(function (resp) {
            if (resp.data=='E') {
                $scope.error='Email not found';
                $scope.setTab('forgotPwd');
            } else {
                $scope.setTab('mailSent');
            }
          });        
    }
    $scope.init();
}

"use strict";

mixedResourceCtrl.$inject = ["$scope", "paCache", "paSocket", "paService"];
angular.module('paApp').controller('mixedResourceCtrl', mixedResourceCtrl);

function mixedResourceCtrl($scope, paCache, paSocket, paService){	
    $scope.conf = paCache.getConf();
    $scope.data = paCache.getData();

    /*if ($scope.paResource && $scope.paResource.type=='text'){
      $scope.paResource.words=paService.split($scope.paResource.chars,' ');
    }*/

    $scope.playAudio = function (url) {
        paSocket.emit("play-track", {
          play: url
        });
    };

    $scope.pauseAudio = function (url) {
      paSocket.emit("play-track", {
        pause: url
      });
    };

    $scope.emitMessage = function (message, value) {
      paSocket.emit(message, value);
    };
  
    $scope.undo = function (s, t) {
      paSocket.emit("undo-drag", {
        source: s,
        target: t
      });
    };

    $scope.flip = function (i) {
      var data = paCache.getData();
      var sel = data.selected[i];
      paSocket.emit("flip", [i, !sel]);
    };
  
    $scope.sendText = function (i, text) {
      if (!text){
        var data = paCache.getData();
        text = data.temp[i];
      }
      paSocket.emit('replace-text', {
        i: i,
        val: text
      });
    };
  
}

"use strict";

opentokCtrl.$inject = ["$scope", "$http", "$rootScope", "paCache", "paSocket", "OTSession", "config"];
angular.module('paApp').controller('opentokCtrl', opentokCtrl);

function opentokCtrl($scope, $http, $rootScope, paCache, paSocket, OTSession, config) {
  var conf = paCache.getConf();
  $scope.fullscreenStyle = {
    width: '96vw',
    height: '86vh'
  };
  $scope.standardStyle = {
    width: '15vw',
    height: '50vh'
  };

  var init = function init() {
    if (conf.video.active) {
      initSession();
    } else {
      closeSession();
    }
  };

  var initSession = function initSession() {
    $http.get(config.apiUrl + '/ws/opentok/' + conf.channel._id).then(function (resp) {
      OTSession.init(resp.data.apiKey, conf.channel.opentok, resp.data.token, function (err, session) {// Here you can do things to the OpenTok session
        // The err is bubbled up from session.connect
      });
      $scope.streams = OTSession.streams;
      $scope.token = resp.data.token;
    });
  };

  init();
}

;
"use strict";

paOrganizationCtrl.$inject = ["$scope", "$rootScope", "$http", "$uibModal", "$state", "paCache", "paTeacher", "paSubscription", "paPayment", "paStudent", "config"];
angular.module('paApp').controller('paOrganizationCtrl', paOrganizationCtrl);

function paOrganizationCtrl($scope, $rootScope, $http, $uibModal, $state, paCache, paTeacher, paSubscription, paPayment, paStudent, config) {
  var pageScope = paCache.initPageScope();
  pageScope.filter={};
  $scope.pageScope = pageScope;

  var init = function init() {
    if ($state.current.name=='org-teachers'){
      paTeacher.getOrganizationTeachers($rootScope.user.organization);

    } else if ($state.current.name=='org-teacher'){
      $scope.teacher=$state.params.teacher;
      paTeacher.getFolderSubscriptions($state.params.teacher);

    } else if ($state.current.name=='org-students'){
      paStudent.getOrganizationStudents($rootScope.user.organization);
      paStudent.getOrganizationGroups($rootScope.user.organization);

    } else if ($state.current.name=='org-groups'){
      paStudent.getOrganizationStudentSubscriptions($rootScope.user.organization);
      paStudent.getOrganizationGroups($rootScope.user.organization);

    } else if ($state.current.name=='org-subscriptions'){
      paSubscription.getOrganizationSubscriptions($rootScope.user.organization);

    } else if ($state.current.name=='org-payments'){
      paPayment.getOrganizationPayments($rootScope.user.organization);

    } else if ($state.current.name=='org-new-payment'){
      $scope.teacher=$state.params.teacher;
      $scope.folder=$state.params.folder;
      paPayment.newOrganizationPayment($rootScope.user.organization, $state.params.teacher, $state.params.folder);
    }
  };

  $scope.linkTeacher = function(teacherId){
    paTeacher.linkTeacherToOrganization(teacherId, $rootScope.user.organization)
      .then(function(resp){
        $scope.teacherId=null;
        paTeacher.getOrganizationTeachers($rootScope.user.organization);
      })
  };

  $scope.unlinkTeacher = function (teacher) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
      controller: 'paConfirmCtrl',
      resolve: {
        message: function(){
          return 'Are you sure?'
        }
      }
    });
    modalInstance.result.then(function () {
      paTeacher.unlinkTeacherFromOrganization(teacher._id, $rootScope.user.organization)
        .then(function(resp){
          paTeacher.getOrganizationTeachers($rootScope.user.organization);
        })
    });
  };

  $scope.unlinkSubscription = function(subscr){
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
      controller: 'paConfirmCtrl',
      resolve: {
        message: function(){
          return 'Are you sure?'
        }
      }
    });
    modalInstance.result.then(function () {
      paSubscription.unlinkSubscriptionFromTeacher(subscr)
        .then(function(resp){
          paSubscription.getOrganizationSubscriptions($rootScope.user.organization);
        })
    });
  }
  $scope.linkSubscriptionPopup = function(subscr){
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.linkSubscription.html?8aa2c28f2687db98',
      controller: 'paLinkSubscriptionCtrl',
      resolve: {
        subscr: function(){
          return subscr
        }
      }
    });
    modalInstance.result.then(function (teacher) {
      paSubscription.linkSubscriptionToTeacher(subscr, teacher)
        .then(function(resp){
          paSubscription.getOrganizationSubscriptions($rootScope.user.organization);
        })
    });
  }

  $scope.filterByGroup = function(group){
    pageScope.filter.group={_id:group._id};
  }

  $scope.clearFilter = function(){
    pageScope.filter={};
  }

  $scope.unlinkStudentPopup = function(student){
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
      controller: 'paConfirmCtrl',
      resolve: {
        message: function(){
          return 'Are you sure?'
        }
      }
    });
    modalInstance.result.then(function () {
      paStudent.unlinkStudentFromOrganization(student)
        .then(function(resp){
          paStudent.getOrganizationStudents($rootScope.user.organization);
        })
    });
  }

  init();
}
"use strict";

canvasCtrl.$inject = ["$scope"];
angular.module('paApp').controller('canvasCtrl', canvasCtrl);

function canvasCtrl($scope) {
  $scope.init = function () {
    $scope.loadImage();
  };

  $scope.loadImage = function () {
    var img = new Image();

    img.onload = function () {
      var w = img.width,
          h = img.height;
      var canvas = document.getElementById($scope.name);
      $scope.scale = w > h ? canvas.width / w : canvas.height / h;
      $scope.resize(canvas, img);
    };

    img.src = $scope.resource.src;
  };

  $scope.resize = function (canvas, img) {
    var ctx = canvas.getContext("2d");
    var w = img.width * $scope.scale,
        h = img.height * $scope.scale;
    var x = canvas.width > w ? (canvas.width - w) / 2 : 0;
    var y = canvas.height > h ? (canvas.height - h) / 2 : 0;
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    ctx.fillStyle = "rgba(0,0,0,0)";
    ctx.fillRect(0, 0, canvas.width, canvas.height);
    ctx.drawImage(img, x, y, w, h);
  };

  $scope.init();
}

;
"use strict";

cardEditorController.$inject = ["$scope", "$http", "$state", "$stateParams", "$uibModal", "$rootScope", "paCache", "paStorage", "config"];
angular.module('paApp').controller('cardEditorController', cardEditorController);

function cardEditorController($scope, $http, $state, $stateParams, $uibModal, $rootScope, paCache, paStorage, config) {
  $scope.init = function () {

    $scope.card = $stateParams.card;

  };

  $scope.addResource = function(resource, type){
    resource.type = type;
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.resource-add.html',
      controller: 'popupResourcesCtrl',
      size: 'lg',
      resolve: {
        type: function () {
          return null;
        },
        resource: function () {
          return _.clone(resource);
        }
      }
    });
    modalInstance.result.then(function(res) {
      _.extend(resource, res);
    });

  }

  $scope.clearResource = function(resource) {
    _.mapObject(resource, function(val, key) {
      delete resource[key];
    });
  }

  $scope.editResource = function(resource) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.resource-edit.html?45f2ba40a23be962',
      controller: 'popupResourcesCtrl',
      size: 'lg',
      resolve: {
        type: function () {
          return null;
        },
        resource: function () {
          return _.clone(resource);
        }
      }
    });
    modalInstance.result.then(function(res) {
      _.extend(resource, res);
    });
  };

  $scope.ok = function() {
    $state.transitionTo('collection-'+$stateParams.collection.type, {
      collection: $stateParams.collection,
      options: $stateParams.options,
      tab: 2
    })
  }
  $scope.init();
}

;
"use strict";

chatController.$inject = ["$scope", "paSocket", "paCache"];
angular.module('paApp').controller('chatController', chatController);

function chatController($scope, paSocket, paCache) {
  var conf = paCache.getConf();
  conf.chat= {
    open: false,
    messages: []
  }
  $scope.conf = conf;

  $scope.sendMessage = function () {
    if ($scope.text){
      paSocket.emit("chat.message", {text: $scope.text, id: Date.now(), action: 'add'});
      $scope.text = '';
    }
  };

  $scope.updateMessage = function(msg) {
    msg.action='update';
    msg.editMode=undefined;
    paSocket.emit("chat.message", msg);
  }

  $scope.removeMessage = function(msg) {
    msg.action='remove';
    paSocket.emit("chat.message", msg);
  }

  $scope.openChat = function(b){
    paSocket.emit('chat.open', {
      value: b
    });
  }
};
"use strict";

collectionEditorController.$inject = ["$scope", "$http", "$state", "$stateParams", "$uibModal", "$rootScope", "paCache", "paStorage", "config"];
angular.module('paApp').controller('collectionEditorController', collectionEditorController);

function collectionEditorController($scope, $http, $state, $stateParams, $uibModal, $rootScope, paCache, paStorage, config) {

  var conf = paCache.getConf();
  var pageScope = paCache.getPageScope();

  $scope.init = function () {
    if ($scope.collection) {

      if (!$scope.collection.resources) {
        $scope.collection.resources = [];
      }
  
      _.each($scope.collection.resources, function (res) {
        res.active = true;
      }); 
      
      //$scope.removeDuplicates();
    }

    if (conf.currentPage.storage) {
      paStorage.loadBlobs(conf.currentPage.storage + '/', $scope.contentType, $scope.collection);
    } else {
      paStorage.loadBlobs(null, $scope.contentType, $scope.collection);
    }

    $scope.conf = conf;
    $scope.pageScope = pageScope;
  };
  /*$scope.removeDuplicates = function(){
  	var uniq=[];
  	_.each($scope.collection.resources, function(res){
  		if (!$scope.find(uniq,res)){
  			uniq.push(res);
  		}
  	});
  	$scope.collection.resources = uniq;
  }
     $scope.find = function(resources,blob){
     	return resources.some(function(res){
  		return res.name && blob.name && res.name==blob.name;
  	});
     };*/

  $scope.selResource = function(res){
    pageScope.r = res;
  }

  $scope.loadBlobs = function(prefix){
    paStorage.loadBlobs(prefix, $scope.contentType, $scope.collection)
  }


  $scope.toggle = function (res) {
    if (res.active) {
      $scope.collection.resources.push(res);
      /*$scope.notSelected = _.filter($scope.notSelected, function(r){
      return r.name!=res.name;
      });*/
    } else {
      /*$scope.notSelected.push(res);*/
      var b = _.find($scope.blobs, function (b) {
        return b.name == res.name;
      });

      if (b) {
        b.active = false;
      }

      $scope.collection.resources = _.filter($scope.collection.resources, function (r) {
        return r.name != res.name;
      });
    }
  };

  $scope.newCard = function () {
    $scope.collection.resources.push({
      type: 'card',
      front: {},
      back: {}
    });
  };

  $scope.addImage = function (_bean) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.card.html?8e95b513fbe003e2',
      controller: 'popupCardCtrl',
      size: 'lg',
      resolve: {
        bean: function bean() {
          _bean.type = 'img';
          return _bean;
        },
        blobs: function blobs() {
          return $scope.blobs;
        }
      }
    });
    modalInstance.result.then(function (coll) {});
  };

  $scope.addText = function (_bean2) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.card.html?8e95b513fbe003e2',
      controller: 'popupCardCtrl',
      size: 'lg',
      resolve: {
        bean: function bean() {
          _bean2.type = 'text';
          return _bean2;
        },
        blobs: function blobs() {
          return $scope.blobs;
        }
      }
    });
    modalInstance.result.then(function (coll) {});
  };

  $scope.editBean = function (_bean3) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.card.html?8e95b513fbe003e2',
      controller: 'popupCardCtrl',
      size: 'lg',
      resolve: {
        bean: function bean() {
          return _bean3;
        },
        blobs: function blobs() {
          return $scope.blobs;
        }
      }
    });
    modalInstance.result.then(function (coll) {});
  };

  $scope.removeCard = function (i) {
    $scope.collection.resources.splice(i, 1);
  };

  $scope.init();
}

;
"use strict";

paCollectionsController.$inject = ["$scope", "$rootScope", "$state", "$http", "paCache", "paMenu", "config"];
angular.module('paApp').controller('paCollectionsController', paCollectionsController);

function paCollectionsController($scope, $rootScope, $state, $http, paCache, paMenu, config) {

    $scope.init = function(){
        $scope.search={};
    }
    $scope.searchCollections = function(){
        paMenu.seachCollectionsByName($scope.search.name).then(function(results){
            $scope.results = results;
        });
    }
    $scope.settings = function(coll){
        var conf = paCache.getConf();
        conf.currentPage = coll.page;
        conf.currentContent = null
        conf.currentFolder = coll.page.folder;
        conf.currentMode = 'P';
        $http.get(config.apiUrl + '/ws/pageConf/' + $rootScope.user.channel + '/' + conf.currentPage._id).then(function (resp) {
            if (resp.data){
                var data = paCache.getData();
                data.selCollections = resp.data;
            }
            var options={
                selected: coll._id
            };
            $state.transitionTo("admin", {
                "options": options
            });
        });
    }
    $scope.init();
};
"use strict";

paConfirmCtrl.$inject = ["$scope", "$uibModalInstance", "message"];
angular.module('paApp').controller('paConfirmCtrl', paConfirmCtrl);

function paConfirmCtrl($scope, $uibModalInstance, message) {

  $scope.message = message;
  
  $scope.ok = function () {
    $uibModalInstance.close();
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
};
"use strict";

controlPanelCtrl.$inject = ["$scope", "$http", "$state", "$stateParams", "$uibModal", "$rootScope", "ngAudio", "paService", "paCache", "paSocket", "paAcl", "paStyle", "config", "paIntro"];
angular.module('paApp').controller('controlPanelCtrl', controlPanelCtrl);

function controlPanelCtrl($scope, $http, $state, $stateParams, $uibModal, $rootScope, ngAudio, paService, paCache, paSocket, paAcl, paStyle, config, paIntro) {

  var conf = paCache.getConf();

  $scope.init = function () {
    $scope.data = paCache.getData();
    $scope.conf = paCache.getConf();
    $scope.showHelp = config.helpBaseUrl;

    if (!$scope.size) {
      $scope.size = {
        min: 1,
        max: 100,
        step: 1
      };
    }

    if (!$scope.size2) {
      $scope.size2 = {
        min: 1,
        max: 100,
        step: 1
      };
    }

    if (!$scope.text) {
      $scope.text = {
        min: 1,
        max: 10,
        step: 0.2
      };
    }

    $scope.data.timerValue = 90;
    $scope.data.timerValues = [30,45,60,90,120];
    $scope.stopwatch = ngAudio.load(config.storageBaseUrl+'/img/controlpanel/Gong%20low.mp3');
    if ($scope.stopwatch.error){
      throw new Error('error loading audio');
    }

    $scope.getRecs();
    $scope.isFolderAdmin = ($rootScope.user.role=='E' && conf.currentFolder.isAdmin);
    getFeeds();
    getCorrections();
    getPointers();

    if ($rootScope.admin){
      // load audio collection here.
      var folder;
      if (conf.currentMode=='W'){
        var folder = _.find(conf.myFolders, function(folder){
          return folder._id==conf.currentPage.folder;
        });
      } else {
        folder = conf.currentFolder;
      }
      paService.loadAudioCollections(folder);
    }
  };

  function getFeeds() {
    $http.get(config.apiUrl + '/ws/feeds/F').then(function (result) {
      $scope.feeds = result.data;
    });
  }

  function getCorrections() {
    $http.get(config.apiUrl + '/ws/feeds/C').then(function (result) {
      $scope.corrections = result.data;
    });
  }

  $scope.setAction = function (value) {
    paSocket.emit('var', {
      "var": 'action',
      val: value
    });
  };

  $scope.setTab = function (val) {
    $scope.tab == val ? $scope.tab = undefined : $scope.tab = val;
  };

  $scope.settings = function () {
    $state.transitionTo("admin", {
      "options": $scope.options
    });
  };

  $scope.capture = function () {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.capture.html?45bd820bed720625',
      controller: 'paCaptureCtrl',
      size: 'lg'
    });
  };

  $scope.playAudio = function (sel) {
    paSocket.emit("play-track", {
      play: sel.i
    });
  };

  $scope.pauseAudio = function (sel) {
    paSocket.emit("play-track", {
      pause: sel.i
    });
  };

  $scope.stop = function (sel) {
    paSocket.emit("play-track", {
      stop: sel.i
    });
  };

  $scope.setProgress = function (sel) {
    paSocket.emit("play-track", {
      track: sel.i,
      progress: sel.audio.progress
    });
  };

  $scope.save = function (data) {
    $http.post(config.apiUrl + '/ws/saveScreenshot', data, {
      transformRequest: angular.identity,
      headers: {
        'Content-Type': undefined
      }
    }).then(function (resp) {
      $scope.popup(resp.data);
    });
  };

  $scope.setRatio = function () {
    paService.saveParam('ratio', Number($scope.data.ratio));
    paSocket.emit("ratio", Number($scope.data.ratio));
  };

  $scope.setSize = function () {
    paService.saveParam('size', $scope.data.size);
    paSocket.emit("size", $scope.data.size);
  };

  $scope.setSize2 = function () {
    paService.saveParam('size2', $scope.data.size2);
    paSocket.emit("size2", $scope.data.size2);
  };

  $scope.saveSystemParams = function() {
    if ($scope.data.size) {
      paService.saveParam('size', $scope.data.size, true);
    }
    if ($scope.data.size2) {
      paService.saveParam('size2', $scope.data.size2, true);
    }
    if ($scope.data.textsize) {
      paService.saveParam('textsize', $scope.data.textsize, true);
    }
    if ($scope.data.textsize2) {
      paService.saveParam('textsize2', $scope.data.textsize2, true);
    }
  };

  $scope.clear = function () {
    paSocket.emit("clear", true);
  };

  $scope.hide = function () {
    paSocket.emit("hide", !$scope.data.hide);
  };

  $scope.flag = function () {
    paSocket.emit("toggle", {
      src: config.storageBaseUrl+'/img/controlpanel/flag3.jpg'
    });
  };

  $scope.correction = function (c) {
    paSocket.emit("feed", {
      src: c.src,
      audio: c.audio,
      timeout: c.timeout,
      "class": 'notify',
      align: 'align-items-start'
    });
  };

  $scope.feed = function (f) {
    paSocket.emit("feed", {
      src: f.src,
      audio: f.audio,
      timeout: f.timeout,
      "class": 'feed',
      align: 'align-items-center'
    });
  };

  $scope.record = function () {
    if (!$scope.data.rec) {
      var conf = paCache.getConf();
      var rec = {
        name: $scope.data.recName,
        page: conf.currentPage._id,
        teacher: $rootScope.user.teacher
      };
      $http.post(config.apiUrl + '/ws/rec/save', rec).then(function (resp) {
        $scope.data.rec = resp.data;
        $scope.tab = undefined;
      });
    }
  };

  $scope.stopRec = function () {
    $scope.data.rec = false;
  };

  $scope.getRecs = function () {
    var conf = paCache.getConf();
    $http.get(config.apiUrl + '/ws/rec/' + conf.currentPage._id + '/' + $rootScope.user.channel + '/find').then(function (resp) {
      var data = paCache.getData();
      data.recs = resp.data;
    });
  };

  $scope.playEvents = function (rec) {
    var data = paCache.getData();
    $http.get(config.apiUrl + '/ws/event/' + rec._id + '/find').then(function (resp) {
      _.each(resp.data, function (msg) {
        paSocket.emit(msg.name, msg.data);
      });
    });
  };

  $scope.removeRec = function (rec) {
    var data = paCache.getData();
    $http.post(config.apiUrl + '/ws/event/' + rec._id + '/remove').then(function (resp) {
      $scope.getRecs();
    });
  };

  $scope.setTextSize = function () {
    paService.saveParam('textsize', $scope.data.textsize);
    paSocket.emit("textsize", $scope.data.textsize);
  };

  $scope.setTextSize2 = function () {
    paService.saveParam('textsize2', $scope.data.textsize2);
    paSocket.emit("textsize2", $scope.data.textsize2);
  };

  $scope.selectMark = function (mark) {
    paSocket.emit("var", {
      "var": 'mark',
      val: mark
    });
  };

  $scope.popupComment = function () {
    var conf = paCache.getConf();
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.comment.html?67be8b7aadb235c1',
      controller: 'paCommentCtrl',
      resolve: {
        comment: function comment() {
          return undefined;
        }
      }
    });
  };

  $scope.popupBookmark = function () {
    var conf = paCache.getConf();
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.bookmark.html?47791d5f4c5b41d3',
      controller: 'paBookmarkCtrl',
      resolve: {
        name: function name() {
          return conf.currentMode == 'P' ? conf.currentPage.name : conf.currentContent.name+' ('+conf.currentPage.name+')';
        }
      }
    });
  };

  $scope.popupHomework = function () {
    var conf = paCache.getConf();
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.homework.html?67843dda9d78d032',
      controller: 'popupHomeworkCtrl',
      resolve: {
        homework: function(){
            return {
                teacher: $rootScope.user.channel,
                content: conf.currentContent._id,
                done: false,
                closed: false
            }
        },
        options: function(){
          return {
              students: _.map(conf.room.subscriptions,'student')
          }
      }
}

    });
  };

  $scope.popupBook = function () {
    var conf = paCache.getConf();
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.book.html?ddb26d8ea4918e35',
      controller: 'paBookCtrl'
    });
  };

  $scope.displayTimer = function () {
    var data = paCache.getData();
    paSocket.emit('var', {
      'var': 'displayTimer',
      'val': !data.displayTimer
    });
  };

  $scope.displayCountdown = function () {
    var data = paCache.getData();
    paSocket.emit('var', {
      'var': 'displayCountdown',
      'val': !data.displayCountdown
    });
  };

  $scope.displayCounter = function () {
    var data = paCache.getData();
    paSocket.emit('var', {
      'var': 'displayCounter',
      'val': !data.displayCounter
    });
  };

  $scope.displayBattery = function (user) {
    var data = paCache.getData();
    paSocket.emit('var', {
      'var': 'displayBattery',
      'val': !data.displayBattery
    });
  };

  $scope.batteryInc = function (user) {
    if (user.params.battery < 6) {
      paSocket.emit('battery', {
        user: user.id,
        value: user.params.battery + 1
      });
    }
  };

  $scope.batteryDec = function (user) {
    if (user.params.battery > 0) {
      paSocket.emit('battery', {
        user: user.id,
        value: user.params.battery - 1
      });
    }
  };

  $scope.toggleCorrections = function () {
    $scope.displayCorrections = !$scope.displayCorrections;
  };

  $scope.toggleFeeds = function () {
    $scope.displayFeeds = !$scope.displayFeeds;
  };

  $scope.startTimer = function () {
    paSocket.emit('timer', 'timer-start');
    $scope.timerRunning = 1;
  };

  $scope.stopTimer = function () {
    paSocket.emit('timer', 'timer-stop');
    $scope.timerRunning = 0;
    $scope.progressBar=0;
  };

  $scope.pauseTimer = function () {
    paSocket.emit('timer', 'timer-clear');
    $scope.timerRunning = 2;
  };

  $scope.resumeTimer = function () {
    paSocket.emit('timer', 'timer-resume');
    $scope.timerRunning = 1;
  };

  paSocket.on('timer', function (msg) {
    $scope.$broadcast(msg);
  });

  $scope.$on('timer-tick',function(e, val) {
    var data = paCache.getData();
    var sec = Math.floor(val.millis / 1000);
    var perc = sec*100/data.timerValue;
    $scope.progressbar = 100-perc;
    if (data.timerValue>=sec){
      $scope.timeLeft = data.timerValue-sec;
      if ($scope.timeLeft == 0) {
        $scope.stopwatch.play();
        $scope.$broadcast('timer-stop');
      }
    }
  });

  $scope.$on('timer-stopped',function(e, val) {
    $scope.progressbar = 100;
    $scope.timerRunning = 0;
  });

  $scope.setCounter = function (type,color) {
    paSocket.emit('var', {
      "var": 'counters',
      val: {
        type: type,
        color: color
      }
    });
  };
  $scope.setTarget = function (target) {
    paSocket.emit('var', {
      "var": 'counterTarget',
      val: target
    });
  };

  $scope.increment = function (name) {
    var data = paCache.getData();
    var c = data.counters[name] || 0;
    paSocket.emit('count', {
      user: name,
      counter: c + 1
    });
  };

  $scope.decrement = function (name) {
    var data = paCache.getData();
    var c = data.counters[name] || 0;
    paSocket.emit('count', {
      user: name,
      counter: c - 1
    });
  };

  $scope.range = function (name) {
    var data = paCache.getData();
    return _.range(data.counters[name]);
  };

  $scope.displayGamepad = function() {
    var data = paCache.getData();
    paSocket.emit('var', {
      'var': 'gamepad',
      'val': !data.gamepad
    });
  }

  $scope.playPickUpNumber = function () {
    paSocket.emit('var', {
      'var': 'game',
      'val': 'pickUpNumber'
    });
  };

  $scope.playPaperStoneScissors = function () {
    paSocket.emit('var', {
      'var': 'game',
      'val': 'paperStoneScissors'
    });
  };

  $scope.playDiceForSentence = function () {
    paSocket.emit('var', {
      'var': 'game',
      'val': 'diceForSentence'
    });
  };

  $scope.playOneOrTwo = function () {
    paSocket.emit('var', {
      'var': 'game',
      'val': 'oneOrTwo'
    });
  };

  $scope.pickUpNumberStart = function () {
    var shuffle = _.shuffle([config.storageBaseUrl+"/img/dice/1.png", config.storageBaseUrl+"/img/dice/2.png", config.storageBaseUrl+"/img/dice/3.png", config.storageBaseUrl+"/img/dice/4.png", config.storageBaseUrl+"/img/dice/5.png", config.storageBaseUrl+"/img/dice/6.png"]);

    paSocket.emit('exec', {
      method: 'pickUpNumber',
      arg: shuffle
    });
  };

  $scope.oneOrTwoStart = function () {
    paSocket.emit('exec', {
      method: 'oneOrTwo',
      arg: _.random(4,8)
    });
  };

  $scope.paperStoneScissorsStart = function () {
    var shuffle = _.shuffle([config.storageBaseUrl+"/img/paper%20stone/%20paper%202.png", config.storageBaseUrl+"/img/paper%20stone/scissors.jpg", config.storageBaseUrl+"/img/paper%20stone/stone.jpeg"]);

    paSocket.emit('exec', {
      method: 'paperStoneScissors',
      arg: shuffle.concat(shuffle)
    });
  };

  $scope.diceForSentenceStart = function () {
    var shuffle = _.shuffle([config.storageBaseUrl+"/cdn/controlpanel/diceForSentence/%2B.gif", config.storageBaseUrl+"/cdn/controlpanel/diceForSentence/-.gif", config.storageBaseUrl+"/cdn/controlpanel/diceForSentence/q.gif"]);

    paSocket.emit('exec', {
      method: 'diceForSentence',
      arg: shuffle.concat(shuffle)
    });
  };

  $scope.countdown = function () {
    var data = paCache.getData();
    paSocket.emit('var', {
      'var': 'countdown',
      'val': !data.countdown
    });
  };

  $scope.countdownStart = function () {
    paSocket.emit('exec', 'countdown');
  };

  $scope.setTimerValue = function (value) {
    paSocket.emit('var', {
      'var': 'timerValue',
      'val': Number(value)
    });
  };

  $scope.popupHelp = function(){
    $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.help.html?d0068ab76e02cae9',
      controller: 'paHelpCtrl',
      size: 'lg'
    });
  }

  var getPointers = function(){
    $scope.pointers=[];
    $scope.pointers.push({src:'https://pikimoni.blob.core.windows.net/img/controlpanel/pointers/arrow.gif'});
    $scope.pointers.push({src:'https://pikimoni.blob.core.windows.net/img/controlpanel/pointers/CURSOR-pink.gif'});
    $scope.pointers.push({src:'https://pikimoni.blob.core.windows.net/img/controlpanel/pointers/pointer2.gif'});
    $scope.pointers.push({src:'https://pikimoni.blob.core.windows.net/img/controlpanel/pointers/pointing-with-pointer.gif'});
    $scope.pointers.push({src:'https://pikimoni.blob.core.windows.net/img/controlpanel/pointers/right-arrow.gif'});
  }
  $scope.togglePointers = function () {
    var data = paCache.getData();
    if (!data.enableJcrop){
      paSocket.emit('var', {
        'var': 'enableJcrop',
        'val': false
      });
    }
    paSocket.emit('var', {
      'var': 'displayPointers',
      'val': !data.displayPointers
    });
  };
  $scope.toggleCrop = function(){
    var data = paCache.getData();
    if (data.displayPointers){
      paSocket.emit('var', {
        'var': 'displayPointers',
        'val': false
      });
    }
    paSocket.emit('var', {
      'var': 'enableJcrop',
      'val': !data.enableJcrop
    });
  }
  $scope.undo = function (s, t) {
    paSocket.emit("undo-drag", {
      source: s,
      target: t
    });
  };

  $scope.popupAudioCollection = function(coll){
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.songs.html?9c4e3717e7694b46',
      controller: 'paSongsCtrl',
      size: 'lg',
      resolve: {
        coll: function(){
          return coll;
        }
      }
    });
    modalInstance.result.then(function(sel){
      var data = paCache.getData();
      data.sel=sel;
    })
   
  }
  $scope.init();
  angular.element(document).ready(function() {
    paIntro.pageTour('controlPanel')
  })
}
"use strict";

paCopyPageCtrl.$inject = ["$scope", "$rootScope", "$state", "$http", "paCache", "paService", "paMenu", "config"];
angular.module('paApp').controller('paCopyPageCtrl', paCopyPageCtrl);

function paCopyPageCtrl($scope, $rootScope, $state, $http, paCache, paService, paMenu, config) {

    var conf = paCache.getConf();
    $scope.conf = conf;

    $scope.init=function(){
        paMenu.loadFolders();
    }
    
    $scope.loadPages = function(folder){
        paService.loadPages(folder);
    }

    $scope.copyPage = function(page){
        var newPage = {
            name:page.name + ' - Copy',
            type:page.type,
            folder:conf.currentFolder._id,
            template:page.template,
            params:page.params,
            collections:page.collections
        };
        $state.transitionTo('edit-page', {page: newPage});
    }

    $scope.init();
}
"use strict";

paCtrl.$inject = ["$scope", "$rootScope", "$state", "$http", "$uibModal", "paSocket", "paAcl", "paService", "paCache", "$document", "toaster", "config"];
angular.module('paApp').controller('paCtrl', paCtrl);

function paCtrl($scope, $rootScope, $state, $http, $uibModal, paSocket, paAcl, paService, paCache, $document, toaster, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.reload = function () {
    paSocket.emit("reload");
  };

  $scope.setHome = function () {
    paSocket.emit("page message", {
      code: 'dashboard'
    });
  };

  $scope.setWall = function () {
    paSocket.emit("page message", {
      code: 'wall'
    });
  };

  $scope.setPage = function (page) {
    var conf = paCache.getConf();
    var f = conf.currentFolder;
    if (!f){
      f = _.find(conf.myFolders, function(f){
        return f._id==page.folder;
      })
    }
    if (f.isExpired) {
      toaster.pop('error', "Access denied", "Subscription for " + f.name + " has expired. Go on payment to renrew the subscription.");
    } else {
      var t=page.template;
      if(!t.name){
        t = _.find(conf.templates,function(template){
          return template._id==t;
        })
      }
      paSocket.emit("page message", {code: t.name, page: page});
    }
  };

  $scope.setContent = function (content) {
    var conf = paCache.getConf();
    var f = conf.currentFolder;
    if (!f){
      f = _.find(conf.myFolders, function(f){
        return f._id==content.page.folder;
      })
    }
    if (f.isExpired && !content.free) {
      toaster.pop('error', "Access denied", "Subscription for " + f.name + " has expired. Go on payment to renrew the subscription.");
    } else {
      //paService.logContent(content);
      var t=content.page.template;
      if(!t.name){
        t = _.find(conf.templates,function(template){
          return template._id==t;
        })
      }
      paSocket.emit("content message", {code: t.name, content: content});
    }
  };

  $scope.setTab = function (i) {
    paSocket.emit('tab', i);
  };

  $scope.adminSelectImage = function (i) {
    if ($scope.admin) {
      paSocket.emit("img message", {_id: i});
    }
  };

  $scope.selectImage = function (i) {
    paSocket.emit("img message", {_id: i});
  };

  $scope.next = function () {
    var data = paCache.getData();
    paSocket.emit("img message", {_id: data.selectedImage + 1});
  };

  $scope.selectNextImage = function () {
    var data = paCache.getData();
    var next = (data.selectedImage + 1) % data.images.length;
    paSocket.emit("img message", {_id: next});
  };

  $scope.selectPrevImage = function () {
    var data = paCache.getData();
    var next = (data.selectedImage - 1) % data.images.length;
    paSocket.emit("img message", {_id: next});
  };

  $scope.showImage = function (i, val) {
    paSocket.emit("show message", [i, val]);
  };

  $scope.hideImage = function (i, val) {
    paSocket.emit("hide message", [i, val]);
  };

  $scope.toggleImage = function (i) {
    var data = paCache.getData();
    var sel = data.selected[i];
    paSocket.emit("img2 message", [i, !sel]);
  };

  $scope.adminToggleImage = function (i) {
    if ($scope.admin) {
      var data = paCache.getData();
      var sel = data.selected[i];
      paSocket.emit("img2 message", [i, !sel]);
    }
  };

  $scope.tagImage = function (i, tag) {
    paSocket.emit("img2 message", [i, tag]);
  };

  $scope.emitUserParam = function (user, name, value) {
    paSocket.emit("userParam", {
      user: user.id,
      name: name,
      value: value
    });
  };

  $scope.emitMessage = function (message, value) {
    paSocket.emit(message, value);
  };

  $scope.over = function (name) {
    paSocket.emit('var', {
      "var": name,
      val: true
    });
  };

  $scope.out = function (name) {
    paSocket.emit('var', {
      "var": name,
      val: false
    });
  };

  $scope.findAudioByTitle = function (title) {
    var data = paCache.getData();
    return _.find(data.audioCollection, function (audio) {
      return audio.title == title;
    });
  };

  $scope.playByTitle = function (title) {
    paSocket.emit("audio message", {
      action: 'play',
      title: title
    });
  };

  $scope.pauseByTitle = function (title) {
    paSocket.emit("audio message", {
      action: 'pause',
      title: title
    });
  };

  $scope.stopByTitle = function (i) {
    paSocket.emit("audio message", {
      action: 'stop',
      title: title
    });
  };

  $scope.doAction = function (action, i) {
    if (action == 'select') {
      paSocket.emit('img message', {_id: i});
    } else if (action == 'remove') {
      paSocket.emit('img2 message', [i, true]);
    }
  };

  $scope.sendVar = function (name, value) {
    paSocket.emit('var', {
      "var": name,
      val: value
    });
  };

  $scope.selectColor = function (i) {
    var data = paCache.getData();
    paSocket.emit('img params', [i, {
      color: data.color
    }]);
  };

  $scope.clickMe = function (event, icon) {
    var data = paCache.getData();
    var mark = data.mark || icon || 'fa-check-circle';
    var target = angular.element("#" + event.currentTarget.id);
    paSocket.emit("click-msg", {
      id: event.currentTarget.id,
      x: event.offsetX / target.width(),
      y: event.offsetY / target.height(),
      icon: mark
    });
  };

  $scope.singleClickMe = function (event, icon) {
    if (!icon) {
      icon = 'fa-check-circle';
    }

    var target = angular.element("#" + event.currentTarget.id);
    paSocket.emit("click-msg", {
      id: event.currentTarget.id,
      x: event.offsetX / target.width(),
      y: event.offsetY / target.height(),
      icon: icon,
      single: true
    });
  };

  $scope.clearClick = function () {
    paSocket.emit("clear-click-msg", {});
  };

  $scope.initBook = function () {
    $('#bb-bookblock').bookblock({
      speed: 800,
      shadowSides: 0.8,
      shadowFlip: 0.7
    });
  };

  $scope.nextPage = function () {
    paSocket.emit("book message", "next");
  };

  $scope.prevPage = function () {
    paSocket.emit("book message", "prev");
  };

  $scope.pop = function () {
    paSocket.emit('pop message', 'pop');
  };

  $scope.undo = function (s, t) {
    paSocket.emit("undo-drag", {
      source: s,
      target: t
    });
  };

  $scope.move = function (e) {
    if ($scope.m) {
      var relX = e.offsetX - 140;
      var relY = e.offsetY - 80;
      $('mask g').attr('transform', 'translate(' + relX + ',' + relY + ')');
    }
  };

  $scope.startMove = function (e) {
    $scope.m = true;
  };

  $scope.stopMove = function (e) {
    $scope.m = false;
    paSocket.emit('binocular', {
      offsetX: e.offsetX,
      offsetY: e.offsetY
    });
  };

  $scope.selectOne = function (i, j) {
    paSocket.emit('user-selection', {
      i: i,
      j: j,
      user: $rootScope.user.username
    });
  };

  $scope.fontSize = function (elem) {
    var w = angular.element('#' + elem).width();
    return {
      'font-size': w + 'px'
    };
  };

  $scope.sendText = function (i, text) {
    if (!text){
      var data = paCache.getData();
      text = data.temp[i];
    }
    paSocket.emit('replace-text', {
      i: i,
      val: text
    });
  };

  $scope.setFolder = function (folder) {
    paCache.setCurrentMode('P');
    paCache.setCurrentFolder(folder);
    //paService.loadPages(folder);
    paService.loadContents(folder);

    $scope.popupMenu();
  };

  $scope.setWorkplan = function (workplan) {
    paCache.setCurrentMode('W');
    paCache.setCurrentFolder(workplan);
    paService.loadWorkplan(workplan);
    $scope.popupWorkplan();
  };

  $scope.setStickers = function () {

    var conf = paCache.getConf();
    $http.post('/ws/menu/findPages',{type:'S',code:'stickers'}).then(function(resp){
      var page=resp.data[0];
      var folder = page.folder;

      var res = _.find(conf.systemResources, function(res){
        return res.code==folder.code;
      });
      folder.isAdmin = res&&res.isAdmin;
      
      paCache.setCurrentMode('S');
      paCache.setCurrentFolder(folder);
      paCache.setCurrentPage(page);
      $state.go('stickers', {
        student: null,
        content: {
          type: 'P'
        }
      });
    })
  };

  $scope.popupMenu = function () {
    var modalInstance = $uibModal.open({
      animation: true,
      controller: 'sidebarCtrl',
      templateUrl: '/pa/pa.sidebar.html?288aa3c08226bcc6',
      size: 'lg'
    });
    modalInstance.result.then(function (item) {
      if (item.type == 'P') {
        $scope.setPage(item);
      } else if (item.type == 'C') {
        $scope.setContent(item);
      }
    });
  };

  $scope.popupWorkplan = function () {
    var modalInstance = $uibModal.open({
      animation: true,
      controller: 'sidebarCtrl',
      templateUrl: '/pa/popup.sidebarW.html?2e6696d3a33649fc',
      size: 'lg'
    });
    modalInstance.result.then(function (item) {
      $scope.setContent(item);
    });
  };

  $scope.selectSmile = function (i) {
    paSocket.emit("smile message", i);
  };

  $scope.distributeFromDeck = function () {
    paSocket.emit("exec", "distributeFromDeck");
  };

  $scope.updateUserText = function (user, _char, color) {
    _char.color = color;
    paSocket.emit("userParam", {
      user: user.id,
      name: 'chars',
      value: user.params.chars
    });
  };

  $scope.publishVk = function (post) {
    $scope.spinning = true;
    $http.get(config.apiUrl + '/ws/vk/album').then(function (resp) {
      if (resp.data.error) {
        $scope.auth = true;
      } else {
        $http.post(config.apiUrl + '/ws/vk/publish', {
          album: resp.data,
          post: post
        }).then(function (resp) {
          if (resp.data.error) {
            $scope.auth = true;
          } else {
            $scope.spinning = false;
            toaster.pop('success', "Success", "image published");
            /*
            wall permission not allowed: https://vk.com/dev/permissions
            $http.post(config.apiUrl+'/ws/vk/post',{media:resp.data[0],post:post}).then(function(resp){
                if (resp.data.error){
                    $scope.auth=true;
                } else {
                    $scope.spinning=false;
                    toaster.pop('success', "Post", "post published");			
                }
            })
            */
          }
        });
      }
    });
  };

  $scope.playAudio = function (url) {
    paSocket.emit("play-track", {
      play: url
    });
  };

  $scope.startLine = function(i){
    paSocket.emit("json", {lineId:i,cellId:0});
  }

  $scope.getSelectionText = function () {
    if (window.getSelection()) {
      if (window.getSelection().toString()) {
        // text selection
        var range = window.getSelection().getRangeAt(0);
        var s = range.startContainer.parentElement.id;
        var e = range.endContainer.parentElement.id;
        paSocket.emit('text', {
          start: s,
          end: e
        });
      }
    }
  };

  $scope.setSidebarTab = function(tab) {
    if (tab==1){
      paCache.setSidebarTab(1);
    } else {
      paSocket.emit('conf', {
        "var": 'sidebar',
        val: {
          tab:tab
        }
      });
    }
  }
}
"use strict";

dashboardController.$inject = ["$scope", "$rootScope", "$http", "$window", "$location", "$uibModal", "$log", "$state", "$stateParams", "paSocket", "paCache", "paService", "paChannel", "paAcl", "paMenu", "paHomework", "paSubscription", "paTeacher", "toaster", "config", "paIntro"];
angular.module('paApp').controller('dashboardController', dashboardController);

function dashboardController($scope, $rootScope, $http, $window, $location, $uibModal, $log, $state, $stateParams, paSocket, paCache, paService, paChannel, paAcl, paMenu, paHomework, paSubscription, paTeacher, toaster, config, paIntro) {

  var pageScope = paCache.initPageScope();

  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    $scope.conf = paCache.getConf();
    $scope.data = paCache.getData();
    $scope.pageScope = pageScope;

    if ($scope.conf.channel && $scope.conf.channel.open) {
      paCache.setSidebarTab(2);
    } else {
      paCache.setSidebarTab(1);
    }

    if ($state.current.name == 'select-student') {
      // teacher as student
      paMenu.loadFolders();
      $scope.selectStudent($state.params.id);
      paHomework.loadHomeworks($state.params.id);

    } else if ($rootScope.user.role=='T' || $rootScope.user.role=='E') {
      // teacher's login
      $scope.student = null;
      $http.get(config.apiUrl + '/ws/findTeacher/' + $rootScope.user.teacher).then(function (resp) {
        $scope.conf.teacher = resp.data;
        $scope.conf.teacher.hasFull=($scope.conf.teacher.subscriptionPlan=='full'||($scope.conf.teacher.organization && $scope.conf.teacher.organization.subscriptionPlan=='enterprise'));
        if(!$scope.conf.teacher.email){
          toaster.pop('warning', "Edit your profile", "Insert your email address");
        }
      });

      if ($rootScope.user.role=='E'){
        paAcl.loadSystemResources();
        $scope.conf.room={
          users:[]
        };

      } else {

        paChannel.findOrCreateChannel($rootScope.user.teacher).then(function(channel){
          $scope.conf.channel = channel;
          if (channel.status==1){
            // lesson already started
            $scope.conf.channel.open=true;
          }
          $scope.conf.room={};
          paChannel.loadRoom();
          paChannel.loadValidStudents();
          paSubscription.loadPendingSubscriptions();
        });
        
        paMenu.loadMyFolders($rootScope.user.teacher);
        paService.loadWorkplans();
        paAcl.loadPermissions();
      }

    } else if ($rootScope.user.role=='S') {
      // student's login
      paMenu.loadFolders();
      $scope.selectStudent($rootScope.user.student);
      
      if($rootScope.user.channel){ 
        // user subscribed classroom
        $http.get(config.apiUrl + '/ws/findOpenOrNewChannel/teachers/' + $rootScope.user.channel).then(function (resp) {
          if (resp.data){
            // lesson already started
            $scope.conf.channel = resp.data;
            $scope.conf.channel.open = (resp.data.status==1);

            $scope.conf.room={};
            paChannel.loadRoom();
    
          }
        });
      }
      paHomework.loadHomeworks($rootScope.user.student);

    } else if ($rootScope.user.role=='O') {
      $http.get('/ws/organizations/'+$rootScope.user.organization).then(function(resp){
        $scope.conf.organization = resp.data;
      })
      paAcl.loadPermissions();

    }

    $scope.showModal = false;
    $scope.lessons = [];
    $log.info('browser: ' + $window.navigator.userAgent);
  };

  $scope.unlockFolder = function(folder){
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.unlockFolder.html?a7b64d14d8e03a89',
      controller: 'popupUnlockFolderCtrl',
      resolve: {
        folder: function() {
          return folder;
        }
      }
    });
    modalInstance.result.then(function(subscriptions) {
      _.each(subscriptions, function(subscr){
        $http.post('/ws/folderSubscriptions',subscr)
          .then(function(resp){
            paMenu.loadMyFolders($rootScope.user.teacher);
          })
      })
    });
  }
  $scope.popupVideo = function () {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.video.html?ca1c62dc417bb90c',
      controller: 'paVideoCtrl',
      size: 'lg'
    });
    modalInstance.result.then(function () {});
  };
  $scope.resetIntro = function() {
    paIntro.resetIntro().then(function(data){
      paIntro.pageTour('dashboard-'+$rootScope.user.role);
    });
  }
  $scope.editScore = function (_unit, _folder) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/pa.score.html?80af4cd3a809992b',
      controller: 'paScoreCtrl',
      unit: _unit,
      resolve: {
        unit: function unit() {
          return _unit;
        },
        folder: function folder() {
          return _folder;
        }
      }
    });
    modalInstance.result.then(function () {
      $scope.saveScore(_unit);
    });
  };

  $scope.editLesson = function (lesson) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/pa.lesson.html?15c62ce3d85dab7b',
      controller: 'paLessonCtrl',
      resolve: {
        data: function data() {
          return {
            lesson: lesson
          };
        }
      }
    });
    modalInstance.result.then(function () {
      $scope.saveLesson(lesson);
    });
  };

  $scope.editRoom = function () {
    $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.room.html?b9d7ae9fb8f1ebea',
      controller: 'paRoomCtrl',
      size: 'lg',
      resolve: {
        subscriptions: function subscriptions() {
          return $scope.subscriptions;
        }
      }
    });
  };

  $scope.inviteLink = function() {
    $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.inviteLink.html?bfb656fd6ff05258',
      controller: 'paRoomCtrl',
      size: 'lg'
    });
  }

  $scope.startLesson = function () {
    var conf = paCache.getConf();
    paChannel.openChannel(conf.channel._id).then(function (resp) {
      //toaster.pop('success', "Start", "lesson started");
      paSocket.emit('lessonStarted', resp.data);
    });
  };

  $scope.finishLesson = function () {
    var conf = paCache.getConf();
    paSocket.emit('lessonEnded', conf.channel);
    closeChannel();
    disconnectStudents();
    clearChat();
  };

  var closeChannel = function closeChannel() {
    var conf = paCache.getConf();
    $http.post(config.apiUrl + '/ws/closeChannel/' + conf.channel._id).then(function (resp) {
      $scope.conf.channel = resp.data;
    });
  };

  var disconnectStudents = function disconnectStudents() {

    _.each($scope.conf.room.subscriptions, function(subscription){
        paChannel.saveLesson(subscription);
        paChannel.unsubscribeChannel({student:subscription.student._id});
    });

    $scope.conf.showOnlineUsers=false;
    $scope.conf.room={};
  };

  var clearChat = function(){
    $scope.conf.chat.messages=[];
    paSocket.emit('chat.open', {
      value: false
    });    
  }

  $scope.addLesson = function () {
    $http.post(config.apiUrl + '/ws/newLesson/' + $scope.student._id + '/' + $rootScope.user.teacher).then(function (resp) {
      $scope.getLessons($scope.student._id);
    });
  };

  $scope.saveLesson = function (lesson) {
    $http.post(config.apiUrl + '/ws/saveLesson', lesson).then(function (resp) {
      $scope.getLessons($scope.student._id);
    });
  };

  $scope.removeLesson = function (lesson) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
      controller: 'paConfirmCtrl',
      resolve: {
        message: function(){
          return 'Are you sure?'
        }
      }
    });
    modalInstance.result.then(function () {
      $http.get(config.apiUrl + '/ws/removeLesson/' + lesson._id).then(function (resp) {
        $scope.getLessons($scope.student._id);
      });
    });
  };

  $scope.selectCourse = function (id) {
    if (id) {
      $scope.cl = true;
      $scope.hmt = id == 'icanread';
      $scope.rh = id == 'icanread';
      $rootScope.course = id;
      $http.get(config.apiUrl + '/ws/findUnits/' + id).then(function (resp) {
        $scope.units = resp.data;
        $scope.checkUnits();
      });
    }
  };

  $scope.selectStudent = function (id) {
    if (id) {
      $scope.tab = $stateParams.tab||1;
      $scope.getStudent(id);
      $scope.getLessons(id);
      $scope.getScores(id);
      paService.loadStudentComments(id);
    } else {
      $scope.student = null;
    }
  };

  $scope.getStudent = function (id) {
    $http.get(config.apiUrl + '/ws/findStudent/' + id).then(function (resp) {
      $scope.student = resp.data;
      $scope.conf.asStudent = resp.data;
      $scope.student.coinsL = _.range(0, $scope.student.coins);
      $scope.courseSt = $scope.student.course;
      $scope.courseUn = $scope.student.course;
      $scope.getStickers(id, $scope.student.course);
      $scope.selectCourse($scope.student.course);
      $scope.loadSubscription(id);
    });
  };

  $scope.loadSubscription = function(id){
    $http.post(config.apiUrl + '/ws/findSubscription', {student: id}).then(function (resp) {
      $scope.conf.subscription = resp.data;
      paTeacher.getTeacherMirgovoritProfile(resp.data.teacher._id).then(function(profile){
        $scope.conf.subscription.teacher.mirgovoritProfile = profile;
      });
    });
  };

  $scope.popupComment = function (_comment) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.comment.html?67be8b7aadb235c1',
      controller: 'paCommentCtrl',
      resolve: {
        comment: function comment() {
          return _comment;
        }
      }
    });
    modalInstance.result.then(function () {
      paService.loadStudentComments($scope.student._id);
    });
  };

  $scope.deleteComment = function (comment) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
      controller: 'paConfirmCtrl',
      resolve: {
        message: function(){
          return 'Are you sure?'
        }
      }
    });
    modalInstance.result.then(function () {
      $http["delete"](config.apiUrl + '/ws/comments/' + comment._id).then(function (resp) {
        paService.loadStudentComments($scope.student._id);
      });
    });
  };

  $scope.addWorkplan = function () {
    var workplan = {
      teacher: $rootScope.user.channel
    };
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.workplan.html?088627e0a3487118',
      controller: 'paWorkplanCtrl',
      resolve: {
        data: function data() {
          return workplan;
        }
      }
    });
    modalInstance.result.then(function () {
      paService.loadWorkplans();
    });
  };

  $scope.editWorkplan = function (workplan) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.workplan.html?088627e0a3487118',
      controller: 'paWorkplanCtrl',
      resolve: {
        data: function data() {
          return workplan;
        }
      }
    });
    modalInstance.result.then(function () {
      paService.loadWorkplans();
    });
  };

  $scope.getLessons = function (id) {
    $http.get(config.apiUrl + '/ws/findLessonsByStudent/' + id).then(function (resp) {
      var folderMap = {};

      _.each($scope.conf.allFolders, function (folder) {
        folderMap[folder.code] = folder;
      });

      _.each(resp.data, function (lesson) {
        lesson.folder = folderMap[lesson.course];
      });

      $scope.lessons = resp.data;
    });
  };

  $scope.getStickers = function (id, course) {
    $http.get(config.apiUrl + '/ws/findStickers/' + id + '/' + course).then(function (resp) {
      $scope.stickers = resp.data;
    });
  };

  $scope.getScores = function (id) {
    $http.get(config.apiUrl + '/ws/findScores/' + id).then(function (resp) {
      $scope.scores = resp.data;
      $scope.checkUnits();
    });
  };

  $scope.checkUnits = function () {
    if ($scope.units && $scope.scores) {
      var map = {};

      for (var j = 0; j < $scope.scores.length; j++) {
        var score = $scope.scores[j];

        if (score.course == $scope.course) {
          map[score.unit] = score;
        }
      }

      for (var i = 0; i < $scope.units.length; i++) {
        var unit = $scope.units[i];

        if (map[unit.id]) {
          unit.score = map[unit.id];
        }
      }
    }
  };

  $scope.saveScore = function (unit) {
    unit.score.course = $rootScope.course;
    unit.score.student = $scope.student._id;
    unit.score.unit = unit.id;
    $http.post(config.apiUrl + '/ws/saveScore', unit.score).then(function (resp) {
      $scope.getScores($scope.student._id);
    });
  };

  $scope.addSticker = function () {
    paSocket.emit('student-id', $scope.student);
  };

  $scope.removeSticker = function (sticker) {
    $http.get(config.apiUrl + '/ws/removeSticker/' + sticker._id).then(function (resp) {
      $scope.getStickers($scope.student._id, $scope.student.course);
    });
  };

  $scope.setTab = function (i) {
    $scope.tab = i;
  };

  $scope.toggleVar = function (v) {
    paSocket.emit("toggle message", v);
  };

  $scope.togglePaid = function (lesson) {
    $http.post(config.apiUrl + '/ws/lessons/' + lesson._id + '/togglePaid').then(function (res) {
      $scope.getLessons($scope.student._id);
      $scope.getStudent($scope.student._id);
    });
  };

  $scope.addCoins = function (coins) {
    $http.post(config.apiUrl + '/ws/addCoins', {
      student: $scope.student._id,
      coins: Number(coins)
    }).then(function (res) {
      $scope.getStudent($scope.student._id);
      $("#coins").val(undefined);
    });
  };

  $scope.toggleTips = function(){
    var conf = paCache.getConf();
    $http.post('/ws/saveTeacher/'+conf.teacher._id, conf.teacher);
  }

  $scope.goto = function(state){
    $state.transitionTo(state,{organization:$rootScope.user.organization},{"reload":true});
  }

  $scope.editFolder = function(folder){
    $state.transitionTo('edit-folder',{folder:folder},{"reload":true});
  }

  $scope.subscribeChannel = function(channel){
    paChannel.subscribeChannel({channel:channel,student:$root.user.student}).then(function(student){

    })
  }

  $scope.popupTeacherProfile = function(teacher){
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.teacherProfile.html?7f31e8897293210b',
      controller: 'popupTeacherProfileCtrl',
      resolve: {
        teacher: function() {
          return teacher;
        }
      }
    });
    modalInstance.result.then(function () {
      $scope.init();
    });  
  }

  $scope.init();
  angular.element(document).ready(function() {
    paIntro.pageTour('dashboard-'+$rootScope.user.role);
  })
}
"use strict";

dominoController.$inject = ["$scope", "$rootScope", "$http", "$state", "paSocket", "paCache", "paService", "config"];
angular.module('paApp').controller('dominoController', dominoController);

function dominoController($scope, $rootScope, $http, $state, paSocket, paCache, paService, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    $scope.data = paService.init();
    var conf = paCache.getConf();
    $scope.data.players = _.map(conf.room.users, function (user) {
      return user.username;
    });
    $scope.player = $rootScope.user.username;

    if ($scope.admin) {
      if (conf.currentMode == 'P') {
        $http.get(config.apiUrl + '/ws/pageConf/' + $rootScope.user.channel + '/' + conf.currentPage._id).then(function (resp) {
          if (resp.data.img){
            loadResources(resp.data.img);
          } else if (resp.data.card){
            loadResources(resp.data.card);
          }
        });
      } else if (conf.currentContent.img){
        loadResources(conf.currentContent.img);
      } else if (conf.currentContent.card){
        loadResources(conf.currentContent.card);
      }
    }
  };

  paSocket.on('collection', function (collection) {
    var i = $scope.data.players.indexOf($scope.player);
    $scope.myCards = collection.resources.slice(i * 4, i * 4 + 4);
    $scope.resources = collection.resources.slice($scope.data.players.length * 4 + 1, collection.resources.length);
    $scope.cards = [];
  });

  $scope.getCard = function () {
    paSocket.emit('img message', {_id: $scope.player});
  };

  paSocket.on('img message', function (msg) {
    var card = $scope.resources.shift();

    if (msg._id == $scope.player) {
      $scope.myCards.push(card);
    }
  });

  $scope.playCard = function (card) {
    card.player = $scope.player;
    paSocket.emit('src message', card);
  };

  paSocket.on('src message', function (card) {
    card.push ? $scope.cards.push(card) : $scope.cards.unshift(card);

    if (card.player == $scope.player) {
      var leftCards = $scope.myCards.filter(function (c) {
        return c.id != card.id;
      });
      $scope.myCards = leftCards;
    }
  });

  $scope.undo = function (card) {
    if ($scope.admin && card.player) {
      paSocket.emit('undo', card);
    }
  };

  paSocket.on('undo', function (card) {
    var last = _.find($scope.cards, function (res) {
      return res.id == card.id;
    });

    if (last.player == $scope.player) {
      $scope.myCards.push(last);
    }

    var leftCards = $scope.cards.filter(function (c) {
      return c.id != card.id;
    });
    $scope.cards = leftCards;
  });

  var loadResources = function loadResources(code) {
    paService.findCollectionByCode(code).then(function (collection) {
      collection.resources = _.shuffle(collection.resources);
      paSocket.emit('collection', collection);
    });
  };

  $scope.init();
}

;
"use strict";

paEditContentCtrl.$inject = ["$scope", "$rootScope", "$state", "$http", "paCache", "paService", "paMenu", "config", "$uibModal"];
angular.module('paApp').controller('paEditContentCtrl', paEditContentCtrl);

function paEditContentCtrl($scope, $rootScope, $state, $http, paCache, paService, paMenu, config, $uibModal) {

    var conf = paCache.getConf();
    $scope.conf = conf;
    $scope.content = $state.params.content;

    $scope.template=$scope.content.page.template;

    $http.get('/ws/findSystemCollections/'+$scope.content.page._id).then(function(resp){
        $scope.collections = _.groupBy(resp.data, 'type');
    })

    $scope.saveContent=function(){
        $http.post('/ws/saveContent/'+$scope.content._id, $scope.content).then(
            function(result){
                $state.transitionTo('edit-folder',{folder:conf.currentFolder, forceReload:true});
            });
    }
    
    $scope.removeContent=function(){

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
            controller: 'paConfirmCtrl',
            resolve: {
              message: function(){
                return 'Are you sure?'
              }
            }
          });
          modalInstance.result.then(function () {
            $http.put('/ws/contents/'+$scope.content._id,{deleted:true}).then(
                function(result){
                    $state.transitionTo('edit-folder',{folder:conf.currentFolder, forceReload:true});
                });
          });
      
    }

}
"use strict";

paEditPageCtrl.$inject = ["$scope", "$rootScope", "$state", "$http", "paCache", "paService", "paMenu", "config", "$uibModal", "toaster"];
angular.module('paApp').controller('paEditPageCtrl', paEditPageCtrl);

function paEditPageCtrl($scope, $rootScope, $state, $http, paCache, paService, paMenu, config, $uibModal, toaster) {

    var conf = paCache.getConf();
    $scope.conf = conf;
    $scope.templates=_.values(conf.templates);

    $scope.page = $state.params.page;
    if (!$scope.page){
        // add
        $scope.page={
            folder: conf.currentFolder._id,
            template: {},
            params: {}
        }
    }
    $scope.page.type='P';

    $scope.savePage=function(){
        $http.post('/ws/menu/savePage',$scope.page).then(
            function(result){
                if (result){
                    $state.transitionTo('edit-folder',{folder:conf.currentFolder, forceReload:true});
                }
            });
    }
    
    $scope.removePage=function(){

        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
            controller: 'paConfirmCtrl',
            resolve: {
              message: function(){
                return 'Are you sure?'
              }
            }
          });
          modalInstance.result.then(function () {
            $http.get('/ws/menu/removePage/'+$scope.page._id).then(
                function(result){
                    $state.transitionTo('edit-folder',{folder:conf.currentFolder, forceReload:true});
                });
          });
      
    }

}
"use strict";

eraserController.$inject = ["$scope", "$http", "$state", "paSocket", "paService", "paCache", "config"];
angular.module('paApp').controller('eraserController', eraserController);

function eraserController($scope, $http, $state, paSocket, paService, paCache, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    $scope.data = paService.init();
  };

  $scope.showImage = function (i, val) {
    paSocket.emit("show message", [i, val]);
  };

  paSocket.on("show message", function (msg) {
    var i = msg[0];
    var val = msg[1];
    $scope.data.images[i].show = val;

    if (val) {
      $scope.initCanvas(i, '#ddd');
      $scope.setBg(i);
    }
  });

  $scope.initCanvas = function (i, fillColor) {
    var canvas = document.getElementById('c' + i);
    var ctx = canvas.getContext('2d'); // define a custom fillCircle method

    ctx.fillCircle = function (x, y, radius, fillColor) {
      this.fillStyle = fillColor;
      this.beginPath();
      this.moveTo(x, y);
      this.arc(x, y, radius, 0, Math.PI * 2, false);
      this.fill();
    };

    ctx.clearTo = function (fillColor) {
      ctx.fillStyle = fillColor;
      ctx.fillRect(0, 0, canvas.width, canvas.height);
    };

    ctx.clearTo(fillColor || "#ddd"); // bind mouse events

    canvas.onmousemove = function (e) {
      if (!canvas.isDrawing) {
        return;
      }

      var x = e.offsetX;
      var y = e.offsetY;
      var radius = 20; // or whatever

      var fillColor = '#ff0000';
      ctx.globalCompositeOperation = 'destination-out';
      ctx.fillCircle(x, y, radius, fillColor);
    };

    canvas.onmousedown = function (e) {
      canvas.isDrawing = true;
    };

    canvas.onmouseup = function (e) {
      canvas.isDrawing = false;
    };
  };

  $scope.setBg = function (i) {
    var div = angular.element('#d' + i);
    var image = $scope.data.images[i];
    div.css({
      'background': 'url(' + image.src + ')',
      'background-repeat': 'no-repeat',
      'background-size': '100%'
    });
  };

  $scope.init();
}

;
"use strict";

paFeedController.$inject = ["$scope", "$uibModal", "$state", "paFeed", "paService", "paCache", "config"];
angular.module('paApp').controller('paFeedController', paFeedController);

function paFeedController($scope, $uibModal, $state, paFeed, paService, paCache, config) {

    $scope.feed = _.clone($state.params.feed);

    $scope.saveFeed=function(feed){
        if (feed._id){
            paFeed.updateFeed(feed).then(function(resp){
                $state.go('feeds');
            });
        } else {
            paFeed.addFeed(feed).then(function(resp){
                $state.go('feeds');
            });
        }
    }

    $scope.removeFeed = function(feed){
        var modalInstance = $uibModal.open({
            animation: true,
            templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
            controller: 'paConfirmCtrl',
            resolve: {
              message: function(){
                return 'Are you sure?'
              }
            }
        });
        modalInstance.result.then(function () {
            paFeed.removeFeed(feed).then(function(resp){
                $state.go('feeds');
            });
        });

    }
};
"use strict";

paFeedsController.$inject = ["$scope", "$http", "$state", "paFeed", "paService", "paCache", "config"];
angular.module('paApp').controller('paFeedsController', paFeedsController);

function paFeedsController($scope, $http, $state, paFeed, paService, paCache, config) {

    var pageScope = paCache.getPageScope();
    $scope.pageScope = pageScope;
    $scope.type = 'F';

    var init=function(){
        paFeed.loadFeeds();
    }

    $scope.setType = function(type){
        $scope.type=type;
    }

    init();

};
"use strict";

paFolderCtrl.$inject = ["$scope", "$rootScope", "$state", "$http", "$uibModal", "paCache", "paMenu", "paService", "config"];
angular.module('paApp').controller('paFolderCtrl', paFolderCtrl);

function paFolderCtrl($scope, $rootScope, $state, $http, $uibModal, paCache, paMenu, paService, config) {

  var conf = paCache.getConf();
  conf.currentFolder = $state.params.folder;
  paCache.setCurrentMode('P');
  $scope.conf = conf;

  var res = _.find(conf.systemResources, function(res){
    return res.code==conf.currentFolder.code;
  });
  conf.currentFolder.isAdmin=res.isAdmin;

  $scope.init = function () {

    $scope.search={};
    paCache.setCurrentFolder(conf.currentFolder);
    paMenu.loadContents(conf.currentFolder, $state.params.forceReload);
    //paMenu.loadPages(conf.currentFolder, $state.params.forceReload);
  }

  $scope.setMode = function (mode) {
    paCache.setCurrentMode(mode);
    if (mode=='A' && !conf.currentFolder.audioCollections) {
      paService.loadAudioCollections(conf.currentFolder);
    }
  };


  $scope.startsWith = function (value) {
    if (value && value.name && $scope.search && $scope.search.name) {
      return value.name.toUpperCase().startsWith($scope.search.name.toUpperCase());
    } else {
      return true;
    }
  };

  $scope.sortPages = function (pages) {
    $http.post('/ws/menu/sortPages', pages).then(
      function (result) {
        conf.currentMode = 'P';
      });
  };

  $scope.addAudioCollection = function(collName){
    
    var conf = paCache.getConf();
    var audio = _.find(conf.currentFolder.pages, (page)=>{return page.type=='A'});
    if (audio) {
      var coll = {
        page: audio._id,
        folder: conf.currentFolder._id,
        type: 'audio',
        name: collName
      };
      $http.post(config.apiUrl + '/ws/saveSystemCollection', coll).then(function (resp) {
        paService.loadAudioCollections(conf.currentFolder);
      });
    }
  
  }

  $scope.editAudioCollection = function(coll){
    var conf = paCache.getConf();
    var audio = _.find(conf.currentFolder.pages, (page)=>{return page.type=='A'});
    if (audio) {
      conf.currentPage = audio;
      $http.get(config.apiUrl + '/ws/collections/' + coll._id).then(function(res){

        $state.transitionTo('edit-collection', {
          collection: res.data,
          tab: 2,
          back: 'edit-folder'
        });

      })
    }
  }

  $scope.removeAudioCollection = function(coll){
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
      controller: 'paConfirmCtrl',
      resolve: {
        message: function(){
          return 'Are you sure?'
        }
      }
    });
    modalInstance.result.then(function () {
      $http.get(config.apiUrl + '/ws/removeCollection/' + coll._id).then(function (resp) {
        paService.loadAudioCollections(conf.currentFolder);
      });
    });
    
  }

  $scope.init();
}
"use strict";

gameController.$inject = ["$scope", "$rootScope", "$http", "paSocket", "paCache", "paService", "config"];
angular.module('paApp').controller('gameController', gameController);

function gameController($scope, $rootScope, $http, paSocket, paCache, paService, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  var conf = paCache.getConf();
  var data = paCache.init();

  $scope.init = function () {
    $scope.data = data;
    $scope.data.players = _.map(conf.room.users, function (user) {
      return user.username;
    });
    $scope.player = $rootScope.user.username;

    if ($scope.admin) {
      if (conf.currentMode == 'P') {
        $http.get(config.apiUrl + '/ws/pageConf/' + $rootScope.user.channel + '/' + conf.currentPage._id).then(function (resp) {
          if (resp.data && resp.data.mixed){
            loadResources(resp.data.mixed);
          }
        });
      } else if (conf.currentContent && conf.currentContent.mixed) {
        loadResources(conf.currentContent.mixed);
      }
    }

  };

  paSocket.on('images', function (images) {
    $scope.images = images.slice($scope.data.players.length * 4, images.length);
    var i = $scope.data.players.indexOf($scope.player);
    $scope.myCards = images.slice(i * 4, i * 4 + 4);
    $scope.cache = [];
  });

  $scope.getCard = function () {
    paSocket.emit('img message', {_id: $scope.player});
  };

  paSocket.on('img message', function (msg) {
    var card = $scope.images.shift();

    if (msg._id == $scope.player) {
      $scope.myCards.push(card);
    }
  });

  $scope.playCard = function (card) {
    card.player = $scope.player;
    paSocket.emit('src message', card);
  };

  paSocket.on('src message', function (card) {
    $scope.image = card;
    $scope.cache.push(card);

    if (card.player == $scope.player) {
      var leftCards = $scope.myCards.filter(function (c) {
        return c.id != card.id;
      });
      $scope.myCards = leftCards;
    }
  });

  $scope.undo = function () {
    paSocket.emit('undo', 'undo');
  };

  paSocket.on('undo', function (msg) {
    var last = $scope.cache.pop();

    if (last.player == $scope.player) {
      $scope.myCards.push(last);
    }

    if ($scope.cache.length > 0) {
      $scope.image = $scope.cache[$scope.cache.length - 1];
    } else {
      $scope.image = "";
    }
  });

  var loadResources = function (code) {
    data.selCollections.mixed = code;

    var mutiplier=Number(conf.currentPage.params.multiplier)||7;
    paService.findCollectionByCode(code).then(function (collection) {
      var resources = [];
      _.each(collection.resources, function(res){
        for (i=0;i<mutiplier;i++){
          resources.push(_.clone(res));
        }
      })
      for (var i = 0, l = resources.length; i < l; i++) {
        resources[i].id = i;
      }
      paSocket.emit('images', _.shuffle(resources));
  
    })

  }

  $scope.init();
}

;
"use strict";

game2Controller.$inject = ["$scope", "$http", "$state", "paSocket", "paService", "paCache", "config", "toaster"];
angular.module('paApp').controller('game2Controller', game2Controller);

function game2Controller($scope, $http, $state, paSocket, paService, paCache, config, toaster) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    $scope.data = paCache.init();

    if ($scope.admin) {
      $http.get(config.apiUrl + '/ws/pageConf/' + $rootScope.user.channel + '/' + conf.currentPage._id).then(function (resp) {
        if (resp.data.img){
          paService.findCollectionByCode(resp.data.img).then(function (collection) {
            $scope.randomize(collection.resources);
          });
        } else {
          toaster.pop('warning','Warning', "No collection selected. Please select at least one collection.")
        }
      });
    }

    paService.findParams();
  };

  $scope.randomize = function (images) {
    for (var i = 0, l = images.length; i < l; i++) {
      images[i].id = i;
      images[i].rand = Math.random() * 100000;
    }

    images.sort(function (a, b) {
      return a.rand - b.rand;
    });
    paSocket.emit("images", images);
  };

  paSocket.on("images", function (images) {
    $scope.data.images = images;
  });

  $scope.adminToggleImage = function (i) {
    if ($scope.admin) {
      $scope.toggleImage(i);
    }
  };

  $scope.toggleImage = function (i) {
    var sel = $scope.data.selected[i];
    paSocket.emit("img2 message", [i, !sel]);
  };

  paSocket.on("img2 message", function (obj) {
    var i = obj[0];
    var sel = obj[1];
    paCache.setSelected(i, sel);
  });

  $scope.pop = function () {
    paSocket.emit('pop message', 'pop');
  };

  paSocket.on('pop message', function (msg) {
    if ($scope.data.images.length > 0) {
      $scope.data.images.pop();
    }
  });

  $scope.ratio = function (img) {
    return {
      'padding-bottom': img.height / img.width * 100 + '%'
    };
  };

  $scope.fontSize = function (elem) {
    var w = angular.element('#' + elem).width();
    return {
      'font-size': w + 'px'
    };
  };

  $scope.init();
}

;
"use strict";

guessNumberCtrl.$inject = ["$scope", "$state", "$rootScope", "$http", "$uibModal", "paSocket", "paService", "paCache", "config"];
angular.module('paApp').controller('guessNumberCtrl', guessNumberCtrl);

function guessNumberCtrl($scope, $state, $rootScope, $http, $uibModal, paSocket, paService, paCache, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    $scope.data = paService.init();
    $scope.numbers = _.range(1, 101);
  };

  $scope.tagImage = function (i, tag) {
    paSocket.emit("img2 message", [i, tag]);
  };

  paSocket.on("img2 message", function (obj) {
    var i = obj[0];
    var sel = obj[1];
    paCache.setSelected(i, sel);
  });
  $scope.init();
}

;
"use strict";

paIntroController.$inject = ["$scope", "$http", "$state", "paIntro", "paService", "paCache", "config"];
angular.module('paApp').controller('paIntroController', paIntroController);

function paIntroController($scope, $http, $state, paIntro, paService, paCache, config) {

  $scope.init = function(){
    $scope.step=$state.params.step;
    paIntro.getSteps().then(function(steps){
      $scope.steps=steps;
    });
  }

  $scope.saveSteps = function() {
    paIntro.saveSteps($scope.steps);
  }

  $scope.saveStep = function() {
    paIntro.saveStep($scope.step);
  }

  $scope.removeStep = function() {
    paIntro.removeStep($scope.step);
  }

  $scope.init();
};
"use strict";

jcropController.$inject = ["$scope", "$http", "$state", "paSocket", "paService", "paCache", "config"];
angular.module('paApp').controller('jcropController', jcropController);

function jcropController($scope, $http, $state, paSocket, paService, paCache, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    $scope.data = paService.init();

    if (!$scope.opacity) {
      $scope.opacity = {
        min: 0,
        max: 10,
        step: 1
      };
    }
  };

  $scope.cropImage = function (i) {
    if (i != $scope.data.selectedImage || ($scope.data.enableJcrop && !$scope.data.jcrop_api)) {
      paSocket.emit("jcrop message", i);
    }
  };


  $scope.setOpacity = function () {
    paService.saveParam('opacity', $scope.data.opacity);
    paSocket.emit("opacity", $scope.data.opacity);
  };


  $scope.init();
};
"use strict";

levelsCtrl.$inject = ["$scope", "$rootScope", "$state", "$http", "$uibModal", "paCache", "paMenu"];
angular.module('paApp').controller('levelsCtrl', levelsCtrl);

function levelsCtrl($scope, $rootScope, $state, $http, $uibModal, paCache, paMenu) {

    $scope.conf = paCache.getConf();
    console.log('levels: has full:'+$scope.conf.teacher.hasFull);

    $scope.unlockFolder = function(folder){
      $http.post('/ws/folders/'+folder._id+'/unlock').then(function(resp){
        paMenu.loadMyFolders($rootScope.user.teacher);
      })
    }

      $scope.goto = function(state){
        $state.transitionTo(state);
      }
        
}
"use strict";

navCtrl.$inject = ["$scope", "$rootScope", "$http", "$uibModal", "$window", "paCache", "paSocket", "config"];
angular.module('paApp').controller('navCtrl', navCtrl);

function navCtrl($scope, $rootScope, $http, $uibModal, $window, paCache, paSocket, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.logout = function () {
    $window.localStorage.removeItem('pa.token');
    $http.get(config.apiUrl + '/ws/logout').then(function (resp) {
      $window.location = '/';
    });
  };

  $scope.toggleSidebar = function () {
    var conf = paCache.getConf();
    var show = conf.sidebar && conf.sidebar.show;
    paSocket.emit('conf', {
      "var": 'sidebar',
      val: {
        show:!show
      }
    });
  };

  $scope.toggleLock = function (user) {
    var locked=user.params.locked=='true';
    paSocket.emit('saveUserParam', {
      user: user.id,
      name: 'locked',
      value: !locked
    });
  };

  $scope.addPoint = function (user) {
    paSocket.emit("saveUserParam", {
      user: user.id,
      name: 'points',
      value: Number(user.params.points) + 1
    });
  };

  $scope.remPoint = function (user) {
    paSocket.emit("saveUserParam", {
      user: user.id,
      name: 'points',
      value: Number(user.params.points) - 1
    });
  };

  var conf = paCache.getConf();

  this.init = function () {
    $scope.conf = conf;
    $scope.data = paCache.getData();
    $scope.feed = paCache.getFeed();
    $scope.alerts = paCache.getAlerts();
    $scope.events = paCache.getEvents();
    $scope.localization = paCache.getLocalization();

    $rootScope.$watch('user', function (oldVal, newVal) {
      if ($rootScope.user && $rootScope.user.student) {
        $http.post(config.apiUrl + '/ws/getPosts', {
          student: $rootScope.user.student,
          winner: true
        }).then(function (resp) {
          $scope.posts = resp.data;
        });
      }
    });
  };

  $scope.saveLocale = function (l) {
    if ($rootScope.user && $rootScope.user.id) {
      $http.post(config.apiUrl + '/ws/saveUser/' + $rootScope.user.id, {locale: l.code}).then(function (resp) {
        paCache.setUserLocale(resp.data.locale);
        $window.location = '/home.html';
      });
    } else {
      paCache.setUserLocale(l.code);
      $window.location = '/home.html';
    }
  };

  $scope.popupComments = function (_user) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.comments.html?4c83952bd1b46c71',
      controller: 'paCommentsCtrl',
      size: 'lg',
      resolve: {
        user: function user() {
          return _user;
        }
      }
    });
    modalInstance.result.then(function (item) {
      $scope.setContent(item);
    });
  };

  $scope.popupPrivacy = function () {
    $uibModal.open({
      animation: true,
      templateUrl: '/privacy.html',
      controller: 'conditionsCtrl',
      size: 'lg'
    });
  };

  $scope.popupConditions = function () {
    $uibModal.open({
      animation: true,
      templateUrl: '/conditions.html',
      controller: 'conditionsCtrl',
      size: 'lg'
    });
  };

  $scope.toggleVideo = function () {
    var active = conf.video && conf.video.active;
    paSocket.emit('video', {
      active: !active,
      fullscreen: false
    });
  };

  $scope.toggleFullscreen = function () {
    paSocket.emit('video', {
      active: true,
      fullscreen: !conf.video.fullscreen
    });
  };

  /*var loadOpentok = function loadOpentok() {
    $http.get(config.apiUrl + '/ws/opentokClient/' + $rootScope.user.teacher).then(function (resp) {
      $scope.opentokClient = resp.data;
    });
  };*/

  $scope.editRoom = function () {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.room.html?b9d7ae9fb8f1ebea',
      controller: 'paRoomCtrl',
      size: 'lg',
      resolve: {
        subscriptions: function subscriptions() {
          return $scope.subscriptions;
        }
      }
    });
  };

  $scope.lockAll = function(){
    var conf = paCache.getConf();
    conf.lockAll=!conf.lockAll;
    _.each(conf.room.users, function(user){
      if (user.student){
        paSocket.emit('saveUserParam', {
          user: user.id,
          name: 'locked',
          value: conf.lockAll
        });
      }
    })
  }

  $scope.popupUserParams = function (_user) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.userParams.html?4564b26df7f54d07',
      controller: 'popupUserParamsCtrl',
      size: 'lg',
      resolve: {
        user: function user() {
          return _user;
        }
      }
    });
    modalInstance.result.then(function (item) {
      $scope.setContent(item);
    });
  };

  this.init();
}
"use strict";

pictogramCtrl.$inject = ["$scope", "$rootScope", "$stateParams", "$http", "paService", "paCache", "paAcl", "toaster", "config"];
angular.module('paApp').controller('pictogramCtrl', pictogramCtrl);

function pictogramCtrl($scope, $rootScope, $stateParams, $http, paService, paCache, paAcl, toaster, config) {
  $scope.init = function () {
    $scope.type = $stateParams.type;
    $http.get(config.apiUrl + '/ws/collections/' + $stateParams.collection._id).then(function(res){
      var coll = res.data;
      coll.isSystem = !coll.teacher;
      $scope.collection = coll;

      if ($scope.type == 'text') {
          var words = paService.split($scope.collection.chars, '#');

          if (!$scope.collection.resources) {
            $scope.collection.resources = words;
          } else {
            _.each($scope.collection.resources, function (res, i) {
              res.chars = words[i].chars;
            });
          }
      }

    })

    var conf = paCache.getConf();
    $scope.isFolderAdmin = ($rootScope.user.role=='E' && conf.currentFolder.isAdmin);
  };

  $scope.setSize = function (i, e) {
    var event = window.event || e;
    var item = $scope.collection.resources[i];

    if (!item.width) {
      item.width = 10;
    }

    var delta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));

    if (delta > 0) {
      item.width++;
    } else {
      item.width--;
    }
  };

  $scope.setFontSize = function (i, e) {
    var event = window.event || e;
    var item = $scope.collection.resources[i];

    if (!item.fontSize) {
      item.fontSize = 10;
    }

    var delta = Math.max(-1, Math.min(1, event.wheelDelta || -event.detail));

    if (delta > 0) {
      item.fontSize++;
    } else {
      item.fontSize--;
    }
  };

  $scope.setPosition = function (i, e) {
    var event = window.event || e;
    var item = $scope.collection.resources[i];
    if (event.keyCode == 38) item.top++;else if (event.keyCode == 39) item.left++;else if (event.keyCode == 40) item.top--;else if (event.keyCode == 37) item.left--;
  };

  $scope.saveItems = function () {
    if ($scope.isFolderAdmin) {
      $http.post(config.apiUrl + '/ws/saveSystemCollection', $scope.collection).then(function (resp) {
        toaster.pop('success', 'Pictogram', 'pictogram saved');
      });
    } else {
      $http.post(config.apiUrl + '/ws/saveCollection', $scope.collection).then(function (resp) {
        toaster.pop('success', 'Pictogram', 'pictogram saved');
      });
    }
  };

  $scope.selectItem = function (i) {
    $scope.selected = i;
  };

  $scope.init();
}

;
"use strict";

publishCtrl.$inject = ["$scope", "$http", "$rootScope", "$state", "$uibModalInstance", "paCache", "div", "text", "time", "toaster", "config"];
angular.module('paApp').controller('publishCtrl', publishCtrl);

function publishCtrl($scope, $http, $rootScope, $state, $uibModalInstance, paCache, div, text, time, toaster, config) {
  $scope.init = function () {
    $scope.data = paCache.getData();
    $scope.getSubscriptions();
    var conf = paCache.getConf();
    $scope.post = {
      page: conf.currentPage._id,
      date: new Date(),
      teacher: conf.teacher
    };

    if (text) {
      $scope.textValue = text;
    } else if (time) {
      var e = angular.element('#' + time);
      $scope.timeValue = e.text();
    } else {
      var e = document.getElementById(div);

      if (e) {
        var options = {
          ignoreElements: function ignoreElements(element) {
            return element.className.indexOf('fa') != -1 || element.className.indexOf('bottombar') != -1;
          },
          useCORS: true
        };
        html2canvas(e, options).then(function (canvas) {
          console.log('canvas width: ' + canvas.width);
          console.log('canvas height: ' + canvas.height);
          $scope.base64 = canvas.toDataURL('image/jpeg', 0.8);
          console.log('base64 length: ' + $scope.base64.length + ' bytes');
          $scope.$apply();
        });
      }
    }
  };

  $scope.getSubscriptions = function () {
    var conf = paCache.getConf();
    $scope.data.students = _.map(conf.room.subscriptions, function (subscr) {
      return subscr.student;
    });
  };

  $scope.savePost = function () {
    $scope.post.student = _.filter($scope.data.students, 'selected');
    if ($scope.post.student.length) {
      $scope.spinning = true;
      var now = new Date();
      $http.post(config.apiUrl + '/ws/saveBlob/home', {
        folder: $scope.post.student,
        name: now.getTime(),
        data: $scope.base64
      }).then(function (resp) {
        if ($scope.base64) {
          $scope.post.image = resp.data;
        }

        if ($scope.timeValue) {
          $scope.post.timeValue = $scope.timeValue;
        }

        if ($scope.textValue) {
          $scope.post.textValue = $scope.textValue;
        }

        $http.post(config.apiUrl + '/ws/savePost', $scope.post).then(function (resp) {
          $scope.spinning = false;
          toaster.pop('success', "Post", "post published");
          $uibModalInstance.dismiss('cancel');
        });
      });
    } else {
      toaster.pop('error', "Post", "select student");
    }
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };

  $scope.init();
}

;
"use strict";

shopController.$inject = ["$scope", "$rootScope", "$state", "$http", "paSocket", "paService", "paCache", "config"];
angular.module('paApp').controller('shopController', shopController);

function shopController($scope, $rootScope, $state, $http, paSocket, paService, paCache, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    $scope.data = paService.init();
    $scope.data.selectedSmiles = {};
    $scope.smiles = [];
    $scope.data.counter = 0;

    for (var i = 0; i < 30; i++) {
      $scope.smiles.push(i);
    }
  };

  $scope.init();
}

;
"use strict";

sidebarCtrl.$inject = ["$scope", "$rootScope", "$uibModalInstance", "paCache", "paService"];
angular.module('paApp').controller('sidebarCtrl', sidebarCtrl);

function sidebarCtrl($scope, $rootScope, $uibModalInstance, paCache, paService) {
  $scope.init = function () {
    $scope.conf = paCache.getConf();

    if ($scope.conf.currentFolder.demoMode || !$rootScope.paFeatures.pages) {
      $scope.conf.currentMode = 'C';
    }
  };

  $scope.open = function (folder) {
    $scope.selected != folder.name ? $scope.selected = folder.name : $scope.selected = null;
  };

  $scope.setFolder = function (folder) {
    paCache.setCurrentFolder(folder);
    paService.loadContents(folder);
    //paService.loadPages(folder);

    if ($scope.conf.currentFolder.demoMode) {
      $scope.conf.currentMode = 'C';
    }
  };

  $scope.setWorkplan = function (workplan) {
    paCache.setCurrentFolder(workplan);
    paService.loadWorkplan(workplan);
  };

  $scope.init();

  $scope.setMode = function (mode) {
    paCache.setCurrentMode(mode);
  };

  $scope.setPage = function (page) {
    $uibModalInstance.close(page);
  };

  $scope.setContent = function (content) {
    paCache.setCurrentContent(content);
    $uibModalInstance.close(content);
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };

  $scope.startsWith = function (value) {
    if (value && value.name && $scope.search && $scope.search.name) {
      return value.name.toUpperCase().startsWith($scope.search.name.toUpperCase());
    } else {
      return true;
    }
  };
}

;
"use strict";

sizeFactorCtrl.$inject = ["$scope", "$stateParams", "$http", "config"];
angular.module('paApp').controller('sizeFactorCtrl', sizeFactorCtrl);

function sizeFactorCtrl($scope, $stateParams, $http, config) {
  $scope.init = function () {
    $scope.collection = $stateParams.collection;

    _.each($scope.collection.resources, function (resource) {
      if (!resource.sizeFactor) {
        resource.sizeFactor = 1;
      }
    });
  };

  $scope.factorMe = function (v, sizeFactor) {
    var w = sizeFactor ? v * sizeFactor : v;
    return {
      width: w + 'vw',
      position: 'relative',
      "float": 'left'
    };
  };

  $scope.saveItems = function () {
    $http.post(config.apiUrl + '/ws/saveCollection', $scope.collection);
  };

  $scope.init();
}

;
"use strict";

paSongsCtrl.$inject = ["$scope", "$uibModalInstance", "paService", "paCache", "ngAudio", "coll"];
angular.module('paApp').controller('paSongsCtrl', paSongsCtrl);

function paSongsCtrl($scope, $uibModalInstance, paService, paCache, ngAudio, coll) {

    var init = function(){
      var audioCollection = [];
      _.each(coll.resources, function (res) {
        audioCollection.push({
          title: res.title,
          i: res.src
        });
      });
      $scope.audioCollection = audioCollection;

    }

    $scope.select = function(audio){
        $uibModalInstance.close(audio);
    }

    init();
};
"use strict";

stickersController.$inject = ["$scope", "$rootScope", "$http", "$state", "$stateParams", "paSocket", "paService", "paCache", "config"];
angular.module('paApp').controller('stickersController', stickersController);

function stickersController($scope, $rootScope, $http, $state, $stateParams, paSocket, paService, paCache, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    if ($stateParams.student && $stateParams.student._id) {
      $scope.student = $stateParams.student;
    }

    $scope.data = paService.init();
  }

  $scope.selectImage = function (i) {
    paSocket.emit("img message", {_id: i});
  };

  $scope.selected = [];
  paSocket.on("img message", function (msg) {
    $scope.selected[msg._id] = !$scope.selected[msg._id];
  });

  $scope.save = function () {
    for (var i in $scope.selected) {
      if ($scope.selected[i]) {
        $http.post(config.apiUrl + '/ws/addSticker/' + $scope.student._id + '/' + $scope.student.course, {
          "src": $scope.data.images[i].src
        }).then(function (resp) {
          // force student dashboard to reload
          paSocket.emit("page message", {
            code: "dashboard"
          });
        });
      }
    }
  };

  $scope.init();
}

;
"use strict";

subscriptionsController.$inject = ["$scope", "$rootScope", "$http", "paSocket", "config"];
angular.module('paApp').controller('subscriptionsController', subscriptionsController);

function subscriptionsController($scope, $rootScope, $http, paSocket, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    $scope.getSubscriptions();
  };

  $scope.getSubscriptions = function () {
    $http.get(config.apiUrl + '/ws/findSubscriptions/' + $rootScope.user.channel).then(function (resp) {
      $scope.subscriptions = resp.data;
    });
  };

  $scope.saveSubscription = function (subscription) {
    $http.post(config.apiUrl + '/ws/saveSubscription/' + subscription._id, subscription);
  };

  $scope.init();
}

;
"use strict";

textController.$inject = ["$scope", "$http", "$state", "$rootScope", "paSocket", "paService", "paCache", "config"];
angular.module('paApp').controller('textController', textController);

function textController($scope, $http, $state, $rootScope, paSocket, paService, paCache, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    $scope.data = paService.init();
    paService.findText().then(function (data) {
      if (data) {
        $scope.chars = _.filter(data.chars, function (c) {
          return c.val != '';
        });
      }
    });
    $scope.selected = -1;
  };

  $scope.isSelected = function (i) {
    return i >= $scope.data.start && i <= $scope.data.end;
  };

  $scope.getSelectionText = function () {
    if (window.getSelection()) {
      if (window.getSelection().toString()) {
        // text selection
        var range = window.getSelection().getRangeAt(0);
        var s = range.startContainer.parentElement.id;
        var e = range.endContainer.parentElement.id;
        paSocket.emit('text', {
          start: s,
          end: e
        });
      } else {
        // click
        var b = '., ';
        var anchorNode = window.getSelection().anchorNode;

        if (b.indexOf(anchorNode.nodeValue) == -1) {
          var l = $scope.chars.length;
          var i = parseInt(anchorNode.parentElement.id);
          var e = i;

          while (e < l && $scope.chars[e + 1] && b.indexOf($scope.chars[e + 1].val) == -1) {
            e = e + 1;
          }

          var s = i;

          while (s > 0 && $scope.chars[s - 1] && b.indexOf($scope.chars[s - 1].val) == -1) {
            s = s - 1;
          }

          paSocket.emit('text', {
            start: s,
            end: e
          });
        }
      }
    }
  };

  $scope.hideText = function (bool) {
    paSocket.emit('var', {
      'var': 'hideText',
      'val': bool
    });
  };

  $scope.init();
}

;
"use strict";

textEditorController.$inject = ["$scope", "$http", "$state", "$stateParams", "$uibModal", "$rootScope", "config"];
angular.module('paApp').controller('textEditorController', textEditorController);

function textEditorController($scope, $http, $state, $stateParams, $uibModal, $rootScope, config) {
  $scope.init = function () {
    $scope.text=$scope.paText;
    $scope.editable = false;
    $scope.fontFamilies = ['Segoe UI', 'Georgia', 'Palatino Linotype', 'Book Antiqua', 'Times New Roman', 'Arial', 'Helvetica', 'Arial Black', 'Impact', 'Lucida Sans Unicode', 'Tahoma', 'Verdana', 'Courier New', 'Lucida Console', 'Sans-serif', 'Comic Sans MS', 'initial'];
  };

  $scope.getSelectionText = function () {
    if (window.getSelection().toString()) {
      // text selection
      var range = window.getSelection().getRangeAt(0);
      $scope.start = parseInt(range.startContainer.parentElement.id);
      $scope.end = parseInt(range.endContainer.parentElement.id);
    }
  };

  $scope.clearSelection = function () {
    $scope.start = undefined;
    $scope.end = undefined;
    window.getSelection().removeAllRanges();
  };

  $scope.applyFontFamily = function (family) {
    for (var i = $scope.start; i <= $scope.end; i++) {
      $scope.text.chars[i].fontFamily = family;
    }

    $scope.clearSelection();
  };

  $scope.applyColor = function (style) {
    for (var i = $scope.start; i <= $scope.end; i++) {
      $scope.text.chars[i].color = style;
    }

    $scope.clearSelection();
  };

  $scope.applyWeight = function (style) {
    for (var i = $scope.start; i <= $scope.end; i++) {
      $scope.text.chars[i].weight = style;
    }

    $scope.clearSelection();
  };

  $scope.applySize = function (style) {
    for (var i = $scope.start; i <= $scope.end; i++) {
      $scope.text.chars[i].size = style;
    }

    $scope.clearSelection();
  };

  $scope.clearStyle = function () {
    for (var i = $scope.start; i <= $scope.end; i++) {
      $scope.text.chars[i].color = null;
      $scope.text.chars[i].weight = null;
      $scope.text.chars[i].size = null;
      $scope.text.chars[i].fontFamily = null;
    }

    $scope.clearSelection();
  };

  $scope.init();
}

;
"use strict";

paWebinarCtrl.$inject = ["$scope", "$rootScope", "$uibModal", "webinarService", "paCache", "config"];
angular.module('paApp').controller('paWebinarCtrl', paWebinarCtrl);

function paWebinarCtrl($scope, $rootScope, $uibModal, webinarService, paCache, config) {

    var pageScope = paCache.initPageScope();

    $scope.init = function init() {
        $scope.pageScope = pageScope;
        webinarService.loadUpcomingWebinar($rootScope.user.teacher);
    };

  $scope.removeWebinarSubscription = function(subscr){
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
      controller: 'paConfirmCtrl',
      resolve: {
        message: function(){
          return 'Вы уверены? Отказавшись от участия в вебинаре, Вы будете изучать платформу САМОСТОЯТЕЛЬНО по вебинарам в записи?'
        }
      }
    });
    modalInstance.result.then(function () {
      webinarService.removeSubscription(subscr).then(function(subscr){
        webinarService.loadUpcomingWebinar();
      });
    });
  }

  $scope.editWebinarSubscription = function(subscr){
    $uibModal.open({
      animation: true,
      templateUrl: '/pa/popup.webinarSubscription.html?2f31c0dd7e70f3b7',
      controller: 'webinarSubscriptionCtrl',
      size: 'lg',
      resolve : {
        webinarSubscription : function(){
          return subscr;
        }
      }
    });
  }

  $scope.init();
}
"use strict";

paController.$inject = ["$scope", "$rootScope", "$http", "paSocket", "paService", "paCache", "paStyle", "config"];
angular.module('paApp').controller('paController', paController);

function paController($scope, $rootScope, $http, paSocket, paService, paCache, paStyle, config) {
  $scope.$on('$destroy', function (event) {
    paService.destroy();
  });

  $scope.init = function () {
    $scope.data = paService.init();
    $scope.conf = paCache.getConf();
    if ($scope.conf.currentMode == 'H'){
      var student=$rootScope.user.student||$scope.conf.asStudent._id;
      $http.get('/ws/rec/contents/'+$scope.conf.currentContent._id+'/students/'+student).then(function(resp){
        var rec = resp.data;
        $http.get('/ws/event/'+resp.data._id+'/find').then(function(resp){
            if (resp.data){
                _.each(resp.data, function (msg) {
                    paSocket.emit(msg.name, msg.data);
                });
            }
            if ($rootScope.user.role=='S'){
              $scope.data.rec = rec;
            }
        })
      })

    }
    $scope.sortableOptions = {
      'ui-floating': true,
      stop: function stop(e, ui) {
        paSocket.emit('images', $scope.data.images);
      }
    };
    $scope.sortableOptions2 = {
      'ui-floating': true,
      stop: function stop(e, ui) {
        paSocket.emit('images2', $scope.data.images2);
      }
    };
    $scope.sortableLineWords = {
      'ui-floating': true,
      stop: function stop(e, ui) {
        var i = Number(e.target.id);
        var order = _.map($scope.data.lines[i].words,'i');
        paSocket.emit('line', {i:i, order:order});
      }
    };
    paStyle.loadPageStyles();
  };

  $scope.init();
}
"use strict";

paPaymentsCtrl.$inject = ["$scope", "$rootScope", "$http", "$window", "paCache", "config"];
angular.module('paApp').controller('paPaymentsCtrl', paPaymentsCtrl);

function paPaymentsCtrl($scope, $rootScope, $http, $window, paCache, config) {
  $scope.init = function init() {
    $scope.findPayments();
  };

  $scope.findPayments = function findPayments() {
    $http.get(config.apiUrl + '/ws/findPaymentRows/' + $rootScope.user.teacher).then(function (res) {
      $scope.rows = res.data;
    });
  };

  $scope.init();
}
"use strict";

popupCtrl.$inject = ["$scope", "$uibModal"];
angular.module('paApp').controller('popupCtrl', popupCtrl);

function popupCtrl($scope, $uibModal) {
  $scope.popup = function (res) {
    window.scrollTo(0,0);
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/pa.publish.html?f8edff017f11d780',
      controller: 'publishCtrl',
      size: 'lg',
      resolve: {
        div: function div() {
          return $scope.paDiv;
        },
        text: function text() {
          return $scope.paText;
        },
        time: function time() {
          return $scope.paTime;
        }
      }
    });
  };
}
'use strict';

popupHomeworkCommentCtrl.$inject=["$scope","$rootScope","$uibModalInstance","paHomework","paCache","p"];
angular.module('paApp').controller('popupHomeworkCommentCtrl', popupHomeworkCommentCtrl);

function popupHomeworkCommentCtrl($scope, $rootScope, $uibModalInstance, paHomework, paCache, p){

    var conf = paCache.getConf();
    if (p) {
        // edit or remove
        $scope.comment = conf.currentHomework.comments[p.i];
        $scope.action = p.action;
    }

    $scope.saveComment = function(){
        paHomework.saveComment(conf.currentHomework, $scope.comment).then(function(res){
            $uibModalInstance.close(res);
        })
    }

    $scope.updateComment = function(){
        paHomework.updateComment(conf.currentHomework, p.i, $scope.comment).then(function(res){
            $uibModalInstance.close(res);
        })
    }

    $scope.removeComment = function(){
        paHomework.removeComment(conf.currentHomework, p.i).then(function(res){
            $uibModalInstance.close(res);
        })
    }

    $scope.close = function(){
        $uibModalInstance.dismiss('cancel');
    }

}
'use strict';

popupHomeworkCtrl.$inject=["$scope","$rootScope","$uibModalInstance","paHomework","paCache","homework","options", "toaster"];
angular.module('paApp').controller('popupHomeworkCtrl', popupHomeworkCtrl);

function popupHomeworkCtrl($scope, $rootScope, $uibModalInstance, paHomework, paCache, homework, options, toaster){

    var conf = paCache.getConf();
    $scope.conf = conf;
    $scope.homework = homework;
    $scope.options = options;
    $scope.pageScope = paCache.getPageScope();

    $scope.loadHomeworks = function(student){
        paHomework.loadHomeworks(student);
    }

    $scope.addToHomework = function() {
        paHomework.addHomework($scope.homework).then(function(res){
            toaster.pop('success', 'Homework', 'Task added succesfully to homeworks');
            $uibModalInstance.close();
        });
    }

    $scope.editHomework = function() {
        paHomework.editHomework($scope.homework).then(function(res){
            toaster.pop('success', 'Homework', 'Task saved succesfully to homeworks');
            $uibModalInstance.close();
        });
    }

    $scope.removeHomework = function() {
        paHomework.removeHomework($scope.homework).then(function(res){
            toaster.pop('success', 'Homework', 'Task removed succesfully from homeworks');
            $uibModalInstance.close();
        });
    }

    $scope.close = function(){
        $uibModalInstance.dismiss('cancel');
    }
}
"use strict";

popupOrgSubscriptionCtrl.$inject = ["$scope", "$uibModalInstance", "$rootScope", "subsr", "paTeacher"];
angular.module('paApp').controller('popupOrgSubscriptionCtrl', popupOrgSubscriptionCtrl);

function popupOrgSubscriptionCtrl($scope, $uibModalInstance, $rootScope, subscr, paTeacher) {
    $scope.folder = subsr.folder;

    paTeacher.getOrganizationTeachersByFolder($rootScope.user.organization, subscr.folder.id)
        .then(function(resp){
            $scope.teachers = resp.data;
        })

    $scope.select = function(teacher){
        $uibModalInstance.close({teacher:teacher});
    }

    $scope.cancel = function(){
        $uibModalInstance.dismiss();
    }

}
"use strict";

popupResourcesCtrl.$inject = ["$scope", "$rootScope", "$uibModalInstance", "paCache", "type", "resource", "$http", "$q", "googleApiConfig", "$sce"];
angular.module('paApp').controller('popupResourcesCtrl', popupResourcesCtrl);
angular.module("paApp").filter('trustThisUrl', ["$sce", function ($sce) {
  return function (val) {
    return $sce.trustAsResourceUrl(val);
  };
}]);

function popupResourcesCtrl($scope, $rootScope, $uibModalInstance, paCache, type, resource, $http, $q, googleApiConfig, $sce) {

  var conf = paCache.getConf();
  var pageScope = paCache.initPageScope();

  var init = function () {
    $scope.conf = conf;
    $scope.pageScope = pageScope;

    $scope.isFolderAdmin = ($rootScope.user.role == 'E' && conf.currentFolder.isAdmin);

    $scope.resource = resource;
    $scope.type = type;
    pageScope.r = {};
    pageScope.c = {
      resources: []
    };
    $scope.googleImages = []
    $scope.loadingGoogleImages = false;
    $scope.youtubeVideos = []
    $scope.loadingYoutubeVideos = false;

  }

  $scope.next = function () {
    $scope.resource.chars = [];
    for (var i = 0, l = pageScope.r.text.length; i < l; i++) {
      $scope.resource.chars.push({
        val: pageScope.r.text.charAt(i)
      });
    }
  };

  $scope.addText = function () {

    var chunks = pageScope.r.text.split('#');
    _.each(chunks, function (chunk) {
      chunk = chunk.trim();
      var resource = {
        chars: [],
        type: 'text'
      };
      for (var i = 0, l = chunk.length; i < l; i++) {
        resource.chars.push({
          val: chunk.charAt(i)
        });
      }
      pageScope.c.resources.push(resource);
    })

    $uibModalInstance.close(pageScope.c);
  };

  $scope.addAudio = function () {
    _.each(pageScope.c.resources, function (res) {
      res.type = 'audio';
    });
    $uibModalInstance.close(pageScope.c);
  }

  $scope.addVideo = function () {
    pageScope.r.type = 'video';
    pageScope.c.resources.push(pageScope.r);
    $uibModalInstance.close(pageScope.c);
  }

  $scope.addUrl = function () {
    pageScope.r.type = 'url';
    pageScope.c.resources.push(pageScope.r);
    $uibModalInstance.close(pageScope.c);
  }

  $scope.save = function () {
    _.extend($scope.resource, pageScope.r);
    $uibModalInstance.close($scope.resource);
  }

  $scope.addImages = function () {
    _.each(pageScope.c.resources, function (res) {
      res.type = 'img';
    });

    $uibModalInstance.close(pageScope.c);
  }

  $scope.cancel = function () {
    $uibModalInstance.dismiss();
  }

  $scope.submitQuickInsert = function () {
    $uibModalInstance.close(pageScope.text);
  }

  $scope.searchGoogleImages = function (name) {
    if (!name) {
      alert("please add name")
    } else {
      $scope.googleImages = [];
      $scope.loadingGoogleImages = true
      for (let i = 0; i < googleApiConfig.maxImagesResults / 10; i++) {
        $scope.searchEngine((i * 10), name)

      }
    }
  }
  $scope.searchEngine = function (pageNum, query) {
    $http.get(googleApiConfig.imageSearchUrl + '?key=' + googleApiConfig.projectKey + '&cx=' + googleApiConfig.cx + '&q=' + query + '&searchType=' + googleApiConfig.searchType + '&start=' + pageNum)
      .then(function (response) {
        if (response.data.searchInformation.totalResults > 0) {
          Array.prototype.push.apply($scope.googleImages, response.data.items);
          $scope.loadingGoogleImages = false;
        }
      });

  }

  $scope.setImageUrl = function (imgUrl) {
    pageScope.r.src = imgUrl;
    $scope.googleImages = [];
  }

  $scope.updateImageUrl = function (imgUrl) {
    $scope.resource.src = imgUrl;
    $scope.googleImages = [];
  }

  $scope.checkAndSearchGoogleImages = function (keyEvent, name) {
    if (keyEvent.which === 13) {
      $scope.searchGoogleImages(name);
    }
  }


  //youtube apis
  $scope.searchYoutubeVideos = function (name) {
    if (!name) {
      alert("please add name")
    } else {
      $scope.youtubeVideos = [];
      $scope.loadingYoutubeVideos = true;
      $scope.searchYoutubeEngine(name)
    }
  }
  $scope.searchYoutubeEngine = function (query) {
    $http.get(googleApiConfig.youtubeSearchUrl + '?key=' + googleApiConfig.projectKey + '&q=' + query + '&type=video&part=snippet&maxResults=' + googleApiConfig.maxYoutubeVideoResults)
      .then(function (response) {
        if (response.data.pageInfo.totalResults > 0) {
          $scope.youtubeVideos = response.data.items;
          $scope.youtubeVideos.forEach(item => item.url = "https://www.youtube.com/embed/" + item.id.videoId)
          $scope.loadingYoutubeVideos = false;
        }
      });

  }

  $scope.setVideoUrl = function (videoObj) {
    pageScope.r.src = videoObj.id.videoId;
    $scope.youtubeVideos = [];
  }

  $scope.updateVideoUrl = function (videoObj) {
    $scope.resource.src = videoObj.id.videoId;
    $scope.youtubeVideos = [];
  }

  $scope.checkAndSearchYoutubeVideos = function (keyEvent, name) {
    if (keyEvent.which === 13) {
      $scope.searchYoutubeVideos(name);
    }
  }


  init();
}
"use strict";

popupTeacherProfileCtrl.$inject = ["$scope", "$uibModalInstance", "$rootScope", "$http", "paCache", "paSubscription", "paTeacher", "teacher"];
angular.module('paApp').controller('popupTeacherProfileCtrl', popupTeacherProfileCtrl);

function popupTeacherProfileCtrl($scope, $uibModalInstance, $rootScope, $http, paCache, paSubscription, paTeacher, teacher) {
    $scope.teacher = teacher;

    var conf = paCache.getConf();
    $scope.conf = conf;

    $scope.init = function(){
        paTeacher.getTeacherMirgovoritProfile(teacher._id).then(function(profile){
            $scope.teacher.mirgovoritProfile = profile;
        });
        paTeacher.getFolderSubscriptions(teacher);
    }

    $scope.connect = function(){
        paSubscription.sendSubscriptionRequest(teacher._id).then(function(subscr){
            $uibModalInstance.close({reload:true});
        })
    }

    $scope.revoke = function(subscr){
        paSubscription.revokeSubscriptionRequest(subscr).then(function(subscr){
            $uibModalInstance.close({reload:true});
        })
    }

    $scope.close = function(){
        $uibModalInstance.dismiss();
    }

    $scope.init();
}
"use strict";

popupUnlockFolderCtrl.$inject = ["$scope", "$uibModalInstance", "$rootScope", "$http", "folder"];
angular.module('paApp').controller('popupUnlockFolderCtrl', popupUnlockFolderCtrl);

function popupUnlockFolderCtrl($scope, $uibModalInstance, $rootScope, $http, folder) {
    $scope.folder = folder;

    $scope.checkCertificate = function(number){
        $http.get('/ws/certificates/'+number).then(
            function(resp){
                if (!resp.data) {
                    $scope.error={message:'Certificate not found'};
                } else {
                    $scope.certificate=resp.data;
                    $scope.tab=1;
                }
            }
        )
    }
    $scope.unlock = function(){
        if (folder.requiresCertificate){
            $http.post('/ws/certificates/'+$scope.certificate._id+'/register', {teacher:$rootScope.user.teacher}).then(function(resp){
                $uibModalInstance.close();
            })
    

        } else {
            var subscr = {folder:folder._id,teacher:$rootScope.user.teacher,active:true};
            $http.post('/ws/folderSubscriptions', subscr)
                .then(function(resp){
                    $uibModalInstance.close();
                });
        }
    }
    $scope.next = function(){
        $scope.tab+=1;
    }
    $scope.cancel = function(){
        $uibModalInstance.dismiss();
    }

}
"use strict";

popupUserParamsCtrl.$inject = ["$scope", "$uibModalInstance", "paSocket", "user"];
angular.module('paApp').controller('popupUserParamsCtrl', popupUserParamsCtrl);

function popupUserParamsCtrl($scope, $uibModalInstance, paSocket, user) {
  $scope.init = function () {
    $scope.user = user;
  };

  $scope.close = function () {
    $uibModalInstance.dismiss('cancel');
  };

  $scope.save = function () {
    paSocket.emit("saveUserParam", {
      user: user.id,
      name: 'points',
      value: Number(user.params.points)
    });
    paSocket.emit("saveUserParam", {
      user: user.id,
      name: 'team',
      value: user.params.team
    });
    paSocket.emit("saveUserParam", {
      user: user.id,
      name: 'mark',
      value: user.params.mark
    });
    $uibModalInstance.close();

  };

  $scope.init();
}
"use strict";

popupWallpaperCtrl.$inject = ["$scope", "$uibModalInstance", "$rootScope", "$http", "config"];
angular.module('paApp').controller('popupWallpaperCtrl', popupWallpaperCtrl);

function popupWallpaperCtrl($scope, $uibModalInstance, $rootScope, $http, config) {

    $scope.init = function(){
        $scope.loadBlobs('wallpapers/');
    }

    $scope.loadBlobs = function(prefix){
        $http.post(config.apiUrl + '/ws/browse', {
            folder: 'cdn',
            prefix: prefix
          }).then(function (resp) {
            $scope.images = null;
            if (resp.data.Blob) {
                $scope.images = _.map([].concat(resp.data.Blob), function(blob){
                    return {
                        title: blob.Name.substring(blob.Name.lastIndexOf('/') + 1, blob.Name.lastIndexOf('.')),
                        src: config.storageBaseUrl+"/cdn/" + blob.Name,
                    }
                });
            }
            $scope.directories = null;
            if (resp.data.BlobPrefix) {
                $scope.directories = _.map([].concat(resp.data.BlobPrefix), function (d) {
                  return {
                    prefix: d.Name,
                    name: d.Name.substring(prefix ? prefix.length : 0, d.Name.length - 1)
                  };
                });
            }

          });        
    }
    $scope.select = function(i){
        $scope.sel=i;
        $scope.selected=true;
    }
    $scope.ok = function(){
        $uibModalInstance.close($scope.images[$scope.sel]);
    }
    $scope.close = function(){
        $uibModalInstance.dismiss();
    }
    $scope.init();

}
"use strict";

popupCardCtrl.$inject = ["$scope", "$uibModalInstance", "paCache", "paStorage", "bean", "blobs"];
angular.module('paApp').controller('popupCardCtrl', popupCardCtrl);

function popupCardCtrl($scope, $uibModalInstance, paCache, paStorage, bean, blobs) {
  $scope.bean = bean;
  $scope.blobs = blobs;
  $scope.conf = paCache.getConf();

  var getChars = function getChars(text) {
    var chars = [];

    for (var i = 0, l = text.length; i < l; i++) {
      chars.push({
        val: text.charAt(i)
      });
    }

    return chars;
  };

  $scope.loadBlobs = function(prefix){
    paStorage.loadBlobs(prefix, "image/gif,image/jpeg,image/png")
  }

  $scope.select = function(r) {
    _.extend(bean,r);
  }
  $scope.saveBean = function (bean) {
    if (bean.type == 'text' && !bean.chars) {
      bean.chars = getChars(bean.tmp);
      delete bean.tmp;
    }

    $uibModalInstance.close(bean);
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
}

;
"use strict";

postsController.$inject = ["$scope", "$http", "$rootScope", "$uibModal", "paSocket", "paCache", "toaster", "config"];
angular.module('paApp').controller('postsController', postsController);

function postsController($scope, $http, $rootScope, $uibModal, paSocket, paCache, toaster, config) {
  $scope.animateElementIn = function ($el) {
    $el.removeClass('not-visible');
    $el.addClass('animated zoomIn');
  };

  $scope.animateElementOut = function ($el) {
    $el.addClass('not-visible');
    $el.removeClass('animated zoomIn');
  };

  $scope.scrollToElement = function (id) {
    paSocket.emit("scroll", id);
  };

  $scope.init = function () {
    $scope.getPosts();
    $http.get(config.apiUrl + '/ws/vk/getUser').then(function (resp) {
      if (resp.data.error) {
        $scope.auth = true;
      } else {
        $scope.vkUser = resp.data[0];
      }
    });
  };

  $scope.getPosts = function () {
    var conf = paCache.getConf();
    var student = $rootScope.user.student || conf.asStudent._id;
    $http.post(config.apiUrl + '/ws/getPosts', {
      student: student
    }).then(function (resp) {
      $scope.posts = resp.data;
    });
  };

  $scope.init();
}
"use strict";

paProfileCtrl.$inject = ["$scope", "$rootScope", "$http", "$state", "paCache", "paTeacher", "toaster", "config", "countries"];
angular.module('paApp').controller('paProfileCtrl', paProfileCtrl);

function paProfileCtrl($scope, $rootScope, $http, $state, paCache, paTeacher, toaster, config, countries) {
  var conf = paCache.getConf();
  var pageScope = paCache.initPageScope();

  var init = function init() {
    $scope.countries=countries;
    $scope.teacher = _.clone(conf.teacher);
    if (!$scope.teacher.address){
      $scope.teacher.address={};
    }
    $scope.user = _.clone($rootScope.user);
    loadOpentok();
    $scope.pageScope = pageScope;
    paTeacher.loadCertificates(conf.teacher._id);
    paTeacher.getVkProfile($rootScope.user.id);
    paTeacher.getMirgovoritProfile($rootScope.user.id);
    paTeacher.getZoomProfile($rootScope.user.id);
  };

  $scope.saveProfile = function () {
    $http.post(config.apiUrl + '/ws/saveTeacher/' + $scope.teacher._id, $scope.teacher).then(function (resp) {
      conf.teacher = resp.data;
      $state.transitionTo('profile');
    });
  };

  var loadOpentok = function loadOpentok() {
    $http.get(config.apiUrl + '/ws/opentokClient/' + $scope.teacher._id).then(function (resp) {
      $scope.opentokClient = resp.data;
    });
  };

  $scope.saveOpentok = function () {
    $http.post(config.apiUrl + '/ws/opentokClient', $scope.opentokClient).then(function (resp) {
      toaster.pop('success', 'Opentok', 'Opentok profile saved');
      $state.transitionTo('profile');
    });
  };

  init();
}
"use strict";

randomWordsController.$inject = ["$scope", "$http", "$state", "$rootScope", "paSocket", "paService", "paCache", "config"];
angular.module('paApp').controller('randomWordsController', randomWordsController);

function randomWordsController($scope, $http, $state, $rootScope, paSocket, paService, paCache, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    $scope.data = paService.init();

    if ($rootScope.admin) {
      paService.findText().then(function (coll) {
        var words = _.shuffle(paService.split(coll.chars, ','));

        paSocket.emit('words', words);
      });
    }
  };

  $scope.setBoards = function (n) {
    paSocket.emit("var", {
      "var": 'boards',
      val: n
    });
  };

  $scope.init();
}
"use strict";

paRoomCtrl.$inject = ["$scope", "$rootScope", "$http", "$sce", "$uibModalInstance", "paSocket", "paChannel", "paCache", "config"];
angular.module('paApp').controller('paRoomCtrl', paRoomCtrl);

function paRoomCtrl($scope, $rootScope, $http, $sce, $uibModalInstance, paSocket, paChannel, paCache, config) {

  var conf = paCache.getConf();

  $scope.init=function(){
    $scope.conf=conf;
    $scope.loadSubscriptions();
    $scope.loadGroups();
  }

  $scope.loadSubscriptions = function(){
    $http.get(config.apiUrl + '/ws/findUserSubscriptions/' + $rootScope.user.teacher).then(function (resp) {
      var users=_.indexBy(resp.data,'student');
      $http.get(config.apiUrl + '/ws/findSubscriptions/' + $rootScope.user.teacher).then(function (resp) {
        $scope.subscriptions = _.filter(resp.data,function(subscr){
          return _.has(users,subscr.student._id);
        });
        _.each($scope.subscriptions, function(subscr){
          subscr.active=(subscr.student.channel!=null);
        })
      });
    });
  }

  $scope.saveSubscriptions = function () {
    paChannel.saveSubscriptions($scope.subscriptions).then(function(resp){
      paSocket.emit('reloadChannel', null);
      $uibModalInstance.dismiss('cancel');
    });
  };

  $scope.loadGroups = function(){
    $http.get(config.apiUrl + '/ws/teachers/' + $rootScope.user.teacher + '/groups').then(function (resp) {
      $scope.groups = resp.data;
    });
  }

  $scope.toggleGroup = function(group){
    if ($scope.selectedGroup && group._id==$scope.selectedGroup._id) {
      $scope.selectedGroup=null;
      _.each($scope.subscriptions, function(subscr){
        subscr.active=false;
      })
    } else {
      $scope.selectedGroup=group;
      $http.get('/ws/groups/'+group._id+'/subscriptions').then(function(resp){
        var groupIndex = _.indexBy(resp.data, 'student');
        _.each($scope.subscriptions, function(subscr){
          subscr.active=_.has(groupIndex, subscr.student._id);
        })
      })
    }
  }

  $scope.close = function(){
    $uibModalInstance.dismiss('cancel');
  }

  $scope.sendEmail = function(email){
    var body={
        to: {
          email: email
        },
        template: 'invite',
        opts:{
          '$NAME': conf.teacher.name + ' ' + conf.teacher.surname,
          '$CHANNEL': conf.channel._id
        }
    }
    $http.post('/ws/email/sendTo', body).then(function(resp){
      $scope.tab=1;
    })
  }

  $scope.close = function () {
    $uibModalInstance.dismiss('cancel');
  };

  $scope.init();
}
"use strict";

paScoreCtrl.$inject = ["$scope", "$uibModalInstance", "unit", "folder"];
angular.module('paApp').controller('paScoreCtrl', paScoreCtrl);

function paScoreCtrl($scope, $uibModalInstance, unit, folder) {
  $scope.unit = unit;
  $scope.folder = folder;

  $scope.ok = function () {
    $uibModalInstance.close();
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };
}
"use strict";

paStudentCtrl.$inject = ["$scope", "$rootScope", "$state", "$http", "paCache", "paStudent", "config"];
angular.module('paApp').controller('paStudentCtrl', paStudentCtrl);

function paStudentCtrl($scope, $rootScope, $state, $http, paCache, paStudent, config) {
  var conf = paCache.getConf();
  var pageScope = paCache.getPageScope();

  var init = function init() {
    $scope.conf = conf;
    $scope.pageScope = pageScope;

    if ($state.params.id) {
      $scope.tab='editStudent';
      paStudent.editStudent();
    } else {
      $scope.tab='addStudent';
      paStudent.addStudent();
    }

    paStudent.loadFolders();
    //paStudent.getGroups();
  };

  $scope.ok = function(){
    paStudent.saveOrUpdate();
  }

  $scope.importStudent = function(){
    paStudent.findStudent(pageScope.student.id).then(function(student){
      if (student){
        $scope.selectedStudent=student;
        $scope.tab="confirmImport";
        $scope.studentNotFound = undefined;
      } else {
        $scope.studentNotFound = true;
      }
    });
  }

  $scope.updateSubscription = function(){
    var subscr = {
      teacher: $rootScope.user.teacher,
      student: $scope.selectedStudent._id
    }

    paStudent.updateSubscription(subscr).then(function(subscr){
      $scope.back();
    });
  }

  $scope.back = function(){
    var conf = paCache.getConf();
    var to = (conf.organization)?'org-students':'students';
    $state.go(to);
  }
  init();
}
"use strict";

paStudentsCtrl.$inject = ["$scope", "$rootScope", "$http", "$uibModal", "$state", "paCache", "paStudent", "paSubscription", "config"];
angular.module('paApp').controller('paStudentsCtrl', paStudentsCtrl);

function paStudentsCtrl($scope, $rootScope, $http, $uibModal, $state, paCache, paStudent, paSubscription, config) {
  var pageScope = paCache.initPageScope();
  var conf = paCache.getConf();

  var init = function init() {
    $scope.pageScope = pageScope;
    $scope.conf = conf;
    if (conf.teacher.organization){
      paStudent.getOrganizationStudents(conf.teacher.organization._id);
      paStudent.getOrganizationGroups(conf.teacher.organization._id);
    } else {
      paStudent.getSubscriptions();
      paStudent.getGroups();
    }
  };

  $scope.removeSubscription = function (subscription) {
    var modalInstance = $uibModal.open({
      animation: true,
      templateUrl: '/pa/pa.confirm.html?05f9d40d98425d0a',
      controller: 'paConfirmCtrl',
      resolve: {
        message: function(){
          return 'Are you sure?'
        }
      }
    });
    modalInstance.result.then(function () {
      paStudent.removeSubscription(subscription);
    });
  };

  $scope.accept = function(subscr){
    paSubscription.acceptSubscriptionRequest(subscr).then(function(subscr){
      paStudent.getSubscriptions();
      paSubscription.loadPendingSubscriptions();
    })
  }

  $scope.subscribeStudent = function(student){
    paStudent.subscribeStudent(conf.teacher._id, student._id).then(function(resp){
      paStudent.getOrganizationStudents(conf.teacher.organization._id);
    })
  };

  $scope.subscribeGroup = function(group){
    paStudent.subscribeGroup(conf.teacher._id, group._id).then(function(resp){
      paStudent.getOrganizationStudents(conf.teacher.organization._id);
      paStudent.getOrganizationGroups(conf.teacher.organization._id);
    })
  };

  init();
}
"use strict";

paStyleController.$inject = ["$scope", "$state", "$stateParams", "$uibModal", "paStyle", "paCache"];
angular.module('paApp').controller('paStyleController', paStyleController);

function paStyleController($scope, $state, $stateParams, $uibModal, paStyle, paCache) {

    $scope.fontFamilies = ['Segoe UI', 'Georgia', 'Palatino Linotype', 'Book Antiqua', 'Times New Roman', 'Arial', 'Helvetica', 'Arial Black', 'Impact', 'Lucida Sans Unicode', 'Tahoma', 'Verdana', 'Courier New', 'Lucida Console', 'Sans-serif', 'Comic Sans MS', 'initial'];
    $scope.fontSizes = ['normal', 'small', 'large'];
    var conf = paCache.getConf();
    $scope.conf = conf;

    $scope.saveStyle=function(css){
        paStyle.saveStyle(css);
    }
    $scope.removeStyle=function(css){
      paStyle.removeStyle(css);
    }
    $scope.popupWallpapers = function(css){
      var modalInstance = $uibModal.open({
        animation: true,
        templateUrl: '/pa/popup.wallpapers.html?544b2aed8649009e',
        controller: 'popupWallpaperCtrl',
        size: 'lg'
      });
      modalInstance.result.then(function(blob) {
        css.style['background']='linear-gradient(rgba(255,255,255,.8), rgba(255,255,255,.8)), url("'+blob.src+'")'
      });
    }
  
}
"use strict";

paUnlockCtrl.$inject = ["$scope", "$rootScope", "$http", "$window", "paCache", "webinarService", "config"];
angular.module('paApp').controller('paUnlockCtrl', paUnlockCtrl);

function paUnlockCtrl($scope, $rootScope, $http, $window, paCache, webinarService, config) {

  var pageScope = paCache.initPageScope();

  $scope.init = function () {
    $scope.pageScope = pageScope;
    $scope.loadCourses();
    if($rootScope.user.role=='O'){
      $scope.unlockOrganization();
    } else {
      $scope.unlockTeacher();
    }
  };

  $scope.next = function(){
    $scope.tab=1;
  }
  
  $scope.loadCourses = function () {
    $http.get(config.apiUrl + '/ws/products').then(function (resp) {
      $scope.products = resp.data;
    });
  };

  $scope.unlockTeacher = function () {
    var conf = paCache.getConf();
    $http.post(config.apiUrl + '/ws/newPayment/' + $rootScope.user.teacher + '/unlock').then(function (resp) {
      $scope.payment = resp.data;
      $scope.payment.email = conf.teacher.email;
      $scope.payment.fullname = conf.teacher.surname + ' ' + conf.teacher.name;

      if (conf.teacher.middle) {
        $scope.payment.fullname += ' ' + conf.teacher.middle;
      }

    });
  };

  $scope.unlockOrganization = function () {
    var conf = paCache.getConf();
    $http.post(config.apiUrl + '/ws/organizations/' + $rootScope.user.organization + '/unlock').then(function (resp) {
      $scope.payment = resp.data;
      $scope.payment.email = conf.teacher.email;
      $scope.payment.fullname = conf.teacher.surname + ' ' + conf.teacher.name;

    });
  };

  $scope.checkout = function () {
    $http.post(config.apiUrl + '/ws/payments/' + $scope.payment._id + '/checkout/axerve', $scope.payment).then(function (resp) {
      $window.location.href = resp.data.formUrl;
    });
  };

  $scope.init();
}
"use strict";

paVideoCtrl.$inject = ["$scope", "$rootScope", "$http", "$sce", "$uibModalInstance", "config"];
angular.module('paApp').controller('paVideoCtrl', paVideoCtrl);

function paVideoCtrl($scope, $rootScope, $http, $sce, $uibModalInstance, config) {
  $scope.init = function () {
    $http.get(config.apiUrl + '/ws/video').then(function (resp) {
      $scope.videos = resp.data;
    });
  };

  $scope.playVideo = function (video) {
    $scope.videoSource = $sce.trustAsResourceUrl(video.src);
  };

  $scope.close = function () {
    $uibModalInstance.dismiss('cancel');
  };

  $scope.init();
}
"use strict";

webinarSubscriptionCtrl.$inject = ["$scope", "$rootScope", "$http", "$uibModalInstance", "paCache", "webinarService", "config", "webinarSubscription"];
angular.module('paApp').controller('webinarSubscriptionCtrl', webinarSubscriptionCtrl);

function webinarSubscriptionCtrl($scope, $rootScope, $http, $uibModalInstance, paCache, webinarService, config, webinarSubscription) {

  var pageScope = paCache.initPageScope();

  var init = function () {
    $scope.pageScope = pageScope;
    $scope.subscr = webinarSubscription;
    webinarService.loadWebinars();
  };

  $scope.setTab = function (tab) {
    $scope.tab = tab;
  };

  $scope.selectWebinar = function(webinar){
      $scope.tab = 1;
      $scope.selWebinar = webinar;
  }

  $scope.updateSubscription = function(webinar){
    $scope.subscr.webinar = webinar;
    webinarService.updateSubscription($scope.subscr).then(function(subscr){
      $uibModalInstance.close();
    });
  }

  $scope.cancel = function(){
    $uibModalInstance.dismiss('cancel');
  }

  init();
}
"use strict";

wordRaceController.$inject = ["$scope", "$http", "$state", "$rootScope", "paSocket", "paService", "paCache", "config"];
angular.module('paApp').controller('wordRaceController', wordRaceController);

function wordRaceController($scope, $http, $state, $rootScope, paSocket, paService, paCache, config) {
  $scope.$on('$destroy', function (event) {
    paSocket.removeAllListeners();
  });

  $scope.init = function () {
    $scope.data = paService.init();
    paService.findText().then(function (coll) {
      var lines = paService.split(coll.chars, '\n');
      var conf = paCache.getConf();

      var myIndex = _.findIndex(conf.room.users, function (user) {
        return user.username == $rootScope.user.username;
      });

      $scope.data.myWords = paService.split(lines[myIndex].chars, ',');

      if ($rootScope.admin) {
        var allWords = [];

        _.each(lines, function (line) {
          var words = paService.split(line.chars, ',');
          allWords = allWords.concat(words);
        });

        paSocket.emit('words', _.shuffle(allWords));
      }
    });
  };

  $scope.init();
}
"use strict";

paWorkplanCtrl.$inject = ["$scope", "$uibModalInstance", "$http", "data", "config"];
angular.module('paApp').controller('paWorkplanCtrl', paWorkplanCtrl);

function paWorkplanCtrl($scope, $uibModalInstance, $http, data, config) {
  $scope.init = function () {
    $scope.data = data;
    $scope.loadContents();
    $scope.sortableOptions={
      update: function(e, ui){
        $http.put(config.apiUrl + '/ws/workplans/' + data._id, data);
      }
    }
  };

  $scope.loadContents = function () {
    if (data._id) {
      $http.get(config.apiUrl + '/ws/workplans/' + data._id + '/contents').then(function (resp) {
        $scope.data.contents = resp.data;
      });
    }
  };

  $scope.remove = function () {
    $http["delete"](config.apiUrl + '/ws/workplans/' + data._id).then(function (resp) {
      $uibModalInstance.close();
    });
  };

  $scope.ok = function () {
    if (data._id) {
      $http.put(config.apiUrl + '/ws/workplans/' + data._id, data).then(function (resp) {
        if (resp.data.error) {
          $scope.error = resp.data.error;
        } else {
          $uibModalInstance.close();
        }
      });
    } else {
      $http.post(config.apiUrl + '/ws/workplans', data).then(function (resp) {
        if (resp.data.error) {
          $scope.error = resp.data.error;
        } else {
          $uibModalInstance.close();
        }
      });
    }
  };

  $scope.cancel = function () {
    $uibModalInstance.dismiss('cancel');
  };

  $scope.removeContent = function (content) {
    $http["delete"](config.apiUrl + '/ws/contents/' + content._id).then(function (resp) {
      $scope.loadContents();
    });
  };

  $scope.init();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,